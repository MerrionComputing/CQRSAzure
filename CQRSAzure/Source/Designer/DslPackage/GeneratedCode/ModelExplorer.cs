//------------------------------------------------------------------------------
// <auto-generated>
//	 This code was generated by a tool.
//
//	 Changes to this file may cause incorrect behavior and will be lost if
//	 the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslShell = global::Microsoft.VisualStudio.Modeling.Shell;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// Double-derived class to allow easier code customization.
	/// </summary>
	internal partial class CQRSdslExplorer : CQRSdslExplorerBase
	{
		/// <summary>
		/// Constructs a new CQRSdslExplorer.
		/// </summary>
		public CQRSdslExplorer(global::System.IServiceProvider serviceProvider)
			: base(serviceProvider)
		{
		}
	}
	
	/// <summary>
	/// Control hosted in the CQRSdslExplorerToolWindow.
	/// </summary>
	internal abstract class CQRSdslExplorerBase : DslShell::ModelExplorerTreeContainer
	{
		/// <summary>
		/// Constructs a new CQRSdslExplorerBase.
		/// </summary>
		protected CQRSdslExplorerBase(global::System.IServiceProvider serviceProvider) : base(serviceProvider)
		{
			
			
			// Adds custom tree node settings...
			global::System.Resources.ResourceManager resourceManager = global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel.SingletonResourceManager;
			
			this.AddExplorerNodeCustomSetting(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("AggregateIdentifierExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::CQRSAzure.CQRSdsl.Dsl.EventDefinition.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("EventDefinitionExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CommandDefinitionExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("ProjectionDefinitionExplorerImage")), 
							true); 
			this.AddExplorerNodeCustomSetting(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition.DomainClassId, 
							DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("QueryDefinitionExplorerImage")), 
							true); 
			
			// Add a call back to provide ModelElementTreeNode TreeNode name in the Model Explorer
			this.GetModelElementDisplayNameEventHandler = new DslShell.GetModelElementDisplayNameEventHandler(GetModelElementDisplayName);
		}
	
	
	
		/// <summary>
		/// Create IElementVisitor
		/// </summary>
		/// <returns>IElementVisitor</returns>
		protected override DslModeling::IElementVisitor CreateElementVisitor()
		{
			return new DslShell::ExplorerElementVisitor(this);
		}
	
		/// <summary>
		/// Specifies the context menu that should be shown for the model explorer.
		///</summary>
		protected override global::System.ComponentModel.Design.CommandID ContextMenuCommandId
		{
			get
			{
				return Constants.CQRSdslExplorerMenu;
			}
		}
		
		/// <summary>
		/// Returns the root elements domain class Id. The is the very top level tree node in the TreeView
		///</summary>
		protected override global::System.Guid RootElementDomainClassId
		{
			get { return global::CQRSAzure.CQRSdsl.Dsl.CQRSModel.DomainClassId; }
		}
		
		/// <summary>
		/// Returns the root elements to be displayed in the explorer.
		///</summary>
		protected override global::System.Collections.IList FindRootElements(DslModeling::Store store)
		{
			return store.ElementDirectory.FindElements( this.RootElementDomainClassId);
		}
			
		/// <summary>
		/// Method to supply the name for ModelElementTreeNode object in the TreeView.
		/// </summary>
		/// <param name="modelElement">Element to be displayed in the tree node</param>
		/// <returns>Name shown in the Model Explorer</returns>
		private string GetModelElementDisplayName(DslModeling::ModelElement modelElement)
		{
			string treeNodeDisplayName = null;
			DslModeling::DomainDataDirectory directory = modelElement.Store.DomainDataDirectory;
			DslModeling::DomainPropertyInfo domainPropertyInfo = null;
			DslModeling::ModelElement redirectedElement = null;
			
			switch ( modelElement.GetDomainClass().Id.ToString( "D", System.Globalization.CultureInfo.InvariantCulture) )
			{
				case "3d71fb67-1375-4f99-8206-12a78e514a4a":	// AggregateIdentifier.DomainClassId
				{
					domainPropertyInfo = directory.FindDomainProperty( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier.NameDomainPropertyId);
					redirectedElement = modelElement;
				}			
				break;
				
				case "a88729a0-1121-458a-b5c7-32ef0714b62a":	// EventDefinition.DomainClassId
				{
					domainPropertyInfo = directory.FindDomainProperty( global::CQRSAzure.CQRSdsl.Dsl.EventDefinition.NameDomainPropertyId);
					redirectedElement = modelElement;
				}			
				break;
				
				case "feed9883-9553-42cc-8b70-12dcd5032804":	// CommandDefinition.DomainClassId
				{
					domainPropertyInfo = directory.FindDomainProperty( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition.NameDomainPropertyId);
					redirectedElement = modelElement;
				}			
				break;
				
				case "a506bd6f-43f3-44ea-b88e-66d3aaa85077":	// ProjectionDefinition.DomainClassId
				{
					domainPropertyInfo = directory.FindDomainProperty( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition.NameDomainPropertyId);
					redirectedElement = modelElement;
				}			
				break;
				
				case "4b891bb8-8eb6-41d0-8d6a-79125b91b74b":	// QueryDefinition.DomainClassId
				{
					domainPropertyInfo = directory.FindDomainProperty( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition.NameDomainPropertyId);
					redirectedElement = modelElement;
				}			
				break;
				
		
			}
			
			if (domainPropertyInfo != null && redirectedElement != null)
			{
				// Get the name based on the designated domian property
				treeNodeDisplayName = domainPropertyInfo.GetValue(redirectedElement) as string;
			}
			else
			{
				// The passed in modelElement does not have a DomainPath specified. Try access the default name from the element.
				DslModeling::DomainClassInfo.TryGetName(modelElement, out treeNodeDisplayName);
			}
			return treeNodeDisplayName;
		}
	}
}
	


