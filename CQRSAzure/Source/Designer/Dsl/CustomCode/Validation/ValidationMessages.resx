<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AggregateKeyDataTypeMatch" xml:space="preserve">
    <value>The data type of a parameter with IsAggregateKey set should match the data type of the aggregate key</value>
  </data>
  <data name="AggregateNameNotBlank" xml:space="preserve">
    <value>The name of an aggregate identifier cannot be blank</value>
  </data>
  <data name="AggregateNameUnique" xml:space="preserve">
    <value>Each aggregate must have an unique name</value>
  </data>
  <data name="AggregateNameValid" xml:space="preserve">
    <value>The name of the aggregate must be a valid programming name</value>
  </data>
  <data name="ClassifierNameNotBlank" xml:space="preserve">
    <value>The name of a classifier cannot be blank</value>
  </data>
  <data name="ClassifierNameUnique" xml:space="preserve">
    <value>The name of the classifier must be unique for any given aggregate identifier</value>
  </data>
  <data name="CommandDefinitionNameNotBlank" xml:space="preserve">
    <value>The name of a command definition cannot be blank</value>
  </data>
  <data name="CommandDefinitionNameUnique" xml:space="preserve">
    <value>The name of a command must be unique for any given  aggregate identifier</value>
  </data>
  <data name="CommandDefinitionNameValid" xml:space="preserve">
    <value>The name of a command definition must be a valid programming name</value>
  </data>
  <data name="CommandDefinitionPresentTense" xml:space="preserve">
    <value>The name of a command should be a present tense verb</value>
  </data>
  <data name="CommandParameterNameNotBlank" xml:space="preserve">
    <value>The name of a command parameter must not be blank</value>
  </data>
  <data name="CommandParameterNameUnique" xml:space="preserve">
    <value>The name of a command parameter must be unique within any given command</value>
  </data>
  <data name="EventNameNotBlank" xml:space="preserve">
    <value>The name of an event cannot be blank</value>
  </data>
  <data name="EventNamePastTense" xml:space="preserve">
    <value>The name of an event should be a past tense verb</value>
  </data>
  <data name="EventNameUnique" xml:space="preserve">
    <value>The name of an event should be unique for any given aggregate identifier</value>
  </data>
  <data name="EventNameValid" xml:space="preserve">
    <value>The name of an event must be a valid programming name</value>
  </data>
  <data name="IdentityGroupNameNotBlank" xml:space="preserve">
    <value>The name of an identity group may not be blank</value>
  </data>
  <data name="IdentityGroupNameUnique" xml:space="preserve">
    <value>The name of an identity group must be unique for any given aggregate identifier</value>
  </data>
  <data name="IdentityGroupNameValid" xml:space="preserve">
    <value>The name of an identity group must not contain invalid characters</value>
  </data>
  <data name="ProjectionEventPropertyOperantionEventBlank" xml:space="preserve">
    <value>The projection event property operation must specify a source event name</value>
  </data>
  <data name="ProjectionEventPropertyOperantionEventInvalid" xml:space="preserve">
    <value>The projection event property operation have a source event name that is linked to the projection</value>
  </data>
  <data name="ProjectionEventPropertyOperationSourceBlank" xml:space="preserve">
    <value>For this property operation, a source field from the event is required</value>
  </data>
  <data name="ProjectionEventPropertyOperationSourceInvalid" xml:space="preserve">
    <value>The source field for this property oepration must match the fields in the handled event</value>
  </data>
  <data name="ProjectionEventPropertyOperationTargetBlank" xml:space="preserve">
    <value>The projection event property operation must specify a target field for the operation</value>
  </data>
  <data name="ProjectionEventPropertyOperationTargetInvalid" xml:space="preserve">
    <value>The target field for a projection event property operation must be a property of the projection</value>
  </data>
  <data name="ProjectionNameNotBlank" xml:space="preserve">
    <value>The name of a projection cannot be blank</value>
  </data>
  <data name="ProjectionNameUnique" xml:space="preserve">
    <value>The name of a projection must be unique for any given aggregate identifier</value>
  </data>
  <data name="ProjectionNameValid" xml:space="preserve">
    <value>The name of a projection must be a valid programming name</value>
  </data>
  <data name="ProjectionPropertyNameNotBlank" xml:space="preserve">
    <value>The name of a projection property may not be blank</value>
  </data>
  <data name="ProjectionPropertyNameUnique" xml:space="preserve">
    <value>The name of a projection property must be unique within that projection definition</value>
  </data>
  <data name="QueryDefinitionNameNotBlank" xml:space="preserve">
    <value>The name of a query definition cannot be blank</value>
  </data>
  <data name="QueryDefinitionNameUnique" xml:space="preserve">
    <value>The name of a query must be unique for any given aggregate identifier</value>
  </data>
  <data name="QueryDefinitionNameValid" xml:space="preserve">
    <value>The name of a query definition must be a valid programming name</value>
  </data>
  <data name="QueryParameterNameNotBlank" xml:space="preserve">
    <value>The name of a query parameter can not be blank</value>
  </data>
  <data name="QueryParameterNameUnique" xml:space="preserve">
    <value>The name of the query parameter must be unique within any given query</value>
  </data>
</root>