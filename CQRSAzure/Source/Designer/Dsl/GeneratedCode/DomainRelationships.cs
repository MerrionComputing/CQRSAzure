//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship CQRSModelHasAggregateIdentifiers
	/// Aggregate identifiers (types) in this domain
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("47895ddd-8bf3-4b75-ac66-588d2faebea4")]
	public partial class CQRSModelHasAggregateIdentifiers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CQRSModelHasAggregateIdentifiers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x47895ddd, 0x8bf3, 0x4b75, 0xac, 0x66, 0x58, 0x8d, 0x2f, 0xae, 0xbe, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CQRSModelHasAggregateIdentifiers link in the same Partition as the given CQRSModel
		/// </summary>
		/// <param name="source">CQRSModel to use as the source of the relationship.</param>
		/// <param name="target">AggregateIdentifier to use as the target of the relationship.</param>
		public CQRSModelHasAggregateIdentifiers(CQRSModel source, AggregateIdentifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId, source), new DslModeling::RoleAssignment(CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CQRSModelHasAggregateIdentifiers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CQRSModelHasAggregateIdentifiers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CQRSModelHasAggregateIdentifiers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CQRSModelHasAggregateIdentifiers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CQRSModel domain role code
		
		/// <summary>
		/// CQRSModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid CQRSModelDomainRoleId = new global::System.Guid(0x52a788dc, 0x6b6b, 0x4f5b, 0xa3, 0x5a, 0xb8, 0xc8, 0x3f, 0xcb, 0xb2, 0xd3);
		
		/// <summary>
		/// DomainRole CQRSModel
		/// Description for CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModel
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers/CQRSModel.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers/CQRSModel.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregateIdentifiers", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers/CQRSModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("52a788dc-6b6b-4f5b-a35a-b8c83fcbb2d3")]
		public virtual CQRSModel CQRSModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CQRSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, CQRSModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CQRSModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CQRSModel of a AggregateIdentifier
		/// <summary>
		/// Gets CQRSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CQRSModel GetCQRSModel(AggregateIdentifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AggregateIdentifierDomainRoleId) as CQRSModel;
		}
		
		/// <summary>
		/// Sets CQRSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCQRSModel(AggregateIdentifier element, CQRSModel newCQRSModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AggregateIdentifierDomainRoleId, newCQRSModel);
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0xb68fbfb5, 0x508c, 0x4bbd, 0x8d, 0xa1, 0xc1, 0xda, 0xaa, 0x5b, 0xc8, 0x04);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CQRSModel", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers/AggregateIdentifier.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b68fbfb5-508c-4bbd-8da1-c1daaa5bc804")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifiers of a CQRSModel
		/// <summary>
		/// Gets a list of AggregateIdentifiers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateIdentifier> GetAggregateIdentifiers(CQRSModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateIdentifier>, AggregateIdentifier>(element, CQRSModelDomainRoleId);
		}
		#endregion
		#region CQRSModel link accessor
		/// <summary>
		/// Get the list of CQRSModelHasAggregateIdentifiers links to a CQRSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers> GetLinksToAggregateIdentifiers ( global::CQRSAzure.CQRSdsl.Dsl.CQRSModel cQRSModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers>(cQRSModelInstance, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId);
		}
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the CQRSModelHasAggregateIdentifiers link to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers GetLinkToCQRSModel (global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AggregateIdentifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CQRSModelHasAggregateIdentifiers instance accessors
		
		/// <summary>
		/// Get any CQRSModelHasAggregateIdentifiers links between a given CQRSModel and a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.CQRSModel source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers>(source, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers link in links )
			{
				if ( target.Equals(link.AggregateIdentifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CQRSModelHasAggregateIdentifiers link between a given CQRSModeland a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers GetLink( global::CQRSAzure.CQRSdsl.Dsl.CQRSModel source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers>(source, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers link in links )
			{
				if ( target.Equals(link.AggregateIdentifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierHasEventDefinitions
	/// Description for CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e2674e6c-4bfd-4a31-9ab9-7c0a1753c011")]
	public partial class AggregateIdentifierHasEventDefinitions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierHasEventDefinitions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2674e6c, 0x4bfd, 0x4a31, 0x9a, 0xb9, 0x7c, 0x0a, 0x17, 0x53, 0xc0, 0x11);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierHasEventDefinitions link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">EventDefinition to use as the target of the relationship.</param>
		public AggregateIdentifierHasEventDefinitions(AggregateIdentifier source, EventDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasEventDefinitions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasEventDefinitions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasEventDefinitions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasEventDefinitions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0x87dbd11a, 0xf809, 0x4013, 0x97, 0xeb, 0x61, 0x87, 0xd0, 0x06, 0x53, 0x37);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EventDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/AggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("87dbd11a-f809-4013-97eb-6187d0065337")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifier of a EventDefinition
		/// <summary>
		/// Gets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateIdentifier GetAggregateIdentifier(EventDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EventDefinitionDomainRoleId) as AggregateIdentifier;
		}
		
		/// <summary>
		/// Sets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateIdentifier(EventDefinition element, AggregateIdentifier newAggregateIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EventDefinitionDomainRoleId, newAggregateIdentifier);
		}
		#endregion
		#region EventDefinition domain role code
		
		/// <summary>
		/// EventDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDefinitionDomainRoleId = new global::System.Guid(0x9a5ecfa5, 0x27ee, 0x4faf, 0x9e, 0x9d, 0x0a, 0x52, 0x88, 0x50, 0x65, 0x4e);
		
		/// <summary>
		/// DomainRole EventDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/EventDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/EventDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateIdentifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/EventDefinition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9a5ecfa5-27ee-4faf-9e9d-0a528850654e")]
		public virtual EventDefinition EventDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EventDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EventDefinitions of a AggregateIdentifier
		/// <summary>
		/// Gets a list of EventDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EventDefinition> GetEventDefinitions(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EventDefinition>, EventDefinition>(element, AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc0f79858, 0x8b69, 0x4dfd, 0xa7, 0x70, 0x09, 0x97, 0x5a, 0x35, 0xac, 0x00);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the link between the aggregate and its events
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c0f79858-8b69-4dfd-a770-09975a35ac00")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierHasEventDefinitions.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierHasEventDefinitions, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierHasEventDefinitions.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierHasEventDefinitions.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierHasEventDefinitions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierHasEventDefinitions element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierHasEventDefinitions links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions> GetLinksToEventDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region EventDefinition link accessor
		/// <summary>
		/// Get the AggregateIdentifierHasEventDefinitions link to a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions GetLinkToAggregateIdentifier (global::CQRSAzure.CQRSdsl.Dsl.EventDefinition eventDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions>(eventDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EventDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateIdentifierHasEventDefinitions instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierHasEventDefinitions links between a given AggregateIdentifier and a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions link in links )
			{
				if ( target.Equals(link.EventDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierHasEventDefinitions link between a given AggregateIdentifierand a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions link in links )
			{
				if ( target.Equals(link.EventDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierHasProjectionDefinitions
	/// Description for
	/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("ba3dd482-7ba0-49c9-9ab7-5364bb64302b")]
	public partial class AggregateIdentifierHasProjectionDefinitions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierHasProjectionDefinitions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba3dd482, 0x7ba0, 0x49c9, 0x9a, 0xb7, 0x53, 0x64, 0xbb, 0x64, 0x30, 0x2b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierHasProjectionDefinitions link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">ProjectionDefinition to use as the target of the relationship.</param>
		public AggregateIdentifierHasProjectionDefinitions(AggregateIdentifier source, ProjectionDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasProjectionDefinitions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasProjectionDefinitions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasProjectionDefinitions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasProjectionDefinitions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0xf57074c2, 0x5fd1, 0x47a1, 0xb2, 0x7c, 0xad, 0xc6, 0x51, 0x34, 0x4e, 0x53);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/AggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f57074c2-5fd1-47a1-b27c-adc651344e53")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifier of a ProjectionDefinition
		/// <summary>
		/// Gets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateIdentifier GetAggregateIdentifier(ProjectionDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionDefinitionDomainRoleId) as AggregateIdentifier;
		}
		
		/// <summary>
		/// Sets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateIdentifier(ProjectionDefinition element, AggregateIdentifier newAggregateIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionDefinitionDomainRoleId, newAggregateIdentifier);
		}
		#endregion
		#region ProjectionDefinition domain role code
		
		/// <summary>
		/// ProjectionDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDefinitionDomainRoleId = new global::System.Guid(0x5d70ec76, 0xf730, 0x442c, 0x90, 0x1c, 0xae, 0x27, 0x9d, 0x2c, 0xc2, 0x43);
		
		/// <summary>
		/// DomainRole ProjectionDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/ProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/ProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateIdentifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/ProjectionDefinition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5d70ec76-f730-442c-901c-ae279d2cc243")]
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionDefinitions of a AggregateIdentifier
		/// <summary>
		/// Gets a list of ProjectionDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProjectionDefinition> GetProjectionDefinitions(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionDefinition>, ProjectionDefinition>(element, AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2509c202, 0x5f4e, 0x4892, 0xaf, 0x54, 0xfe, 0xdb, 0xb3, 0x7d, 0xd4, 0x6c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the link between the aggregate and its projections
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("2509c202-5f4e-4892-af54-fedbb37dd46c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierHasProjectionDefinitions.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierHasProjectionDefinitions, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierHasProjectionDefinitions.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierHasProjectionDefinitions.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierHasProjectionDefinitions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierHasProjectionDefinitions element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierHasProjectionDefinitions links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions> GetLinksToProjectionDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region ProjectionDefinition link accessor
		/// <summary>
		/// Get the AggregateIdentifierHasProjectionDefinitions link to a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions GetLinkToAggregateIdentifier (global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition projectionDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions>(projectionDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProjectionDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateIdentifierHasProjectionDefinitions instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierHasProjectionDefinitions links between a given AggregateIdentifier and a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions link in links )
			{
				if ( target.Equals(link.ProjectionDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierHasProjectionDefinitions link between a given AggregateIdentifierand a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions link in links )
			{
				if ( target.Equals(link.ProjectionDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierIsChildOfTargetAggregateIdentifiers
	/// Relationship between an aggregate identifier and its parent identifier (if such
	/// exists)
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("4a0b0281-9475-4589-843c-981ed16dec78")]
	public partial class AggregateIdentifierIsChildOfTargetAggregateIdentifiers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierIsChildOfTargetAggregateIdentifiers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4a0b0281, 0x9475, 0x4589, 0x84, 0x3c, 0x98, 0x1e, 0xd1, 0x6d, 0xec, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierIsChildOfTargetAggregateIdentifiers link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">AggregateIdentifier to use as the target of the relationship.</param>
		public AggregateIdentifierIsChildOfTargetAggregateIdentifiers(AggregateIdentifier source, AggregateIdentifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierIsChildOfTargetAggregateIdentifiers.TargetAggregateIdentifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierIsChildOfTargetAggregateIdentifiers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierIsChildOfTargetAggregateIdentifiers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierIsChildOfTargetAggregateIdentifiers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierIsChildOfTargetAggregateIdentifiers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceAggregateIdentifier domain role code
		
		/// <summary>
		/// SourceAggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceAggregateIdentifierDomainRoleId = new global::System.Guid(0xce8a1056, 0xeffd, 0x4b73, 0xb3, 0xce, 0xb4, 0x65, 0xf9, 0xa0, 0x45, 0xcd);
		
		/// <summary>
		/// DomainRole SourceAggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/SourceAggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/SourceAggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetAggregateIdentifiers", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/SourceAggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ce8a1056-effd-4b73-b3ce-b465f9a045cd")]
		public virtual AggregateIdentifier SourceAggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceAggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceAggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceAggregateIdentifiers of a AggregateIdentifier
		/// <summary>
		/// Gets a list of SourceAggregateIdentifiers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateIdentifier> GetSourceAggregateIdentifiers(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateIdentifier>, AggregateIdentifier>(element, TargetAggregateIdentifierDomainRoleId);
		}
		#endregion
		#region TargetAggregateIdentifier domain role code
		
		/// <summary>
		/// TargetAggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetAggregateIdentifierDomainRoleId = new global::System.Guid(0xde708f59, 0xe445, 0x4b30, 0xb9, 0x1a, 0x2e, 0x5e, 0x98, 0xa7, 0x92, 0x13);
		
		/// <summary>
		/// DomainRole TargetAggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.TargetAggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/TargetAggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/TargetAggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceAggregateIdentifiers", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/TargetAggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("de708f59-e445-4b30-b91a-2e5e98a79213")]
		public virtual AggregateIdentifier TargetAggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetAggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetAggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetAggregateIdentifiers of a AggregateIdentifier
		/// <summary>
		/// Gets a list of TargetAggregateIdentifiers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<AggregateIdentifier> GetTargetAggregateIdentifiers(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateIdentifier>, AggregateIdentifier>(element, SourceAggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xbc27cfb9, 0xeb12, 0x4f97, 0xbe, 0x03, 0x9e, 0x3d, 0x5e, 0xf2, 0x29, 0xfd);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the parent-child relationship between aggregations
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("bc27cfb9-eb12-4f97-be03-9e3d5ef229fd")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierIsChildOfTargetAggregateIdentifiers.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierIsChildOfTargetAggregateIdentifiers, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierIsChildOfTargetAggregateIdentifiers.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierIsChildOfTargetAggregateIdentifiers.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierIsChildOfTargetAggregateIdentifiers element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierIsChildOfTargetAggregateIdentifiers element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceAggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierIsChildOfTargetAggregateIdentifiers links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers> GetLinksToTargetAggregateIdentifiers ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier sourceAggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers>(sourceAggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifierDomainRoleId);
		}
		#endregion
		#region TargetAggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierIsChildOfTargetAggregateIdentifiers links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers> GetLinksToSourceAggregateIdentifiers ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier targetAggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers>(targetAggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.TargetAggregateIdentifierDomainRoleId);
		}
		#endregion
		#region AggregateIdentifierIsChildOfTargetAggregateIdentifiers instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierIsChildOfTargetAggregateIdentifiers links between a given AggregateIdentifier and a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers link in links )
			{
				if ( target.Equals(link.TargetAggregateIdentifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierIsChildOfTargetAggregateIdentifiers link between a given AggregateIdentifierand a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers link in links )
			{
				if ( target.Equals(link.TargetAggregateIdentifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierHasCommandDefinitions
	/// Description for CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("95cb214e-1625-4929-9f3f-e9a22f926615")]
	public partial class AggregateIdentifierHasCommandDefinitions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierHasCommandDefinitions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x95cb214e, 0x1625, 0x4929, 0x9f, 0x3f, 0xe9, 0xa2, 0x2f, 0x92, 0x66, 0x15);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierHasCommandDefinitions link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">CommandDefinition to use as the target of the relationship.</param>
		public AggregateIdentifierHasCommandDefinitions(AggregateIdentifier source, CommandDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasCommandDefinitions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasCommandDefinitions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasCommandDefinitions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasCommandDefinitions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0xea4fdf99, 0xc277, 0x4b52, 0xbf, 0x75, 0xd5, 0x06, 0x22, 0x7e, 0xa4, 0x0b);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CommandDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/AggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ea4fdf99-c277-4b52-bf75-d506227ea40b")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifier of a CommandDefinition
		/// <summary>
		/// Gets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateIdentifier GetAggregateIdentifier(CommandDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommandDefinitionDomainRoleId) as AggregateIdentifier;
		}
		
		/// <summary>
		/// Sets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateIdentifier(CommandDefinition element, AggregateIdentifier newAggregateIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommandDefinitionDomainRoleId, newAggregateIdentifier);
		}
		#endregion
		#region CommandDefinition domain role code
		
		/// <summary>
		/// CommandDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDefinitionDomainRoleId = new global::System.Guid(0x1ade1c6b, 0xa107, 0x4e4f, 0xab, 0xb5, 0x44, 0xe4, 0x3f, 0x83, 0x4d, 0xc3);
		
		/// <summary>
		/// DomainRole CommandDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/CommandDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/CommandDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateIdentifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/CommandDefinition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("1ade1c6b-a107-4e4f-abb5-44e43f834dc3")]
		public virtual CommandDefinition CommandDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CommandDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CommandDefinitions of a AggregateIdentifier
		/// <summary>
		/// Gets a list of CommandDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CommandDefinition> GetCommandDefinitions(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CommandDefinition>, CommandDefinition>(element, AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3aed6b89, 0xd9cc, 0x4edf, 0xbd, 0xb0, 0x73, 0x45, 0x03, 0xaa, 0x9a, 0xdc);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the connection between an aggregate and its command definitions
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("3aed6b89-d9cc-4edf-bdb0-734503aa9adc")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierHasCommandDefinitions.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierHasCommandDefinitions, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierHasCommandDefinitions.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierHasCommandDefinitions.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierHasCommandDefinitions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierHasCommandDefinitions element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierHasCommandDefinitions links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions> GetLinksToCommandDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region CommandDefinition link accessor
		/// <summary>
		/// Get the AggregateIdentifierHasCommandDefinitions link to a CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions GetLinkToAggregateIdentifier (global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition commandDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions>(commandDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CommandDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateIdentifierHasCommandDefinitions instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierHasCommandDefinitions links between a given AggregateIdentifier and a CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions link in links )
			{
				if ( target.Equals(link.CommandDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierHasCommandDefinitions link between a given AggregateIdentifierand a CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions link in links )
			{
				if ( target.Equals(link.CommandDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship EventDefinitionHasEventProperties
	/// Description for CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("1ee9384a-cf1d-4dd5-9957-cc118deeefd7")]
	public partial class EventDefinitionHasEventProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EventDefinitionHasEventProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1ee9384a, 0xcf1d, 0x4dd5, 0x99, 0x57, 0xcc, 0x11, 0x8d, 0xee, 0xef, 0xd7);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EventDefinitionHasEventProperties link in the same Partition as the given EventDefinition
		/// </summary>
		/// <param name="source">EventDefinition to use as the source of the relationship.</param>
		/// <param name="target">EventProperty to use as the target of the relationship.</param>
		public EventDefinitionHasEventProperties(EventDefinition source, EventProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EventDefinitionHasEventProperties.EventDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(EventDefinitionHasEventProperties.EventPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EventDefinitionHasEventProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EventDefinitionHasEventProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EventDefinitionHasEventProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EventDefinitionHasEventProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region EventDefinition domain role code
		
		/// <summary>
		/// EventDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDefinitionDomainRoleId = new global::System.Guid(0xdfd27afd, 0x8260, 0x497a, 0xa4, 0xa7, 0xad, 0x67, 0xd0, 0xdd, 0x81, 0xe2);
		
		/// <summary>
		/// DomainRole EventDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/EventDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/EventDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EventProperties", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/EventDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dfd27afd-8260-497a-a4a7-ad67d0dd81e2")]
		public virtual EventDefinition EventDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EventDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EventDefinition of a EventProperty
		/// <summary>
		/// Gets EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static EventDefinition GetEventDefinition(EventProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EventPropertyDomainRoleId) as EventDefinition;
		}
		
		/// <summary>
		/// Sets EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetEventDefinition(EventProperty element, EventDefinition newEventDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EventPropertyDomainRoleId, newEventDefinition);
		}
		#endregion
		#region EventProperty domain role code
		
		/// <summary>
		/// EventProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventPropertyDomainRoleId = new global::System.Guid(0xb7a944e4, 0xa15b, 0x4d60, 0x9a, 0x47, 0x02, 0x60, 0x30, 0x7b, 0xcc, 0xf1);
		
		/// <summary>
		/// DomainRole EventProperty
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventProperty
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/EventProperty.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/EventProperty.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "EventDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/EventProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b7a944e4-a15b-4d60-9a47-0260307bccf1")]
		public virtual EventProperty EventProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EventProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EventProperties of a EventDefinition
		/// <summary>
		/// Gets a list of EventProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EventProperty> GetEventProperties(EventDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EventProperty>, EventProperty>(element, EventDefinitionDomainRoleId);
		}
		#endregion
		#region CreatedVersion domain property code
		
		/// <summary>
		/// CreatedVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid CreatedVersionDomainPropertyId = new global::System.Guid(0x6a1d6427, 0xd4f2, 0x4092, 0xa9, 0xf0, 0xf7, 0xe0, 0x1d, 0x48, 0x29, 0x26);
		
		/// <summary>
		/// Storage for CreatedVersion
		/// </summary>
		private global::System.UInt32 createdVersionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CreatedVersion domain property.
		/// The version of the event definition for which this property was first added
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/CreatedVersion.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/CreatedVersion.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/CreatedVersion.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6a1d6427-d4f2-4092-a9f0-f7e01d482926")]
		public global::System.UInt32 CreatedVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return createdVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CreatedVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinitionHasEventProperties.CreatedVersion domain property.
		/// </summary>
		internal sealed partial class CreatedVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinitionHasEventProperties, global::System.UInt32>
		{
			private CreatedVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinitionHasEventProperties.CreatedVersion domain property value handler.
			/// </summary>
			public static readonly CreatedVersionPropertyHandler Instance = new CreatedVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinitionHasEventProperties.CreatedVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CreatedVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.UInt32 GetValue(EventDefinitionHasEventProperties element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.createdVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinitionHasEventProperties element, global::System.UInt32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.UInt32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.createdVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DepreciatedVersion domain property code
		
		/// <summary>
		/// DepreciatedVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid DepreciatedVersionDomainPropertyId = new global::System.Guid(0xe814cc9b, 0x4f43, 0x4029, 0xa4, 0xb5, 0x5f, 0x3f, 0x89, 0x97, 0xdb, 0x31);
		
		/// <summary>
		/// Storage for DepreciatedVersion
		/// </summary>
		private global::System.UInt32 depreciatedVersionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DepreciatedVersion domain property.
		/// The version number after which this property is no longer implemented
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/DepreciatedVersion.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/DepreciatedVersion.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e814cc9b-4f43-4029-a4b5-5f3f8997db31")]
		public global::System.UInt32 DepreciatedVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return depreciatedVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DepreciatedVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinitionHasEventProperties.DepreciatedVersion domain property.
		/// </summary>
		internal sealed partial class DepreciatedVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinitionHasEventProperties, global::System.UInt32>
		{
			private DepreciatedVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinitionHasEventProperties.DepreciatedVersion domain property value handler.
			/// </summary>
			public static readonly DepreciatedVersionPropertyHandler Instance = new DepreciatedVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinitionHasEventProperties.DepreciatedVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DepreciatedVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.UInt32 GetValue(EventDefinitionHasEventProperties element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.depreciatedVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinitionHasEventProperties element, global::System.UInt32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.UInt32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.depreciatedVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2c4fb3b0, 0xc9b3, 0x44bc, 0xae, 0xc8, 0x65, 0xbe, 0x7d, 0x97, 0x6a, 0x56);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the link between the event and its properties
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2c4fb3b0-c9b3-44bc-aec8-65be7d976a56")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinitionHasEventProperties.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinitionHasEventProperties, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinitionHasEventProperties.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinitionHasEventProperties.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventDefinitionHasEventProperties element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinitionHasEventProperties element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EventDefinition link accessor
		/// <summary>
		/// Get the list of EventDefinitionHasEventProperties links to a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties> GetLinksToEventProperties ( global::CQRSAzure.CQRSdsl.Dsl.EventDefinition eventDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties>(eventDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinitionDomainRoleId);
		}
		#endregion
		#region EventProperty link accessor
		/// <summary>
		/// Get the EventDefinitionHasEventProperties link to a EventProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties GetLinkToEventDefinition (global::CQRSAzure.CQRSdsl.Dsl.EventProperty eventPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties>(eventPropertyInstance, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of EventProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region EventDefinitionHasEventProperties instance accessors
		
		/// <summary>
		/// Get any EventDefinitionHasEventProperties links between a given EventDefinition and a EventProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.EventDefinition source, global::CQRSAzure.CQRSdsl.Dsl.EventProperty target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties>(source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties link in links )
			{
				if ( target.Equals(link.EventProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EventDefinitionHasEventProperties link between a given EventDefinitionand a EventProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties GetLink( global::CQRSAzure.CQRSdsl.Dsl.EventDefinition source, global::CQRSAzure.CQRSdsl.Dsl.EventProperty target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties>(source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties link in links )
			{
				if ( target.Equals(link.EventProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship ProjectionDefinitionHasProjectionProperties
	/// Description for
	/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("22b7c8f3-e336-46b2-9266-a633d5cda505")]
	public partial class ProjectionDefinitionHasProjectionProperties : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProjectionDefinitionHasProjectionProperties domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x22b7c8f3, 0xe336, 0x46b2, 0x92, 0x66, 0xa6, 0x33, 0xd5, 0xcd, 0xa5, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProjectionDefinitionHasProjectionProperties link in the same Partition as the given ProjectionDefinition
		/// </summary>
		/// <param name="source">ProjectionDefinition to use as the source of the relationship.</param>
		/// <param name="target">ProjectionProperty to use as the target of the relationship.</param>
		public ProjectionDefinitionHasProjectionProperties(ProjectionDefinition source, ProjectionProperty target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProjectionDefinitionHasProjectionProperties(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProjectionDefinitionHasProjectionProperties(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProjectionDefinitionHasProjectionProperties(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProjectionDefinitionHasProjectionProperties(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProjectionDefinition domain role code
		
		/// <summary>
		/// ProjectionDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDefinitionDomainRoleId = new global::System.Guid(0x693c2022, 0x95a2, 0x495e, 0xaa, 0x33, 0x8c, 0x86, 0x11, 0x3d, 0x08, 0x88);
		
		/// <summary>
		/// DomainRole ProjectionDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/ProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/ProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionProperties", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/ProjectionDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("693c2022-95a2-495e-aa33-8c86113d0888")]
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionDefinition of a ProjectionProperty
		/// <summary>
		/// Gets ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ProjectionDefinition GetProjectionDefinition(ProjectionProperty element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionPropertyDomainRoleId) as ProjectionDefinition;
		}
		
		/// <summary>
		/// Sets ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectionDefinition(ProjectionProperty element, ProjectionDefinition newProjectionDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionPropertyDomainRoleId, newProjectionDefinition);
		}
		#endregion
		#region ProjectionProperty domain role code
		
		/// <summary>
		/// ProjectionProperty domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionPropertyDomainRoleId = new global::System.Guid(0x63f6afa3, 0xfa12, 0x4fe0, 0xb5, 0xd0, 0x8c, 0x31, 0xa9, 0xad, 0x68, 0x81);
		
		/// <summary>
		/// DomainRole ProjectionProperty
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionProperty
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/ProjectionProperty.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/ProjectionProperty.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProjectionDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/ProjectionProperty.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("63f6afa3-fa12-4fe0-b5d0-8c31a9ad6881")]
		public virtual ProjectionProperty ProjectionProperty
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionProperty)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionPropertyDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionPropertyDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionProperties of a ProjectionDefinition
		/// <summary>
		/// Gets a list of ProjectionProperties.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProjectionProperty> GetProjectionProperties(ProjectionDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionProperty>, ProjectionProperty>(element, ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x6e235a26, 0x0a9e, 0x4ae3, 0xbf, 0x70, 0x0d, 0x6a, 0xad, 0xc4, 0x43, 0x76);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the connection between the projection and its properties
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6e235a26-0a9e-4ae3-bf70-0d6aadc44376")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinitionHasProjectionProperties.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinitionHasProjectionProperties, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinitionHasProjectionProperties.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinitionHasProjectionProperties.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinitionHasProjectionProperties element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinitionHasProjectionProperties element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectionDefinition link accessor
		/// <summary>
		/// Get the list of ProjectionDefinitionHasProjectionProperties links to a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties> GetLinksToProjectionProperties ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition projectionDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties>(projectionDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region ProjectionProperty link accessor
		/// <summary>
		/// Get the ProjectionDefinitionHasProjectionProperties link to a ProjectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties GetLinkToProjectionDefinition (global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty projectionPropertyInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties>(projectionPropertyInstance, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProjectionProperty not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProjectionDefinitionHasProjectionProperties instance accessors
		
		/// <summary>
		/// Get any ProjectionDefinitionHasProjectionProperties links between a given ProjectionDefinition and a ProjectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties>(source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties link in links )
			{
				if ( target.Equals(link.ProjectionProperty) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProjectionDefinitionHasProjectionProperties link between a given ProjectionDefinitionand a ProjectionProperty.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties GetLink( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties>(source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties link in links )
			{
				if ( target.Equals(link.ProjectionProperty) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship CommandDefinitionHasParameters
	/// Description for CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("0d9211f3-f871-40db-b147-8ed562f84e1a")]
	public partial class CommandDefinitionHasParameters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommandDefinitionHasParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0d9211f3, 0xf871, 0x40db, 0xb1, 0x47, 0x8e, 0xd5, 0x62, 0xf8, 0x4e, 0x1a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommandDefinitionHasParameters link in the same Partition as the given CommandDefinition
		/// </summary>
		/// <param name="source">CommandDefinition to use as the source of the relationship.</param>
		/// <param name="target">CommandParameter to use as the target of the relationship.</param>
		public CommandDefinitionHasParameters(CommandDefinition source, CommandParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommandDefinitionHasParameters.CommandDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(CommandDefinitionHasParameters.CommandParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandDefinitionHasParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandDefinitionHasParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandDefinitionHasParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandDefinitionHasParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CommandDefinition domain role code
		
		/// <summary>
		/// CommandDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDefinitionDomainRoleId = new global::System.Guid(0xa118b289, 0x62b6, 0x4a80, 0xaf, 0xaf, 0x11, 0xa5, 0x38, 0x97, 0x1b, 0x93);
		
		/// <summary>
		/// DomainRole CommandDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/CommandDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/CommandDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CommandParameters", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/CommandDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a118b289-62b6-4a80-afaf-11a538971b93")]
		public virtual CommandDefinition CommandDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CommandDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CommandDefinition of a CommandParameter
		/// <summary>
		/// Gets CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CommandDefinition GetCommandDefinition(CommandParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommandParameterDomainRoleId) as CommandDefinition;
		}
		
		/// <summary>
		/// Sets CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCommandDefinition(CommandParameter element, CommandDefinition newCommandDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommandParameterDomainRoleId, newCommandDefinition);
		}
		#endregion
		#region CommandParameter domain role code
		
		/// <summary>
		/// CommandParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandParameterDomainRoleId = new global::System.Guid(0x6b1a28b9, 0x3e0c, 0x4ef3, 0x93, 0x86, 0x3f, 0x6d, 0x8b, 0x46, 0x84, 0xbc);
		
		/// <summary>
		/// DomainRole CommandParameter
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/CommandParameter.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/CommandParameter.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CommandDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/CommandParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6b1a28b9-3e0c-4ef3-9386-3f6d8b4684bc")]
		public virtual CommandParameter CommandParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CommandParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CommandParameters of a CommandDefinition
		/// <summary>
		/// Gets a list of CommandParameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CommandParameter> GetCommandParameters(CommandDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CommandParameter>, CommandParameter>(element, CommandDefinitionDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xbec9031d, 0xd613, 0x48df, 0x98, 0xca, 0xff, 0x43, 0x5f, 0xdb, 0x04, 0xd3);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the connection between the command definition and its parameters
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("bec9031d-d613-48df-98ca-ff435fdb04d3")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandDefinitionHasParameters.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CommandDefinitionHasParameters, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandDefinitionHasParameters.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandDefinitionHasParameters.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandDefinitionHasParameters element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandDefinitionHasParameters element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CommandDefinition link accessor
		/// <summary>
		/// Get the list of CommandDefinitionHasParameters links to a CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters> GetLinksToCommandParameters ( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition commandDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters>(commandDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinitionDomainRoleId);
		}
		#endregion
		#region CommandParameter link accessor
		/// <summary>
		/// Get the CommandDefinitionHasParameters link to a CommandParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters GetLinkToCommandDefinition (global::CQRSAzure.CQRSdsl.Dsl.CommandParameter commandParameterInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters>(commandParameterInstance, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CommandParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CommandDefinitionHasParameters instance accessors
		
		/// <summary>
		/// Get any CommandDefinitionHasParameters links between a given CommandDefinition and a CommandParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition source, global::CQRSAzure.CQRSdsl.Dsl.CommandParameter target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters>(source, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters link in links )
			{
				if ( target.Equals(link.CommandParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommandDefinitionHasParameters link between a given CommandDefinitionand a CommandParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters GetLink( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition source, global::CQRSAzure.CQRSdsl.Dsl.CommandParameter target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters>(source, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters link in links )
			{
				if ( target.Equals(link.CommandParameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierHasQueryDefinitions
	/// Description for CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("da104a14-17c3-4cfa-960d-9bea21de7f05")]
	public partial class AggregateIdentifierHasQueryDefinitions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierHasQueryDefinitions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xda104a14, 0x17c3, 0x4cfa, 0x96, 0x0d, 0x9b, 0xea, 0x21, 0xde, 0x7f, 0x05);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierHasQueryDefinitions link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">QueryDefinition to use as the target of the relationship.</param>
		public AggregateIdentifierHasQueryDefinitions(AggregateIdentifier source, QueryDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasQueryDefinitions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasQueryDefinitions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasQueryDefinitions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasQueryDefinitions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0xae82de13, 0x4c00, 0x4873, 0xad, 0xdf, 0xbb, 0x63, 0xbe, 0x3b, 0x0b, 0x2a);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "QueryDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/AggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ae82de13-4c00-4873-addf-bb63be3b0b2a")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifier of a QueryDefinition
		/// <summary>
		/// Gets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateIdentifier GetAggregateIdentifier(QueryDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, QueryDefinitionDomainRoleId) as AggregateIdentifier;
		}
		
		/// <summary>
		/// Sets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateIdentifier(QueryDefinition element, AggregateIdentifier newAggregateIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, QueryDefinitionDomainRoleId, newAggregateIdentifier);
		}
		#endregion
		#region QueryDefinition domain role code
		
		/// <summary>
		/// QueryDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryDefinitionDomainRoleId = new global::System.Guid(0xac0977e5, 0xb342, 0x4a33, 0x97, 0x46, 0x1a, 0x90, 0x7d, 0xb6, 0xa5, 0x1b);
		
		/// <summary>
		/// DomainRole QueryDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/QueryDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/QueryDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateIdentifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/QueryDefinition.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ac0977e5-b342-4a33-9746-1a907db6a51b")]
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryDefinitions of a AggregateIdentifier
		/// <summary>
		/// Gets a list of QueryDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryDefinition> GetQueryDefinitions(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<QueryDefinition>, QueryDefinition>(element, AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xeb90ac02, 0x07d2, 0x42d8, 0xbc, 0xb6, 0x7d, 0xe5, 0x6f, 0xd4, 0x3d, 0xcb);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the connection between an aggregate and its query definitions
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("eb90ac02-07d2-42d8-bcb6-7de56fd43dcb")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierHasQueryDefinitions.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierHasQueryDefinitions, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierHasQueryDefinitions.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierHasQueryDefinitions.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierHasQueryDefinitions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierHasQueryDefinitions element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierHasQueryDefinitions links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions> GetLinksToQueryDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region QueryDefinition link accessor
		/// <summary>
		/// Get the AggregateIdentifierHasQueryDefinitions link to a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions GetLinkToAggregateIdentifier (global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition queryDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions>(queryDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of QueryDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateIdentifierHasQueryDefinitions instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierHasQueryDefinitions links between a given AggregateIdentifier and a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions link in links )
			{
				if ( target.Equals(link.QueryDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierHasQueryDefinitions link between a given AggregateIdentifierand a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions link in links )
			{
				if ( target.Equals(link.QueryDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship QueryDefinitionHasQueryInputParameters
	/// Description for CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dd524b21-7c58-4b30-a106-e95afb35289d")]
	public partial class QueryDefinitionHasQueryInputParameters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryDefinitionHasQueryInputParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdd524b21, 0x7c58, 0x4b30, 0xa1, 0x06, 0xe9, 0x5a, 0xfb, 0x35, 0x28, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryDefinitionHasQueryInputParameters link in the same Partition as the given QueryDefinition
		/// </summary>
		/// <param name="source">QueryDefinition to use as the source of the relationship.</param>
		/// <param name="target">QueryInputParameter to use as the target of the relationship.</param>
		public QueryDefinitionHasQueryInputParameters(QueryDefinition source, QueryInputParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionHasQueryInputParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionHasQueryInputParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionHasQueryInputParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionHasQueryInputParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region QueryDefinition domain role code
		
		/// <summary>
		/// QueryDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryDefinitionDomainRoleId = new global::System.Guid(0xed43ead9, 0x02d3, 0x46f3, 0x96, 0x87, 0x67, 0xb2, 0x73, 0x8d, 0x77, 0xea);
		
		/// <summary>
		/// DomainRole QueryDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/QueryDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/QueryDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "QueryInputParameters", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/QueryDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("ed43ead9-02d3-46f3-9687-67b2738d77ea")]
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryDefinition of a QueryInputParameter
		/// <summary>
		/// Gets QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static QueryDefinition GetQueryDefinition(QueryInputParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, QueryInputParameterDomainRoleId) as QueryDefinition;
		}
		
		/// <summary>
		/// Sets QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetQueryDefinition(QueryInputParameter element, QueryDefinition newQueryDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, QueryInputParameterDomainRoleId, newQueryDefinition);
		}
		#endregion
		#region QueryInputParameter domain role code
		
		/// <summary>
		/// QueryInputParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryInputParameterDomainRoleId = new global::System.Guid(0x466014d9, 0xb275, 0x4287, 0xb1, 0x36, 0x7e, 0x85, 0xba, 0xea, 0x50, 0x84);
		
		/// <summary>
		/// DomainRole QueryInputParameter
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/QueryInputParameter.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/QueryInputParameter.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "QueryDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/QueryInputParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("466014d9-b275-4287-b136-7e85baea5084")]
		public virtual QueryInputParameter QueryInputParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryInputParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryInputParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryInputParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryInputParameters of a QueryDefinition
		/// <summary>
		/// Gets a list of QueryInputParameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryInputParameter> GetQueryInputParameters(QueryDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<QueryInputParameter>, QueryInputParameter>(element, QueryDefinitionDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc28f5af0, 0xc251, 0x4229, 0x84, 0x21, 0xbd, 0xca, 0x22, 0xbf, 0xcd, 0x3e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the link between a query definition and its parameters
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c28f5af0-c251-4229-8421-bdca22bfcd3e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinitionHasQueryInputParameters.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinitionHasQueryInputParameters, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinitionHasQueryInputParameters.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinitionHasQueryInputParameters.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryDefinitionHasQueryInputParameters element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinitionHasQueryInputParameters element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region QueryDefinition link accessor
		/// <summary>
		/// Get the list of QueryDefinitionHasQueryInputParameters links to a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters> GetLinksToQueryInputParameters ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition queryDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters>(queryDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId);
		}
		#endregion
		#region QueryInputParameter link accessor
		/// <summary>
		/// Get the QueryDefinitionHasQueryInputParameters link to a QueryInputParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters GetLinkToQueryDefinition (global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter queryInputParameterInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters>(queryInputParameterInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of QueryInputParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region QueryDefinitionHasQueryInputParameters instance accessors
		
		/// <summary>
		/// Get any QueryDefinitionHasQueryInputParameters links between a given QueryDefinition and a QueryInputParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters link in links )
			{
				if ( target.Equals(link.QueryInputParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryDefinitionHasQueryInputParameters link between a given QueryDefinitionand a QueryInputParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters GetLink( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters link in links )
			{
				if ( target.Equals(link.QueryInputParameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship ProjectionDefinitionHandlesEventDefinitions
	/// Link to show that a projection handles the given named event
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("60025a34-777a-44f2-af11-bfcf9126a4a4")]
	public partial class ProjectionDefinitionHandlesEventDefinitions : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProjectionDefinitionHandlesEventDefinitions domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x60025a34, 0x777a, 0x44f2, 0xaf, 0x11, 0xbf, 0xcf, 0x91, 0x26, 0xa4, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProjectionDefinitionHandlesEventDefinitions link in the same Partition as the given ProjectionDefinition
		/// </summary>
		/// <param name="source">ProjectionDefinition to use as the source of the relationship.</param>
		/// <param name="target">EventDefinition to use as the target of the relationship.</param>
		public ProjectionDefinitionHandlesEventDefinitions(ProjectionDefinition source, EventDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(ProjectionDefinitionHandlesEventDefinitions.EventDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProjectionDefinitionHandlesEventDefinitions(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProjectionDefinitionHandlesEventDefinitions(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProjectionDefinitionHandlesEventDefinitions(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProjectionDefinitionHandlesEventDefinitions(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProjectionDefinition domain role code
		
		/// <summary>
		/// ProjectionDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDefinitionDomainRoleId = new global::System.Guid(0x7b7d9bbc, 0x5141, 0x4619, 0xbd, 0x30, 0x7b, 0x88, 0x2e, 0x63, 0x40, 0x25);
		
		/// <summary>
		/// DomainRole ProjectionDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/ProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/ProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EventDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/ProjectionDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7b7d9bbc-5141-4619-bd30-7b882e634025")]
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionDefinitions of a EventDefinition
		/// <summary>
		/// Gets a list of ProjectionDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProjectionDefinition> GetProjectionDefinitions(EventDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionDefinition>, ProjectionDefinition>(element, EventDefinitionDomainRoleId);
		}
		#endregion
		#region EventDefinition domain role code
		
		/// <summary>
		/// EventDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDefinitionDomainRoleId = new global::System.Guid(0x546e31e8, 0x08d8, 0x4d32, 0x92, 0x0c, 0x64, 0xb5, 0x9a, 0x45, 0x9a, 0x12);
		
		/// <summary>
		/// DomainRole EventDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.EventDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/EventDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/EventDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProjectionDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/EventDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("546e31e8-08d8-4d32-920c-64b59a459a12")]
		public virtual EventDefinition EventDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EventDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EventDefinitions of a ProjectionDefinition
		/// <summary>
		/// Gets a list of EventDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EventDefinition> GetEventDefinitions(ProjectionDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EventDefinition>, EventDefinition>(element, ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x539dfade, 0x4006, 0x4584, 0x9c, 0x67, 0x26, 0xf3, 0x1b, 0x0a, 0x64, 0x67);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the link between the projection and the events it handles
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("539dfade-4006-4584-9c67-26f31b0a6467")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinitionHandlesEventDefinitions.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinitionHandlesEventDefinitions, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinitionHandlesEventDefinitions.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinitionHandlesEventDefinitions.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinitionHandlesEventDefinitions element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinitionHandlesEventDefinitions element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectionDefinition link accessor
		/// <summary>
		/// Get the list of ProjectionDefinitionHandlesEventDefinitions links to a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions> GetLinksToEventDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition projectionDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions>(projectionDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region EventDefinition link accessor
		/// <summary>
		/// Get the list of ProjectionDefinitionHandlesEventDefinitions links to a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions> GetLinksToProjectionDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.EventDefinition eventDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions>(eventDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.EventDefinitionDomainRoleId);
		}
		#endregion
		#region ProjectionDefinitionHandlesEventDefinitions instance accessors
		
		/// <summary>
		/// Get any ProjectionDefinitionHandlesEventDefinitions links between a given ProjectionDefinition and a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions link in links )
			{
				if ( target.Equals(link.EventDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProjectionDefinitionHandlesEventDefinitions link between a given ProjectionDefinitionand a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions GetLink( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions>(source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions link in links )
			{
				if ( target.Equals(link.EventDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainRelationship ProjectionDefinitionHasEventPropertyOperations
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e57baa58-91fd-4bc1-a993-eabe9e841b29")]
	public abstract partial class ProjectionDefinitionHasEventPropertyOperationsBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProjectionDefinitionHasEventPropertyOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe57baa58, 0x91fd, 0x4bc1, 0xa9, 0x93, 0xea, 0xbe, 0x9e, 0x84, 0x1b, 0x29);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected ProjectionDefinitionHasEventPropertyOperationsBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ProjectionDefinition domain role code
		
		/// <summary>
		/// ProjectionDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDefinitionDomainRoleId = new global::System.Guid(0x3d5a2934, 0x3d1e, 0x44bc, 0xa5, 0x9c, 0x3f, 0x28, 0x9d, 0x76, 0xcb, 0xaf);
		
		/// <summary>
		/// DomainRole ProjectionDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/ProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/ProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionEventPropertyOperations", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/ProjectionDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3d5a2934-3d1e-44bc-a59c-3f289d76cbaf")]
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionDefinition of a ProjectionEventPropertyOperation
		/// <summary>
		/// Gets ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ProjectionDefinition GetProjectionDefinition(ProjectionEventPropertyOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProjectionEventPropertyOperationDomainRoleId) as ProjectionDefinition;
		}
		
		/// <summary>
		/// Sets ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectionDefinition(ProjectionEventPropertyOperation element, ProjectionDefinition newProjectionDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProjectionEventPropertyOperationDomainRoleId, newProjectionDefinition);
		}
		#endregion
		#region ProjectionEventPropertyOperation domain role code
		
		/// <summary>
		/// ProjectionEventPropertyOperation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionEventPropertyOperationDomainRoleId = new global::System.Guid(0x24013117, 0x68da, 0x482c, 0x96, 0x8b, 0xf8, 0xcb, 0x72, 0x02, 0x2f, 0xf7);
		
		/// <summary>
		/// DomainRole ProjectionEventPropertyOperation
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/ProjectionEventPropertyOperation.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/ProjectionEventPropertyOperation.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ProjectionDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/ProjectionEventPropertyOperation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("24013117-68da-482c-968b-f8cb72022ff7")]
		public virtual ProjectionEventPropertyOperation ProjectionEventPropertyOperation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionEventPropertyOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionEventPropertyOperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionEventPropertyOperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionEventPropertyOperations of a ProjectionDefinition
		/// <summary>
		/// Gets a list of ProjectionEventPropertyOperations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProjectionEventPropertyOperation> GetProjectionEventPropertyOperations(ProjectionDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionEventPropertyOperation>, ProjectionEventPropertyOperation>(element, ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x78178afe, 0x2067, 0x4fc4, 0xab, 0x3a, 0x2a, 0x7d, 0x67, 0xce, 0xff, 0x64);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the connection between the projection and its event property
		/// operations
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("78178afe-2067-4fc4-ab3a-2a7d67ceff64")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinitionHasEventPropertyOperations.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinitionHasEventPropertyOperationsBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinitionHasEventPropertyOperations.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinitionHasEventPropertyOperations.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinitionHasEventPropertyOperationsBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinitionHasEventPropertyOperationsBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectionDefinition link accessor
		/// <summary>
		/// Get the list of ProjectionDefinitionHasEventPropertyOperations links to a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations> GetLinksToProjectionEventPropertyOperations ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition projectionDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations>(projectionDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region ProjectionEventPropertyOperation link accessor
		/// <summary>
		/// Get the ProjectionDefinitionHasEventPropertyOperations link to a ProjectionEventPropertyOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations GetLinkToProjectionDefinition (global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation projectionEventPropertyOperationInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations>(projectionEventPropertyOperationInstance, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProjectionEventPropertyOperation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProjectionDefinitionHasEventPropertyOperations instance accessors
		
		/// <summary>
		/// Get any ProjectionDefinitionHasEventPropertyOperations links between a given ProjectionDefinition and a ProjectionEventPropertyOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations>(source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations link in links )
			{
				if ( target.Equals(link.ProjectionEventPropertyOperation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProjectionDefinitionHasEventPropertyOperations link between a given ProjectionDefinitionand a ProjectionEventPropertyOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations GetLink( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations>(source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations link in links )
			{
				if ( target.Equals(link.ProjectionEventPropertyOperation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
	/// <summary>
	/// DomainRelationship ProjectionDefinitionHasEventPropertyOperations
	/// The operations performed on the projection's properties when an event is handled
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class ProjectionDefinitionHasEventPropertyOperations : ProjectionDefinitionHasEventPropertyOperationsBase
	{
		#region Constructors
				
		/// <summary>
		/// Constructor
		/// Creates a ProjectionDefinitionHasEventPropertyOperations link in the same Partition as the given ProjectionDefinition
		/// </summary>
		/// <param name="source">ProjectionDefinition to use as the source of the relationship.</param>
		/// <param name="target">ProjectionEventPropertyOperation to use as the target of the relationship.</param>
		public ProjectionDefinitionHasEventPropertyOperations(ProjectionDefinition source, ProjectionEventPropertyOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProjectionDefinitionHasEventPropertyOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProjectionDefinitionHasEventPropertyOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProjectionDefinitionHasEventPropertyOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProjectionDefinitionHasEventPropertyOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship QueryDefinitionHasQueryReturnParameters
	/// Description for CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2d8626d1-f266-49e5-a515-4bf8a6a4b1e0")]
	public partial class QueryDefinitionHasQueryReturnParameters : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryDefinitionHasQueryReturnParameters domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2d8626d1, 0xf266, 0x49e5, 0xa5, 0x15, 0x4b, 0xf8, 0xa6, 0xa4, 0xb1, 0xe0);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryDefinitionHasQueryReturnParameters link in the same Partition as the given QueryDefinition
		/// </summary>
		/// <param name="source">QueryDefinition to use as the source of the relationship.</param>
		/// <param name="target">QueryReturnParameter to use as the target of the relationship.</param>
		public QueryDefinitionHasQueryReturnParameters(QueryDefinition source, QueryReturnParameter target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionHasQueryReturnParameters(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionHasQueryReturnParameters(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionHasQueryReturnParameters(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionHasQueryReturnParameters(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region QueryDefinition domain role code
		
		/// <summary>
		/// QueryDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryDefinitionDomainRoleId = new global::System.Guid(0xbb05587e, 0x0204, 0x484e, 0xb7, 0x26, 0x0b, 0x03, 0xa7, 0x94, 0x3c, 0x34);
		
		/// <summary>
		/// DomainRole QueryDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/QueryDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/QueryDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "QueryReturnParameters", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/QueryDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb05587e-0204-484e-b726-0b03a7943c34")]
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryDefinition of a QueryReturnParameter
		/// <summary>
		/// Gets QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static QueryDefinition GetQueryDefinition(QueryReturnParameter element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, QueryReturnParameterDomainRoleId) as QueryDefinition;
		}
		
		/// <summary>
		/// Sets QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetQueryDefinition(QueryReturnParameter element, QueryDefinition newQueryDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, QueryReturnParameterDomainRoleId, newQueryDefinition);
		}
		#endregion
		#region QueryReturnParameter domain role code
		
		/// <summary>
		/// QueryReturnParameter domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryReturnParameterDomainRoleId = new global::System.Guid(0xbd42eddf, 0x2db8, 0x4269, 0x9f, 0xd0, 0x67, 0x09, 0x15, 0xb6, 0xcc, 0x67);
		
		/// <summary>
		/// DomainRole QueryReturnParameter
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/QueryReturnParameter.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/QueryReturnParameter.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "QueryDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/QueryReturnParameter.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bd42eddf-2db8-4269-9fd0-670915b6cc67")]
		public virtual QueryReturnParameter QueryReturnParameter
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryReturnParameter)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryReturnParameterDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryReturnParameterDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryReturnParameters of a QueryDefinition
		/// <summary>
		/// Gets a list of QueryReturnParameters.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryReturnParameter> GetQueryReturnParameters(QueryDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<QueryReturnParameter>, QueryReturnParameter>(element, QueryDefinitionDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5bf3bcc4, 0x0066, 0x41a5, 0xa1, 0x3b, 0xb2, 0x51, 0x35, 0x22, 0xe2, 0x62);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the link between a query definition and its return parameters
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("5bf3bcc4-0066-41a5-a13b-b2513522e262")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinitionHasQueryReturnParameters.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinitionHasQueryReturnParameters, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinitionHasQueryReturnParameters.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinitionHasQueryReturnParameters.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryDefinitionHasQueryReturnParameters element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinitionHasQueryReturnParameters element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region QueryDefinition link accessor
		/// <summary>
		/// Get the list of QueryDefinitionHasQueryReturnParameters links to a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters> GetLinksToQueryReturnParameters ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition queryDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters>(queryDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId);
		}
		#endregion
		#region QueryReturnParameter link accessor
		/// <summary>
		/// Get the QueryDefinitionHasQueryReturnParameters link to a QueryReturnParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters GetLinkToQueryDefinition (global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter queryReturnParameterInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters>(queryReturnParameterInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of QueryReturnParameter not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region QueryDefinitionHasQueryReturnParameters instance accessors
		
		/// <summary>
		/// Get any QueryDefinitionHasQueryReturnParameters links between a given QueryDefinition and a QueryReturnParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters link in links )
			{
				if ( target.Equals(link.QueryReturnParameter) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryDefinitionHasQueryReturnParameters link between a given QueryDefinitionand a QueryReturnParameter.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters GetLink( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters link in links )
			{
				if ( target.Equals(link.QueryReturnParameter) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship CQRSModelHasModelSet
	/// Additional setting that controsl how the model is truend into code or
	/// documentation
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2a88a228-fa99-41c6-8bb8-fb443b96ce5e")]
	public partial class CQRSModelHasModelSet : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CQRSModelHasModelSet domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2a88a228, 0xfa99, 0x41c6, 0x8b, 0xb8, 0xfb, 0x44, 0x3b, 0x96, 0xce, 0x5e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CQRSModelHasModelSet link in the same Partition as the given CQRSModel
		/// </summary>
		/// <param name="source">CQRSModel to use as the source of the relationship.</param>
		/// <param name="target">ModelSetting to use as the target of the relationship.</param>
		public CQRSModelHasModelSet(CQRSModel source, ModelSetting target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CQRSModelHasModelSet.CQRSModelDomainRoleId, source), new DslModeling::RoleAssignment(CQRSModelHasModelSet.ModelSettingDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CQRSModelHasModelSet(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CQRSModelHasModelSet(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CQRSModelHasModelSet(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CQRSModelHasModelSet(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CQRSModel domain role code
		
		/// <summary>
		/// CQRSModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid CQRSModelDomainRoleId = new global::System.Guid(0xb7cc451c, 0x4223, 0x43ac, 0x8f, 0xfd, 0x68, 0x4c, 0xd0, 0x57, 0x1b, 0xb2);
		
		/// <summary>
		/// DomainRole CQRSModel
		/// Description for CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.CQRSModel
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet/CQRSModel.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet/CQRSModel.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ModelSet", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet/CQRSModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("b7cc451c-4223-43ac-8ffd-684cd0571bb2")]
		public virtual CQRSModel CQRSModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CQRSModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, CQRSModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CQRSModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CQRSModel of a ModelSetting
		/// <summary>
		/// Gets CQRSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static CQRSModel GetCQRSModel(ModelSetting element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ModelSettingDomainRoleId) as CQRSModel;
		}
		
		/// <summary>
		/// Sets CQRSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetCQRSModel(ModelSetting element, CQRSModel newCQRSModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ModelSettingDomainRoleId, newCQRSModel);
		}
		#endregion
		#region ModelSetting domain role code
		
		/// <summary>
		/// ModelSetting domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelSettingDomainRoleId = new global::System.Guid(0x685143c1, 0x54fd, 0x4a30, 0x88, 0xdc, 0xd8, 0x25, 0xc4, 0xe5, 0x35, 0x33);
		
		/// <summary>
		/// DomainRole ModelSetting
		/// Description for CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.ModelSetting
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet/ModelSetting.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet/ModelSetting.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CQRSModel", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet/ModelSetting.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("685143c1-54fd-4a30-88dc-d825c4e53533")]
		public virtual ModelSetting ModelSetting
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelSetting)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelSettingDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelSettingDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelSet of a CQRSModel
		/// <summary>
		/// Gets a list of ModelSet.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelSetting> GetModelSet(CQRSModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ModelSetting>, ModelSetting>(element, CQRSModelDomainRoleId);
		}
		#endregion
		#region CQRSModel link accessor
		/// <summary>
		/// Get the list of CQRSModelHasModelSet links to a CQRSModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet> GetLinksToModelSet ( global::CQRSAzure.CQRSdsl.Dsl.CQRSModel cQRSModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet>(cQRSModelInstance, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.CQRSModelDomainRoleId);
		}
		#endregion
		#region ModelSetting link accessor
		/// <summary>
		/// Get the CQRSModelHasModelSet link to a ModelSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet GetLinkToCQRSModel (global::CQRSAzure.CQRSdsl.Dsl.ModelSetting modelSettingInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet>(modelSettingInstance, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.ModelSettingDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ModelSetting not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region CQRSModelHasModelSet instance accessors
		
		/// <summary>
		/// Get any CQRSModelHasModelSet links between a given CQRSModel and a ModelSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.CQRSModel source, global::CQRSAzure.CQRSdsl.Dsl.ModelSetting target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet>(source, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.CQRSModelDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet link in links )
			{
				if ( target.Equals(link.ModelSetting) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CQRSModelHasModelSet link between a given CQRSModeland a ModelSetting.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet GetLink( global::CQRSAzure.CQRSdsl.Dsl.CQRSModel source, global::CQRSAzure.CQRSdsl.Dsl.ModelSetting target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet>(source, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.CQRSModelDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet link in links )
			{
				if ( target.Equals(link.ModelSetting) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship QueryDefinitionReferencesIdentityGroup
	/// The identity reference group to use to run this query against a set of aggregate
	/// identifiers
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c43057ea-90f5-4c21-a802-5d9bf98cedff")]
	public partial class QueryDefinitionReferencesIdentityGroup : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryDefinitionReferencesIdentityGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc43057ea, 0x90f5, 0x4c21, 0xa8, 0x02, 0x5d, 0x9b, 0xf9, 0x8c, 0xed, 0xff);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryDefinitionReferencesIdentityGroup link in the same Partition as the given QueryDefinition
		/// </summary>
		/// <param name="source">QueryDefinition to use as the source of the relationship.</param>
		/// <param name="target">IdentityGroup to use as the target of the relationship.</param>
		public QueryDefinitionReferencesIdentityGroup(QueryDefinition source, IdentityGroup target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(QueryDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionReferencesIdentityGroup(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionReferencesIdentityGroup(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionReferencesIdentityGroup(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionReferencesIdentityGroup(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region QueryDefinition domain role code
		
		/// <summary>
		/// QueryDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryDefinitionDomainRoleId = new global::System.Guid(0x551bda20, 0xafe0, 0x4f4e, 0x92, 0x00, 0xa2, 0xbe, 0xd0, 0xdd, 0x0c, 0xac);
		
		/// <summary>
		/// DomainRole QueryDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup/QueryDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup/QueryDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IdentityGroup", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup/QueryDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("551bda20-afe0-4f4e-9200-a2bed0dd0cac")]
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryDefinitions of a IdentityGroup
		/// <summary>
		/// Gets a list of QueryDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryDefinition> GetQueryDefinitions(IdentityGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<QueryDefinition>, QueryDefinition>(element, IdentityGroupDomainRoleId);
		}
		#endregion
		#region IdentityGroup domain role code
		
		/// <summary>
		/// IdentityGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid IdentityGroupDomainRoleId = new global::System.Guid(0xf11c2a82, 0x1c3f, 0x4ef9, 0x94, 0x4b, 0x9c, 0x44, 0x18, 0xb9, 0x0d, 0xb1);
		
		/// <summary>
		/// DomainRole IdentityGroup
		/// The identity group referenced by this query definition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup/IdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup/IdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "QueryDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup/IdentityGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f11c2a82-1c3f-4ef9-944b-9c4418b90db1")]
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IdentityGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, IdentityGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IdentityGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IdentityGroup of a QueryDefinition
		/// <summary>
		/// Gets IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IdentityGroup GetIdentityGroup(QueryDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, QueryDefinitionDomainRoleId) as IdentityGroup;
		}
		
		/// <summary>
		/// Sets IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIdentityGroup(QueryDefinition element, IdentityGroup newIdentityGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, QueryDefinitionDomainRoleId, newIdentityGroup);
		}
		#endregion
		#region QueryDefinition link accessor
		/// <summary>
		/// Get the QueryDefinitionReferencesIdentityGroup link to a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup GetLinkToIdentityGroup (global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition queryDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup>(queryDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of QueryDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IdentityGroup link accessor
		/// <summary>
		/// Get the list of QueryDefinitionReferencesIdentityGroup links to a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup> GetLinksToQueryDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup identityGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup>(identityGroupInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId);
		}
		#endregion
		#region QueryDefinitionReferencesIdentityGroup instance accessors
		
		/// <summary>
		/// Get any QueryDefinitionReferencesIdentityGroup links between a given QueryDefinition and a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup link in links )
			{
				if ( target.Equals(link.IdentityGroup) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryDefinitionReferencesIdentityGroup link between a given QueryDefinitionand a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup GetLink( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup link in links )
			{
				if ( target.Equals(link.IdentityGroup) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierHasIdentityGrouped
	/// Description for CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("54070090-e75a-4fe5-b237-02bd51ca3089")]
	public partial class AggregateIdentifierHasIdentityGrouped : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierHasIdentityGrouped domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x54070090, 0xe75a, 0x4fe5, 0xb2, 0x37, 0x02, 0xbd, 0x51, 0xca, 0x30, 0x89);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierHasIdentityGrouped link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">IdentityGroup to use as the target of the relationship.</param>
		public AggregateIdentifierHasIdentityGrouped(AggregateIdentifier source, IdentityGroup target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasIdentityGrouped(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasIdentityGrouped(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasIdentityGrouped(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasIdentityGrouped(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0xf489c4fe, 0x4858, 0x4ace, 0xae, 0x94, 0x07, 0xd3, 0xb8, 0x12, 0x5e, 0x10);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IdentityGrouped", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/AggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f489c4fe-4858-4ace-ae94-07d3b8125e10")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifier of a IdentityGroup
		/// <summary>
		/// Gets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateIdentifier GetAggregateIdentifier(IdentityGroup element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IdentityGroupDomainRoleId) as AggregateIdentifier;
		}
		
		/// <summary>
		/// Sets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateIdentifier(IdentityGroup element, AggregateIdentifier newAggregateIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IdentityGroupDomainRoleId, newAggregateIdentifier);
		}
		#endregion
		#region IdentityGroup domain role code
		
		/// <summary>
		/// IdentityGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid IdentityGroupDomainRoleId = new global::System.Guid(0xa9d5b1cd, 0x2477, 0x490e, 0xae, 0x92, 0x6d, 0x76, 0x4e, 0x9d, 0xff, 0x64);
		
		/// <summary>
		/// DomainRole IdentityGroup
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroup
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/IdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/IdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateIdentifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/IdentityGroup.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("a9d5b1cd-2477-490e-ae92-6d764e9dff64")]
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IdentityGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, IdentityGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IdentityGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IdentityGrouped of a AggregateIdentifier
		/// <summary>
		/// Gets a list of IdentityGrouped.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<IdentityGroup> GetIdentityGrouped(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<IdentityGroup>, IdentityGroup>(element, AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x6e3007ab, 0x4939, 0x4e5d, 0xa0, 0xab, 0xdd, 0xe2, 0x85, 0x3e, 0x6a, 0xbb);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the conenction between an aggregate and identity group
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("6e3007ab-4939-4e5d-a0ab-dde2853e6abb")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierHasIdentityGrouped.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierHasIdentityGrouped, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierHasIdentityGrouped.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierHasIdentityGrouped.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierHasIdentityGrouped element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierHasIdentityGrouped element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierHasIdentityGrouped links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped> GetLinksToIdentityGrouped ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region IdentityGroup link accessor
		/// <summary>
		/// Get the AggregateIdentifierHasIdentityGrouped link to a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped GetLinkToAggregateIdentifier (global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup identityGroupInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped>(identityGroupInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IdentityGroup not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateIdentifierHasIdentityGrouped instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierHasIdentityGrouped links between a given AggregateIdentifier and a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped link in links )
			{
				if ( target.Equals(link.IdentityGroup) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierHasIdentityGrouped link between a given AggregateIdentifierand a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped link in links )
			{
				if ( target.Equals(link.IdentityGroup) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship AggregateIdentifierHasClassifiers
	/// Description for CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3451bf45-5f57-4be0-aeeb-8c431da8f175")]
	public partial class AggregateIdentifierHasClassifiers : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AggregateIdentifierHasClassifiers domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3451bf45, 0x5f57, 0x4be0, 0xae, 0xeb, 0x8c, 0x43, 0x1d, 0xa8, 0xf1, 0x75);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AggregateIdentifierHasClassifiers link in the same Partition as the given AggregateIdentifier
		/// </summary>
		/// <param name="source">AggregateIdentifier to use as the source of the relationship.</param>
		/// <param name="target">Classifier to use as the target of the relationship.</param>
		public AggregateIdentifierHasClassifiers(AggregateIdentifier source, Classifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId, source), new DslModeling::RoleAssignment(AggregateIdentifierHasClassifiers.ClassifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasClassifiers(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasClassifiers(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AggregateIdentifierHasClassifiers(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AggregateIdentifierHasClassifiers(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregateIdentifier domain role code
		
		/// <summary>
		/// AggregateIdentifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregateIdentifierDomainRoleId = new global::System.Guid(0x47842c1f, 0x9515, 0x4761, 0xb1, 0x64, 0x5c, 0x58, 0x21, 0xe8, 0xbf, 0xac);
		
		/// <summary>
		/// DomainRole AggregateIdentifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classifiers", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/AggregateIdentifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("47842c1f-9515-4761-b164-5c5821e8bfac")]
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (AggregateIdentifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregateIdentifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregateIdentifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregateIdentifier of a Classifier
		/// <summary>
		/// Gets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static AggregateIdentifier GetAggregateIdentifier(Classifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassifierDomainRoleId) as AggregateIdentifier;
		}
		
		/// <summary>
		/// Sets AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAggregateIdentifier(Classifier element, AggregateIdentifier newAggregateIdentifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassifierDomainRoleId, newAggregateIdentifier);
		}
		#endregion
		#region Classifier domain role code
		
		/// <summary>
		/// Classifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassifierDomainRoleId = new global::System.Guid(0xbfad1fc4, 0xb0d8, 0x4d6d, 0xad, 0xc9, 0x76, 0xef, 0x94, 0x8e, 0xd5, 0x28);
		
		/// <summary>
		/// DomainRole Classifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.Classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/Classifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/Classifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregateIdentifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/Classifier.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("bfad1fc4-b0d8-4d6d-adc9-76ef948ed528")]
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Classifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classifiers of a AggregateIdentifier
		/// <summary>
		/// Gets a list of Classifiers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Classifier> GetClassifiers(AggregateIdentifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Classifier>, Classifier>(element, AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf1ad9902, 0x64ba, 0x42ca, 0x9b, 0x49, 0xae, 0x01, 0x29, 0xd9, 0x36, 0x04);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the connection between an aggregate and its classifiers
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f1ad9902-64ba-42ca-9b49-ae0129d93604")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifierHasClassifiers.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifierHasClassifiers, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifierHasClassifiers.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifierHasClassifiers.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifierHasClassifiers element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifierHasClassifiers element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier link accessor
		/// <summary>
		/// Get the list of AggregateIdentifierHasClassifiers links to a AggregateIdentifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers> GetLinksToClassifiers ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier aggregateIdentifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers>(aggregateIdentifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId);
		}
		#endregion
		#region Classifier link accessor
		/// <summary>
		/// Get the AggregateIdentifierHasClassifiers link to a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers GetLinkToAggregateIdentifier (global::CQRSAzure.CQRSdsl.Dsl.Classifier classifierInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers>(classifierInstance, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.ClassifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Classifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AggregateIdentifierHasClassifiers instance accessors
		
		/// <summary>
		/// Get any AggregateIdentifierHasClassifiers links between a given AggregateIdentifier and a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.Classifier target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers link in links )
			{
				if ( target.Equals(link.Classifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AggregateIdentifierHasClassifiers link between a given AggregateIdentifierand a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers GetLink( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier source, global::CQRSAzure.CQRSdsl.Dsl.Classifier target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers>(source, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers link in links )
			{
				if ( target.Equals(link.Classifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship IdentityGroupReferencesClassifier
	/// The classifier class that creates the membership of an identity group
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("fa8f6c71-9982-4767-b894-211219e18044")]
	public partial class IdentityGroupReferencesClassifier : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// IdentityGroupReferencesClassifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfa8f6c71, 0x9982, 0x4767, 0xb8, 0x94, 0x21, 0x12, 0x19, 0xe1, 0x80, 0x44);
	
				
		/// <summary>
		/// Constructor
		/// Creates a IdentityGroupReferencesClassifier link in the same Partition as the given IdentityGroup
		/// </summary>
		/// <param name="source">IdentityGroup to use as the source of the relationship.</param>
		/// <param name="target">Classifier to use as the target of the relationship.</param>
		public IdentityGroupReferencesClassifier(IdentityGroup source, Classifier target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId, source), new DslModeling::RoleAssignment(IdentityGroupReferencesClassifier.ClassifierDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IdentityGroupReferencesClassifier(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IdentityGroupReferencesClassifier(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public IdentityGroupReferencesClassifier(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public IdentityGroupReferencesClassifier(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region IdentityGroup domain role code
		
		/// <summary>
		/// IdentityGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid IdentityGroupDomainRoleId = new global::System.Guid(0x0cc9a7fb, 0x5bdf, 0x40a0, 0x9d, 0x1c, 0xdd, 0x30, 0xbf, 0xca, 0x0c, 0xd5);
		
		/// <summary>
		/// DomainRole IdentityGroup
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroup
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/IdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/IdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Classifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/IdentityGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("0cc9a7fb-5bdf-40a0-9d1c-dd30bfca0cd5")]
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IdentityGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, IdentityGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IdentityGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IdentityGroup of a Classifier
		/// <summary>
		/// Gets IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IdentityGroup GetIdentityGroup(Classifier element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassifierDomainRoleId) as IdentityGroup;
		}
		
		/// <summary>
		/// Sets IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIdentityGroup(Classifier element, IdentityGroup newIdentityGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassifierDomainRoleId, newIdentityGroup);
		}
		#endregion
		#region Classifier domain role code
		
		/// <summary>
		/// Classifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassifierDomainRoleId = new global::System.Guid(0x084b7e27, 0xab06, 0x44b5, 0x9d, 0xff, 0x08, 0x49, 0x92, 0xce, 0x2a, 0xc0);
		
		/// <summary>
		/// DomainRole Classifier
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.Classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/Classifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/Classifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "IdentityGroup", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/Classifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("084b7e27-ab06-44b5-9dff-084992ce2ac0")]
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Classifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classifier of a IdentityGroup
		/// <summary>
		/// Gets Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Classifier GetClassifier(IdentityGroup element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, IdentityGroupDomainRoleId) as Classifier;
		}
		
		/// <summary>
		/// Sets Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClassifier(IdentityGroup element, Classifier newClassifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, IdentityGroupDomainRoleId, newClassifier);
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3b804a9b, 0xc201, 0x43ff, 0x87, 0x4a, 0x41, 0x89, 0xa1, 0x72, 0x00, 0xbf);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.Name
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3b804a9b-c201-43ff-874a-4189a17200bf")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroupReferencesClassifier.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroupReferencesClassifier, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroupReferencesClassifier.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroupReferencesClassifier.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IdentityGroupReferencesClassifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroupReferencesClassifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IdentityGroup link accessor
		/// <summary>
		/// Get the IdentityGroupReferencesClassifier link to a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier GetLinkToClassifier (global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup identityGroupInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier>(identityGroupInstance, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of IdentityGroup not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Classifier link accessor
		/// <summary>
		/// Get the IdentityGroupReferencesClassifier link to a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier GetLinkToIdentityGroup (global::CQRSAzure.CQRSdsl.Dsl.Classifier classifierInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier>(classifierInstance, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.ClassifierDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Classifier not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IdentityGroupReferencesClassifier instance accessors
		
		/// <summary>
		/// Get any IdentityGroupReferencesClassifier links between a given IdentityGroup and a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup source, global::CQRSAzure.CQRSdsl.Dsl.Classifier target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier>(source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier link in links )
			{
				if ( target.Equals(link.Classifier) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one IdentityGroupReferencesClassifier link between a given IdentityGroupand a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier GetLink( global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup source, global::CQRSAzure.CQRSdsl.Dsl.Classifier target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier>(source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier link in links )
			{
				if ( target.Equals(link.Classifier) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship ClassifierHandlesEvents
	/// The events that are processed by the classifier when deciding if an identifier
	/// is in our out of the group
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("c25a88db-73f9-492f-ba88-2cb559e4a080")]
	public partial class ClassifierHandlesEvents : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassifierHandlesEvents domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc25a88db, 0x73f9, 0x492f, 0xba, 0x88, 0x2c, 0xb5, 0x59, 0xe4, 0xa0, 0x80);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassifierHandlesEvents link in the same Partition as the given Classifier
		/// </summary>
		/// <param name="source">Classifier to use as the source of the relationship.</param>
		/// <param name="target">EventDefinition to use as the target of the relationship.</param>
		public ClassifierHandlesEvents(Classifier source, EventDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassifierHandlesEvents.ClassifierDomainRoleId, source), new DslModeling::RoleAssignment(ClassifierHandlesEvents.EventDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassifierHandlesEvents(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassifierHandlesEvents(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassifierHandlesEvents(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassifierHandlesEvents(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Classifier domain role code
		
		/// <summary>
		/// Classifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassifierDomainRoleId = new global::System.Guid(0x546a6882, 0x20f1, 0x4b39, 0x92, 0x05, 0x69, 0x35, 0x5c, 0x6f, 0x3e, 0x9a);
		
		/// <summary>
		/// DomainRole Classifier
		/// Description for CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.Classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents/Classifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents/Classifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "EventDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents/Classifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("546a6882-20f1-4b39-9205-69355c6f3e9a")]
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Classifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classifiers of a EventDefinition
		/// <summary>
		/// Gets a list of Classifiers.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Classifier> GetClassifiers(EventDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Classifier>, Classifier>(element, EventDefinitionDomainRoleId);
		}
		#endregion
		#region EventDefinition domain role code
		
		/// <summary>
		/// EventDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventDefinitionDomainRoleId = new global::System.Guid(0x1cdd86b8, 0x4a06, 0x4213, 0x9f, 0x59, 0xf3, 0x85, 0xd3, 0x2c, 0xf3, 0x4b);
		
		/// <summary>
		/// DomainRole EventDefinition
		/// Description for CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.EventDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents/EventDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents/EventDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Classifiers", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents/EventDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1cdd86b8-4a06-4213-9f59-f385d32cf34b")]
		public virtual EventDefinition EventDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (EventDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access EventDefinitions of a Classifier
		/// <summary>
		/// Gets a list of EventDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<EventDefinition> GetEventDefinitions(Classifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<EventDefinition>, EventDefinition>(element, ClassifierDomainRoleId);
		}
		#endregion
		#region Classifier link accessor
		/// <summary>
		/// Get the list of ClassifierHandlesEvents links to a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents> GetLinksToEventDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.Classifier classifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents>(classifierInstance, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.ClassifierDomainRoleId);
		}
		#endregion
		#region EventDefinition link accessor
		/// <summary>
		/// Get the list of ClassifierHandlesEvents links to a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents> GetLinksToClassifiers ( global::CQRSAzure.CQRSdsl.Dsl.EventDefinition eventDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents>(eventDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.EventDefinitionDomainRoleId);
		}
		#endregion
		#region ClassifierHandlesEvents instance accessors
		
		/// <summary>
		/// Get any ClassifierHandlesEvents links between a given Classifier and a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.Classifier source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents>(source, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.ClassifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents link in links )
			{
				if ( target.Equals(link.EventDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassifierHandlesEvents link between a given Classifierand a EventDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents GetLink( global::CQRSAzure.CQRSdsl.Dsl.Classifier source, global::CQRSAzure.CQRSdsl.Dsl.EventDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents>(source, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.ClassifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents link in links )
			{
				if ( target.Equals(link.EventDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship ClassifierHasEventEvaluations
	/// The evaluations to be performed by the classifier
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("9bf453e0-7df3-4c6c-a815-3b8b977d341c")]
	public partial class ClassifierHasEventEvaluations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassifierHasEventEvaluations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9bf453e0, 0x7df3, 0x4c6c, 0xa8, 0x15, 0x3b, 0x8b, 0x97, 0x7d, 0x34, 0x1c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassifierHasEventEvaluations link in the same Partition as the given Classifier
		/// </summary>
		/// <param name="source">Classifier to use as the source of the relationship.</param>
		/// <param name="target">ClassifierEventEvaluation to use as the target of the relationship.</param>
		public ClassifierHasEventEvaluations(Classifier source, ClassifierEventEvaluation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassifierHasEventEvaluations.ClassifierDomainRoleId, source), new DslModeling::RoleAssignment(ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassifierHasEventEvaluations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassifierHasEventEvaluations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassifierHasEventEvaluations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassifierHasEventEvaluations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Classifier domain role code
		
		/// <summary>
		/// Classifier domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassifierDomainRoleId = new global::System.Guid(0x7e606fca, 0x2e25, 0x4360, 0x8c, 0x22, 0x60, 0x4b, 0x09, 0x07, 0x20, 0x3d);
		
		/// <summary>
		/// DomainRole Classifier
		/// Description for CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.Classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations/Classifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations/Classifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ClassifierEventEvaluations", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations/Classifier.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7e606fca-2e25-4360-8c22-604b0907203d")]
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Classifier)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassifierDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassifierDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Classifier of a ClassifierEventEvaluation
		/// <summary>
		/// Gets Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Classifier GetClassifier(ClassifierEventEvaluation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClassifierEventEvaluationDomainRoleId) as Classifier;
		}
		
		/// <summary>
		/// Sets Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetClassifier(ClassifierEventEvaluation element, Classifier newClassifier)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClassifierEventEvaluationDomainRoleId, newClassifier);
		}
		#endregion
		#region ClassifierEventEvaluation domain role code
		
		/// <summary>
		/// ClassifierEventEvaluation domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClassifierEventEvaluationDomainRoleId = new global::System.Guid(0xee628483, 0x3aec, 0x4dcf, 0x94, 0x18, 0xe1, 0xf4, 0x67, 0x0d, 0x4b, 0xa4);
		
		/// <summary>
		/// DomainRole ClassifierEventEvaluation
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations/ClassifierEventEvaluation.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations/ClassifierEventEvaluation.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Classifier", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations/ClassifierEventEvaluation.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("ee628483-3aec-4dcf-9418-e1f4670d4ba4")]
		public virtual ClassifierEventEvaluation ClassifierEventEvaluation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassifierEventEvaluation)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClassifierEventEvaluationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClassifierEventEvaluationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ClassifierEventEvaluations of a Classifier
		/// <summary>
		/// Gets a list of ClassifierEventEvaluations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassifierEventEvaluation> GetClassifierEventEvaluations(Classifier element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ClassifierEventEvaluation>, ClassifierEventEvaluation>(element, ClassifierDomainRoleId);
		}
		#endregion
		#region Classifier link accessor
		/// <summary>
		/// Get the list of ClassifierHasEventEvaluations links to a Classifier.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations> GetLinksToClassifierEventEvaluations ( global::CQRSAzure.CQRSdsl.Dsl.Classifier classifierInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations>(classifierInstance, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierDomainRoleId);
		}
		#endregion
		#region ClassifierEventEvaluation link accessor
		/// <summary>
		/// Get the ClassifierHasEventEvaluations link to a ClassifierEventEvaluation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations GetLinkToClassifier (global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation classifierEventEvaluationInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations>(classifierEventEvaluationInstance, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClassifierEventEvaluation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassifierHasEventEvaluations instance accessors
		
		/// <summary>
		/// Get any ClassifierHasEventEvaluations links between a given Classifier and a ClassifierEventEvaluation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.Classifier source, global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations>(source, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations link in links )
			{
				if ( target.Equals(link.ClassifierEventEvaluation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassifierHasEventEvaluations link between a given Classifierand a ClassifierEventEvaluation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations GetLink( global::CQRSAzure.CQRSdsl.Dsl.Classifier source, global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations>(source, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations link in links )
			{
				if ( target.Equals(link.ClassifierEventEvaluation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship CommandDefinitionReferencesIdentityGroup
	/// Description for CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("26a7f252-842b-48df-aa02-c24a73958c86")]
	public partial class CommandDefinitionReferencesIdentityGroup : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommandDefinitionReferencesIdentityGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x26a7f252, 0x842b, 0x48df, 0xaa, 0x02, 0xc2, 0x4a, 0x73, 0x95, 0x8c, 0x86);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommandDefinitionReferencesIdentityGroup link in the same Partition as the given CommandDefinition
		/// </summary>
		/// <param name="source">CommandDefinition to use as the source of the relationship.</param>
		/// <param name="target">IdentityGroup to use as the target of the relationship.</param>
		public CommandDefinitionReferencesIdentityGroup(CommandDefinition source, IdentityGroup target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(CommandDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandDefinitionReferencesIdentityGroup(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandDefinitionReferencesIdentityGroup(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommandDefinitionReferencesIdentityGroup(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommandDefinitionReferencesIdentityGroup(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CommandDefinition domain role code
		
		/// <summary>
		/// CommandDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommandDefinitionDomainRoleId = new global::System.Guid(0x9f111275, 0x39d2, 0x4ef6, 0x8e, 0xd4, 0x77, 0x2b, 0x81, 0x8c, 0xd1, 0x37);
		
		/// <summary>
		/// DomainRole CommandDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup/CommandDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup/CommandDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "IdentityGroup", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup/CommandDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("9f111275-39d2-4ef6-8ed4-772b818cd137")]
		public virtual CommandDefinition CommandDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (CommandDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommandDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommandDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CommandDefinitions of a IdentityGroup
		/// <summary>
		/// Gets a list of CommandDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<CommandDefinition> GetCommandDefinitions(IdentityGroup element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<CommandDefinition>, CommandDefinition>(element, IdentityGroupDomainRoleId);
		}
		#endregion
		#region IdentityGroup domain role code
		
		/// <summary>
		/// IdentityGroup domain role Id.
		/// </summary>
		public static readonly global::System.Guid IdentityGroupDomainRoleId = new global::System.Guid(0xcb198eea, 0x18c2, 0x4b61, 0xb4, 0xf5, 0x43, 0x68, 0x10, 0xc9, 0x17, 0xae);
		
		/// <summary>
		/// DomainRole IdentityGroup
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.IdentityGroup
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup/IdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup/IdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CommandDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup/IdentityGroup.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("cb198eea-18c2-4b61-b4f5-436810c917ae")]
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (IdentityGroup)DslModeling::DomainRoleInfo.GetRolePlayer(this, IdentityGroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, IdentityGroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access IdentityGroup of a CommandDefinition
		/// <summary>
		/// Gets IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static IdentityGroup GetIdentityGroup(CommandDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommandDefinitionDomainRoleId) as IdentityGroup;
		}
		
		/// <summary>
		/// Sets IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetIdentityGroup(CommandDefinition element, IdentityGroup newIdentityGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommandDefinitionDomainRoleId, newIdentityGroup);
		}
		#endregion
		#region CommandDefinition link accessor
		/// <summary>
		/// Get the CommandDefinitionReferencesIdentityGroup link to a CommandDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup GetLinkToIdentityGroup (global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition commandDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup>(commandDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of CommandDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region IdentityGroup link accessor
		/// <summary>
		/// Get the list of CommandDefinitionReferencesIdentityGroup links to a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup> GetLinksToCommandDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup identityGroupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup>(identityGroupInstance, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId);
		}
		#endregion
		#region CommandDefinitionReferencesIdentityGroup instance accessors
		
		/// <summary>
		/// Get any CommandDefinitionReferencesIdentityGroup links between a given CommandDefinition and a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup>(source, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup link in links )
			{
				if ( target.Equals(link.IdentityGroup) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommandDefinitionReferencesIdentityGroup link between a given CommandDefinitionand a IdentityGroup.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup GetLink( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition source, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup>(source, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup link in links )
			{
				if ( target.Equals(link.IdentityGroup) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainRelationship QueryDefinitionReferencesProjectionDefinition
	/// Conenction from a query to the projection underlying the query results
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ab39163b-1c2b-46e8-81d3-d4c0ae2ed538")]
	public partial class QueryDefinitionReferencesProjectionDefinition : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// QueryDefinitionReferencesProjectionDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab39163b, 0x1c2b, 0x46e8, 0x81, 0xd3, 0xd4, 0xc0, 0xae, 0x2e, 0xd5, 0x38);
	
				
		/// <summary>
		/// Constructor
		/// Creates a QueryDefinitionReferencesProjectionDefinition link in the same Partition as the given QueryDefinition
		/// </summary>
		/// <param name="source">QueryDefinition to use as the source of the relationship.</param>
		/// <param name="target">ProjectionDefinition to use as the target of the relationship.</param>
		public QueryDefinitionReferencesProjectionDefinition(QueryDefinition source, ProjectionDefinition target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId, source), new DslModeling::RoleAssignment(QueryDefinitionReferencesProjectionDefinition.ProjectionDefinitionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionReferencesProjectionDefinition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionReferencesProjectionDefinition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public QueryDefinitionReferencesProjectionDefinition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public QueryDefinitionReferencesProjectionDefinition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region QueryDefinition domain role code
		
		/// <summary>
		/// QueryDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid QueryDefinitionDomainRoleId = new global::System.Guid(0x2a6c36b4, 0xeed2, 0x409c, 0xb6, 0x69, 0xd4, 0xfc, 0xe7, 0xae, 0x12, 0x27);
		
		/// <summary>
		/// DomainRole QueryDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition/QueryDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition/QueryDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProjectionDefinition", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition/QueryDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("2a6c36b4-eed2-409c-b669-d4fce7ae1227")]
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (QueryDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, QueryDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, QueryDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access QueryDefinitions of a ProjectionDefinition
		/// <summary>
		/// Gets a list of QueryDefinitions.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<QueryDefinition> GetQueryDefinitions(ProjectionDefinition element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<QueryDefinition>, QueryDefinition>(element, ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region ProjectionDefinition domain role code
		
		/// <summary>
		/// ProjectionDefinition domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProjectionDefinitionDomainRoleId = new global::System.Guid(0x43a282df, 0xebf5, 0x4e51, 0x94, 0x07, 0xbc, 0x6a, 0xbb, 0x48, 0xdd, 0x57);
		
		/// <summary>
		/// DomainRole ProjectionDefinition
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.ProjectionDefinition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition/ProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition/ProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "QueryDefinitions", PropertyDisplayNameKey="CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition/ProjectionDefinition.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("43a282df-ebf5-4e51-9407-bc6abb48dd57")]
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProjectionDefinition)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProjectionDefinitionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProjectionDefinitionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProjectionDefinition of a QueryDefinition
		/// <summary>
		/// Gets ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ProjectionDefinition GetProjectionDefinition(QueryDefinition element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, QueryDefinitionDomainRoleId) as ProjectionDefinition;
		}
		
		/// <summary>
		/// Sets ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProjectionDefinition(QueryDefinition element, ProjectionDefinition newProjectionDefinition)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, QueryDefinitionDomainRoleId, newProjectionDefinition);
		}
		#endregion
		#region QueryDefinition link accessor
		/// <summary>
		/// Get the QueryDefinitionReferencesProjectionDefinition link to a QueryDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition GetLinkToProjectionDefinition (global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition queryDefinitionInstance)
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition>(queryDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of QueryDefinition not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProjectionDefinition link accessor
		/// <summary>
		/// Get the list of QueryDefinitionReferencesProjectionDefinition links to a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition> GetLinksToQueryDefinitions ( global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition projectionDefinitionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition>(projectionDefinitionInstance, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.ProjectionDefinitionDomainRoleId);
		}
		#endregion
		#region QueryDefinitionReferencesProjectionDefinition instance accessors
		
		/// <summary>
		/// Get any QueryDefinitionReferencesProjectionDefinition links between a given QueryDefinition and a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition> GetLinks( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition target )
		{
			global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition> outLinks = new global::System.Collections.Generic.List<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition>();
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition link in links )
			{
				if ( target.Equals(link.ProjectionDefinition) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one QueryDefinitionReferencesProjectionDefinition link between a given QueryDefinitionand a ProjectionDefinition.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition GetLink( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition source, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition target )
		{
			global::System.Collections.Generic.IList<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition>(source, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId);
			foreach ( global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition link in links )
			{
				if ( target.Equals(link.ProjectionDefinition) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
