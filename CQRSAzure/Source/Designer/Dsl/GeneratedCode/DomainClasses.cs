//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass CQRSModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("b927fa6e-0562-44cc-9be0-71281aa07d25")]
	public partial class CQRSModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CQRSModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb927fa6e, 0x0562, 0x44cc, 0x9b, 0xe0, 0x71, 0x28, 0x1a, 0xa0, 0x7d, 0x25);
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public CQRSModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public CQRSModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x693bbdfa, 0x8599, 0x4433, 0xb4, 0xa2, 0x6a, 0xfc, 0x5a, 0xaa, 0xe0, 0x4e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Name of the overall CQRS model
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("693bbdfa-8599-4433-b4a2-6afc5aaae04e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x1e6c5edc, 0x40b6, 0x41b4, 0xb5, 0x7f, 0x63, 0xbb, 0x30, 0xdc, 0x92, 0x19);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Informal notes for documenting the entire CQRS domain
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1e6c5edc-40b6-41b4-b57f-63bb30dc9219")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x4499457a, 0x4d6e, 0x4e98, 0x88, 0xa7, 0x11, 0x5b, 0x49, 0xbc, 0x09, 0xd7);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description for this model
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4499457a-4d6e-4e98-88a7-115b49bc09d7")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DefaultCodeGenerationLanguage domain property code
		
		/// <summary>
		/// DefaultCodeGenerationLanguage domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultCodeGenerationLanguageDomainPropertyId = new global::System.Guid(0xf925da5a, 0x07b7, 0x420a, 0x85, 0x20, 0x24, 0x67, 0x24, 0xdf, 0xec, 0xd6);
		
		/// <summary>
		/// Storage for DefaultCodeGenerationLanguage
		/// </summary>
		private TargetLanguage defaultCodeGenerationLanguagePropertyStorage = TargetLanguage.VBNet;
		
		/// <summary>
		/// Gets or sets the value of DefaultCodeGenerationLanguage domain property.
		/// The default language to use when doing code generation for this model
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/DefaultCodeGenerationLanguage.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/DefaultCodeGenerationLanguage.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/DefaultCodeGenerationLanguage.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TargetLanguage.VBNet)]
		[DslModeling::DomainObjectId("f925da5a-07b7-420a-8520-246724dfecd6")]
		public TargetLanguage DefaultCodeGenerationLanguage
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultCodeGenerationLanguagePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultCodeGenerationLanguagePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.DefaultCodeGenerationLanguage domain property.
		/// </summary>
		internal sealed partial class DefaultCodeGenerationLanguagePropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, TargetLanguage>
		{
			private DefaultCodeGenerationLanguagePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.DefaultCodeGenerationLanguage domain property value handler.
			/// </summary>
			public static readonly DefaultCodeGenerationLanguagePropertyHandler Instance = new DefaultCodeGenerationLanguagePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.DefaultCodeGenerationLanguage domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultCodeGenerationLanguageDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TargetLanguage GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.defaultCodeGenerationLanguagePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, TargetLanguage newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TargetLanguage oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultCodeGenerationLanguagePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SubfolderPerDomain domain property code
		
		/// <summary>
		/// SubfolderPerDomain domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubfolderPerDomainDomainPropertyId = new global::System.Guid(0xe5e83a90, 0x1b39, 0x4900, 0xb1, 0x25, 0xfe, 0x74, 0xca, 0x3f, 0xc3, 0xb0);
		
		/// <summary>
		/// Storage for SubfolderPerDomain
		/// </summary>
		private global::System.Boolean subfolderPerDomainPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SubfolderPerDomain domain property.
		/// Should each domain code be put in its own subfolder?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/SubfolderPerDomain.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/SubfolderPerDomain.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/SubfolderPerDomain.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e5e83a90-1b39-4900-b125-fe74ca3fc3b0")]
		public global::System.Boolean SubfolderPerDomain
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subfolderPerDomainPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubfolderPerDomainPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.SubfolderPerDomain domain property.
		/// </summary>
		internal sealed partial class SubfolderPerDomainPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.Boolean>
		{
			private SubfolderPerDomainPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.SubfolderPerDomain domain property value handler.
			/// </summary>
			public static readonly SubfolderPerDomainPropertyHandler Instance = new SubfolderPerDomainPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.SubfolderPerDomain domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubfolderPerDomainDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subfolderPerDomainPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subfolderPerDomainPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SubfolderPerAggregate domain property code
		
		/// <summary>
		/// SubfolderPerAggregate domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubfolderPerAggregateDomainPropertyId = new global::System.Guid(0x491d1a27, 0x0b88, 0x41a1, 0xbe, 0xa5, 0x09, 0x45, 0x1d, 0x04, 0x42, 0x2d);
		
		/// <summary>
		/// Storage for SubfolderPerAggregate
		/// </summary>
		private global::System.Boolean subfolderPerAggregatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SubfolderPerAggregate domain property.
		/// Should each aggregate generate code into its own sub folder
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/SubfolderPerAggregate.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/SubfolderPerAggregate.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/SubfolderPerAggregate.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("491d1a27-0b88-41a1-bea5-09451d04422d")]
		public global::System.Boolean SubfolderPerAggregate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subfolderPerAggregatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubfolderPerAggregatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.SubfolderPerAggregate domain property.
		/// </summary>
		internal sealed partial class SubfolderPerAggregatePropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.Boolean>
		{
			private SubfolderPerAggregatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.SubfolderPerAggregate domain property value handler.
			/// </summary>
			public static readonly SubfolderPerAggregatePropertyHandler Instance = new SubfolderPerAggregatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.SubfolderPerAggregate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubfolderPerAggregateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subfolderPerAggregatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subfolderPerAggregatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MajorVersion domain property code
		
		/// <summary>
		/// MajorVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid MajorVersionDomainPropertyId = new global::System.Guid(0x274c78c7, 0x111d, 0x4364, 0x9b, 0xd7, 0xe1, 0x7d, 0x09, 0xaf, 0xd0, 0xda);
		
		/// <summary>
		/// Storage for MajorVersion
		/// </summary>
		private global::System.Int32 majorVersionPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of MajorVersion domain property.
		/// Major version number for the CQRS domain model
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/MajorVersion.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/MajorVersion.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/MajorVersion.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("274c78c7-111d-4364-9bd7-e17d09afd0da")]
		public global::System.Int32 MajorVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return majorVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MajorVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.MajorVersion domain property.
		/// </summary>
		internal sealed partial class MajorVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.Int32>
		{
			private MajorVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.MajorVersion domain property value handler.
			/// </summary>
			public static readonly MajorVersionPropertyHandler Instance = new MajorVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.MajorVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MajorVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.majorVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.majorVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MinorVersion domain property code
		
		/// <summary>
		/// MinorVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid MinorVersionDomainPropertyId = new global::System.Guid(0xa78f82c4, 0x2b9a, 0x4fb4, 0xa3, 0xb7, 0x6f, 0xe6, 0x20, 0x7b, 0xa6, 0xac);
		
		/// <summary>
		/// Storage for MinorVersion
		/// </summary>
		private global::System.Int32 minorVersionPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of MinorVersion domain property.
		/// Minor version number of the CQRS domain
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/MinorVersion.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/MinorVersion.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/MinorVersion.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("a78f82c4-2b9a-4fb4-a3b7-6fe6207ba6ac")]
		public global::System.Int32 MinorVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return minorVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MinorVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.MinorVersion domain property.
		/// </summary>
		internal sealed partial class MinorVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.Int32>
		{
			private MinorVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.MinorVersion domain property value handler.
			/// </summary>
			public static readonly MinorVersionPropertyHandler Instance = new MinorVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.MinorVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MinorVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.minorVersionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.minorVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CodeRootFolder domain property code
		
		/// <summary>
		/// CodeRootFolder domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeRootFolderDomainPropertyId = new global::System.Guid(0x389465bf, 0x3e2b, 0x4734, 0x87, 0xd7, 0x44, 0x37, 0x77, 0x3b, 0x79, 0xfe);
		
		/// <summary>
		/// Storage for CodeRootFolder
		/// </summary>
		private global::System.String codeRootFolderPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeRootFolder domain property.
		/// The root folder to generate source code into for this domain
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/CodeRootFolder.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/CodeRootFolder.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/CodeRootFolder.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("389465bf-3e2b-4734-87d7-4437773b79fe")]
		public global::System.String CodeRootFolder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeRootFolderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeRootFolderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.CodeRootFolder domain property.
		/// </summary>
		internal sealed partial class CodeRootFolderPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.String>
		{
			private CodeRootFolderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.CodeRootFolder domain property value handler.
			/// </summary>
			public static readonly CodeRootFolderPropertyHandler Instance = new CodeRootFolderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.CodeRootFolder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeRootFolderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.codeRootFolderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeRootFolderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DocumentationRootFolder domain property code
		
		/// <summary>
		/// DocumentationRootFolder domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocumentationRootFolderDomainPropertyId = new global::System.Guid(0xb5402dbc, 0xd23c, 0x492e, 0x8e, 0x9a, 0xb4, 0xd7, 0x6f, 0x48, 0xdf, 0xda);
		
		/// <summary>
		/// Storage for DocumentationRootFolder
		/// </summary>
		private global::System.String documentationRootFolderPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DocumentationRootFolder domain property.
		/// The root folder to store the documentation generated for this domain in
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/DocumentationRootFolder.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/DocumentationRootFolder.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/DocumentationRootFolder.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b5402dbc-d23c-492e-8e9a-b4d76f48dfda")]
		public global::System.String DocumentationRootFolder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return documentationRootFolderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocumentationRootFolderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.DocumentationRootFolder domain property.
		/// </summary>
		internal sealed partial class DocumentationRootFolderPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.String>
		{
			private DocumentationRootFolderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.DocumentationRootFolder domain property value handler.
			/// </summary>
			public static readonly DocumentationRootFolderPropertyHandler Instance = new DocumentationRootFolderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.DocumentationRootFolder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocumentationRootFolderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.documentationRootFolderPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.documentationRootFolderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region GenerateEntityFrameworkClasses domain property code
		
		/// <summary>
		/// GenerateEntityFrameworkClasses domain property Id.
		/// </summary>
		public static readonly global::System.Guid GenerateEntityFrameworkClassesDomainPropertyId = new global::System.Guid(0x70abc4bb, 0xa679, 0x46ba, 0xad, 0xf1, 0xc3, 0x4e, 0x8a, 0x41, 0x2b, 0x78);
		
		/// <summary>
		/// Storage for GenerateEntityFrameworkClasses
		/// </summary>
		private global::System.Boolean generateEntityFrameworkClassesPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GenerateEntityFrameworkClasses domain property.
		/// Should the model build the Entity Framework classes for storing the model in an
		/// SQL database
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/GenerateEntityFrameworkClasses.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/GenerateEntityFrameworkClasses.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/GenerateEntityFrameworkClasses.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("70abc4bb-a679-46ba-adf1-c34e8a412b78")]
		public global::System.Boolean GenerateEntityFrameworkClasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generateEntityFrameworkClassesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GenerateEntityFrameworkClassesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.GenerateEntityFrameworkClasses domain property.
		/// </summary>
		internal sealed partial class GenerateEntityFrameworkClassesPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, global::System.Boolean>
		{
			private GenerateEntityFrameworkClassesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.GenerateEntityFrameworkClasses domain property value handler.
			/// </summary>
			public static readonly GenerateEntityFrameworkClassesPropertyHandler Instance = new GenerateEntityFrameworkClassesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.GenerateEntityFrameworkClasses domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GenerateEntityFrameworkClassesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.generateEntityFrameworkClassesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generateEntityFrameworkClassesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Framework domain property code
		
		/// <summary>
		/// Framework domain property Id.
		/// </summary>
		public static readonly global::System.Guid FrameworkDomainPropertyId = new global::System.Guid(0x8a186666, 0xf7d7, 0x4e8f, 0x88, 0xfb, 0xcd, 0x91, 0xf7, 0xae, 0xdc, 0x84);
		
		/// <summary>
		/// Storage for Framework
		/// </summary>
		private SupportingFramework frameworkPropertyStorage = SupportingFramework.CQRSonAzure;
		
		/// <summary>
		/// Gets or sets the value of Framework domain property.
		/// The framework to use for the generated code
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Framework.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSModel/Framework.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(SupportingFramework.CQRSonAzure)]
		[DslModeling::DomainObjectId("8a186666-f7d7-4e8f-88fb-cd91f7aedc84")]
		public SupportingFramework Framework
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return frameworkPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FrameworkPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CQRSModel.Framework domain property.
		/// </summary>
		internal sealed partial class FrameworkPropertyHandler : DslModeling::DomainPropertyValueHandler<CQRSModel, SupportingFramework>
		{
			private FrameworkPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CQRSModel.Framework domain property value handler.
			/// </summary>
			public static readonly FrameworkPropertyHandler Instance = new FrameworkPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CQRSModel.Framework domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FrameworkDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed SupportingFramework GetValue(CQRSModel element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.frameworkPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CQRSModel element, SupportingFramework newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				SupportingFramework oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.frameworkPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifiers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of AggregateIdentifiers.
		/// Description for CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AggregateIdentifier> AggregateIdentifiers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateIdentifier>, AggregateIdentifier>(global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier sourceAggregateIdentifier1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier;
			if (sourceAggregateIdentifier1 != null)
			{
				// Create link for path CQRSModelHasAggregateIdentifiers.AggregateIdentifiers
				this.AggregateIdentifiers.Add(sourceAggregateIdentifier1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier sourceAggregateIdentifier1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier;
			if (sourceAggregateIdentifier1 != null)
			{
				// Delete link for path CQRSModelHasAggregateIdentifiers.AggregateIdentifiers
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.CQRSModel)this, sourceAggregateIdentifier1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass AggregateIdentifier
	/// Class to uniquely identiy a particular aggregate type
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("3d71fb67-1375-4f99-8206-12a78e514a4a")]
	public partial class AggregateIdentifier : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// AggregateIdentifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3d71fb67, 0x1375, 0x4f99, 0x82, 0x06, 0x12, 0xa7, 0x8e, 0x51, 0x4a, 0x4a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateIdentifier(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public AggregateIdentifier(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x51edf60d, 0xda76, 0x4479, 0x85, 0x50, 0x6d, 0x5e, 0xd8, 0x06, 0xcc, 0xc0);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Unique name of the aggregate entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("51edf60d-da76-4479-8550-6d5ed806ccc0")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifier.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifier, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifier.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifier.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x118003e6, 0x14d5, 0x441b, 0xb6, 0x5b, 0xdb, 0xde, 0x1c, 0x84, 0x10, 0x0d);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description of this aggregate
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("118003e6-14d5-441b-b65b-dbde1c84100d")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifier.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifier, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifier.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifier.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region KeyName domain property code
		
		/// <summary>
		/// KeyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyNameDomainPropertyId = new global::System.Guid(0xaff8fbc1, 0x7274, 0x4c00, 0x89, 0x86, 0x71, 0xa5, 0x32, 0x79, 0xc1, 0x66);
		
		/// <summary>
		/// Storage for KeyName
		/// </summary>
		private global::System.String keyNamePropertyStorage = "Key";
		
		/// <summary>
		/// Gets or sets the value of KeyName domain property.
		/// The name of the property that uniquely identifies this aggregate
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/KeyName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/KeyName.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/KeyName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Key")]
		[DslModeling::DomainObjectId("aff8fbc1-7274-4c00-8986-71a53279c166")]
		public global::System.String KeyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifier.KeyName domain property.
		/// </summary>
		internal sealed partial class KeyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifier, global::System.String>
		{
			private KeyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifier.KeyName domain property value handler.
			/// </summary>
			public static readonly KeyNamePropertyHandler Instance = new KeyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifier.KeyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.keyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region KeyDataType domain property code
		
		/// <summary>
		/// KeyDataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid KeyDataTypeDomainPropertyId = new global::System.Guid(0x012239b1, 0x8d7c, 0x4678, 0x92, 0xaa, 0xb5, 0x95, 0xef, 0xde, 0xe9, 0xfc);
		
		/// <summary>
		/// Storage for KeyDataType
		/// </summary>
		private KeyDataType keyDataTypePropertyStorage = KeyDataType.SystemGUID;
		
		/// <summary>
		/// Gets or sets the value of KeyDataType domain property.
		/// The data type used for the field that uniquely 
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/KeyDataType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/KeyDataType.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/KeyDataType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(KeyDataType.SystemGUID)]
		[DslModeling::DomainObjectId("012239b1-8d7c-4678-92aa-b595efdee9fc")]
		public KeyDataType KeyDataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return keyDataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KeyDataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifier.KeyDataType domain property.
		/// </summary>
		internal sealed partial class KeyDataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifier, KeyDataType>
		{
			private KeyDataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifier.KeyDataType domain property value handler.
			/// </summary>
			public static readonly KeyDataTypePropertyHandler Instance = new KeyDataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifier.KeyDataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KeyDataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed KeyDataType GetValue(AggregateIdentifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.keyDataTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifier element, KeyDataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				KeyDataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.keyDataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x5006e794, 0x744e, 0x47eb, 0x93, 0x29, 0xbb, 0xc5, 0x36, 0x56, 0xc3, 0x68);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for this aggregate identifier type
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("5006e794-744e-47eb-9329-bbc53656c368")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifier.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifier, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifier.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifier.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x9e8c8044, 0x3c57, 0x4d6f, 0x94, 0xc0, 0x60, 0xd7, 0x24, 0x2e, 0x52, 0xd6);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9e8c8044-3c57-4d6f-94c0-60d7242e52d6")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the AggregateIdentifier.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<AggregateIdentifier, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the AggregateIdentifier.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the AggregateIdentifier.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(AggregateIdentifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(AggregateIdentifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CQRSModel opposite domain role accessor
		/// <summary>
		/// Gets or sets CQRSModel.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifier
		/// </summary>
		public virtual CQRSModel CQRSModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId) as CQRSModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId, value);
			}
		}
		#endregion
		#region EventDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EventDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EventDefinition> EventDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EventDefinition>, EventDefinition>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region ProjectionDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProjectionDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProjectionDefinition> ProjectionDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionDefinition>, ProjectionDefinition>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region TargetAggregateIdentifiers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetAggregateIdentifiers.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AggregateIdentifier> TargetAggregateIdentifiers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateIdentifier>, AggregateIdentifier>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region SourceAggregateIdentifiers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceAggregateIdentifiers.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.TargetAggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<AggregateIdentifier> SourceAggregateIdentifiers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<AggregateIdentifier>, AggregateIdentifier>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierIsChildOfTargetAggregateIdentifiers.TargetAggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region CommandDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CommandDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CommandDefinition> CommandDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CommandDefinition>, CommandDefinition>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region QueryDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of QueryDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryDefinition> QueryDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryDefinition>, QueryDefinition>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region IdentityGrouped opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IdentityGrouped.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IdentityGroup> IdentityGrouped
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IdentityGroup>, IdentityGroup>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region Classifiers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Classifiers.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Classifier> Classifiers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Classifier>, Classifier>(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.EventDefinition.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.Classifier.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.EventDefinition sourceEventDefinition1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.EventDefinition;
			if (sourceEventDefinition1 != null)
			{
				// Create link for path AggregateIdentifierHasEventDefinitions.EventDefinitions
				this.EventDefinitions.Add(sourceEventDefinition1);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition sourceProjectionDefinition2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition;
			if (sourceProjectionDefinition2 != null)
			{
				// Create link for path AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitions
				this.ProjectionDefinitions.Add(sourceProjectionDefinition2);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition sourceCommandDefinition3 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition;
			if (sourceCommandDefinition3 != null)
			{
				// Create link for path AggregateIdentifierHasCommandDefinitions.CommandDefinitions
				this.CommandDefinitions.Add(sourceCommandDefinition3);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition sourceQueryDefinition4 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition;
			if (sourceQueryDefinition4 != null)
			{
				// Create link for path AggregateIdentifierHasQueryDefinitions.QueryDefinitions
				this.QueryDefinitions.Add(sourceQueryDefinition4);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup sourceIdentityGroup5 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup;
			if (sourceIdentityGroup5 != null)
			{
				// Create link for path AggregateIdentifierHasIdentityGrouped.IdentityGrouped
				this.IdentityGrouped.Add(sourceIdentityGroup5);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.Classifier sourceClassifier6 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.Classifier;
			if (sourceClassifier6 != null)
			{
				// Create link for path AggregateIdentifierHasClassifiers.Classifiers
				this.Classifiers.Add(sourceClassifier6);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.EventDefinition sourceEventDefinition1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.EventDefinition;
			if (sourceEventDefinition1 != null)
			{
				// Delete link for path AggregateIdentifierHasEventDefinitions.EventDefinitions
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier)this, sourceEventDefinition1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition sourceProjectionDefinition2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition;
			if (sourceProjectionDefinition2 != null)
			{
				// Delete link for path AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitions
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier)this, sourceProjectionDefinition2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition sourceCommandDefinition3 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition;
			if (sourceCommandDefinition3 != null)
			{
				// Delete link for path AggregateIdentifierHasCommandDefinitions.CommandDefinitions
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier)this, sourceCommandDefinition3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition sourceQueryDefinition4 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition;
			if (sourceQueryDefinition4 != null)
			{
				// Delete link for path AggregateIdentifierHasQueryDefinitions.QueryDefinitions
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier)this, sourceQueryDefinition4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup sourceIdentityGroup5 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.IdentityGroup;
			if (sourceIdentityGroup5 != null)
			{
				// Delete link for path AggregateIdentifierHasIdentityGrouped.IdentityGrouped
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier)this, sourceIdentityGroup5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.Classifier sourceClassifier6 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.Classifier;
			if (sourceClassifier6 != null)
			{
				// Delete link for path AggregateIdentifierHasClassifiers.Classifiers
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifier)this, sourceClassifier6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.ClassifierDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass EventDefinition
	/// Definition of an event that can occur to the aggregate
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.Design.HelpKeyword("Event")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a88729a0-1121-458a-b5c7-32ef0714b62a")]
	public partial class EventDefinition : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EventDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa88729a0, 0x1121, 0x458a, 0xb5, 0xc7, 0x32, 0xef, 0x07, 0x14, 0xb6, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EventDefinition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EventDefinition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x4c8f5eab, 0x0160, 0x4c63, 0x84, 0x8c, 0x43, 0x25, 0x1f, 0x56, 0x6a, 0xe1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Unique name of the event
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("4c8f5eab-0160-4c63-848c-43251f566ae1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinition.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinition, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinition.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinition.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd4bde3de, 0xbaff, 0x4fec, 0xb6, 0xf5, 0xee, 0xee, 0x0b, 0x09, 0x04, 0xe4);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Business definition of what this event is that has occured for the aggregate
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d4bde3de-baff-4fec-b6f5-eeee0b0904e4")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinition.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinition, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinition.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinition.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xc7083ddd, 0x63ae, 0x4ddf, 0xa4, 0x74, 0xa7, 0xb7, 0xcf, 0x43, 0x67, 0x30);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for this event type
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c7083ddd-63ae-4ddf-a474-a7b7cf436730")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinition.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinition, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinition.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinition.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0x3d92cab4, 0xb21f, 0x467f, 0xab, 0xbc, 0x35, 0x08, 0xa8, 0xe5, 0x47, 0x86);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private global::System.Int32 versionPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// The current version of this event definition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Version.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Version.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("3d92cab4-b21f-467f-abbc-3508a8e54786")]
		public global::System.Int32 Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			protected internal set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinition.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinition, global::System.Int32>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinition.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinition.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(EventDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.versionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinition element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.versionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x089efc4b, 0x197a, 0x4e64, 0x88, 0xbe, 0xe5, 0xfb, 0x50, 0x0d, 0x3d, 0x7a);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventDefinition/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("089efc4b-197a-4e64-88be-e5fb500d3d7a")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventDefinition.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<EventDefinition, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventDefinition.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventDefinition.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateIdentifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinition
		/// </summary>
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId) as AggregateIdentifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region EventProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EventProperties.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EventProperty> EventProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EventProperty>, EventProperty>(global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinitionDomainRoleId);
			}
		}
		#endregion
		#region ProjectionDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProjectionDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.EventDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProjectionDefinition> ProjectionDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionDefinition>, ProjectionDefinition>(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.EventDefinitionDomainRoleId);
			}
		}
		#endregion
		#region Classifiers opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Classifiers.
		/// Description for CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.EventDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Classifier> Classifiers
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Classifier>, Classifier>(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.EventDefinitionDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.EventProperty.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.EventProperty sourceEventProperty1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.EventProperty;
			if (sourceEventProperty1 != null)
			{
				// Create link for path EventDefinitionHasEventProperties.EventProperties
				this.EventProperties.Add(sourceEventProperty1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.EventProperty sourceEventProperty1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.EventProperty;
			if (sourceEventProperty1 != null)
			{
				// Delete link for path EventDefinitionHasEventProperties.EventProperties
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.EventDefinition)this, sourceEventProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventDefinitionDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventPropertyDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass ProjectionDefinition
	/// Definition of a projection that can be run for this aggregate
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("a506bd6f-43f3-44ea-b88e-66d3aaa85077")]
	public partial class ProjectionDefinition : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProjectionDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa506bd6f, 0x43f3, 0x44ea, 0xb8, 0x8e, 0x66, 0xd3, 0xaa, 0xa8, 0x50, 0x77);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProjectionDefinition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProjectionDefinition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x77d1c2a6, 0x1c0b, 0x4392, 0xb5, 0x92, 0x7c, 0x0e, 0xd3, 0xd2, 0x73, 0x0a);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition.Name
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("77d1c2a6-1c0b-4392-b592-7c0ed3d2730a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinition.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinition, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinition.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinition.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x0c867d88, 0xf1b3, 0x4de0, 0xa4, 0xd0, 0xa3, 0xfb, 0x58, 0x58, 0x8b, 0xfc);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Business definition of what this projection shows about the aggregate
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("0c867d88-f1b3-4de0-a4d0-a3fb58588bfc")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinition.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinition, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinition.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinition.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x22b4d69e, 0x7ae9, 0x4505, 0x8f, 0x38, 0x62, 0x8f, 0xb1, 0x01, 0x59, 0x70);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for this projection view
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("22b4d69e-7ae9-4505-8f38-628fb1015970")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinition.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinition, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinition.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinition.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x674acc98, 0xa46d, 0x478f, 0xad, 0x7f, 0xf1, 0x9f, 0xfc, 0x88, 0x7c, 0x1e);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("674acc98-a46d-478f-ad7f-f19ffc887c1e")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinition.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinition, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinition.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinition.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CanSnapshot domain property code
		
		/// <summary>
		/// CanSnapshot domain property Id.
		/// </summary>
		public static readonly global::System.Guid CanSnapshotDomainPropertyId = new global::System.Guid(0xd775bcc3, 0x7673, 0x4bcc, 0x83, 0x7f, 0xc3, 0x6f, 0xe5, 0x0c, 0xef, 0xe9);
		
		/// <summary>
		/// Storage for CanSnapshot
		/// </summary>
		private global::System.Boolean canSnapshotPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of CanSnapshot domain property.
		/// Can a snapshot be taken of this projection
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/CanSnapshot.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition/CanSnapshot.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("d775bcc3-7673-4bcc-837f-c36fe50cefe9")]
		public global::System.Boolean CanSnapshot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return canSnapshotPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CanSnapshotPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionDefinition.CanSnapshot domain property.
		/// </summary>
		internal sealed partial class CanSnapshotPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionDefinition, global::System.Boolean>
		{
			private CanSnapshotPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionDefinition.CanSnapshot domain property value handler.
			/// </summary>
			public static readonly CanSnapshotPropertyHandler Instance = new CanSnapshotPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionDefinition.CanSnapshot domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CanSnapshotDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ProjectionDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.canSnapshotPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionDefinition element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.canSnapshotPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateIdentifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinition
		/// </summary>
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId) as AggregateIdentifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectionProperties opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProjectionProperties.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProjectionProperty> ProjectionProperties
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionProperty>, ProjectionProperty>(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId);
			}
		}
		#endregion
		#region EventDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EventDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EventDefinition> EventDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EventDefinition>, EventDefinition>(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinitionDomainRoleId);
			}
		}
		#endregion
		#region ProjectionEventPropertyOperations opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProjectionEventPropertyOperations.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProjectionEventPropertyOperation> ProjectionEventPropertyOperations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProjectionEventPropertyOperation>, ProjectionEventPropertyOperation>(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId);
			}
		}
		#endregion
		#region QueryDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of QueryDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.ProjectionDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryDefinition> QueryDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryDefinition>, QueryDefinition>(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.ProjectionDefinitionDomainRoleId);
			}
		}
		#endregion
		#region Classifier opposite domain role accessor
		/// <summary>
		/// Gets or sets Classifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ClassifierReferencesProjectionDefinition.ProjectionDefinition
		/// </summary>
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierReferencesProjectionDefinition.ProjectionDefinitionDomainRoleId) as Classifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierReferencesProjectionDefinition.ProjectionDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty sourceProjectionProperty1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty;
			if (sourceProjectionProperty1 != null)
			{
				// Create link for path ProjectionDefinitionHasProjectionProperties.ProjectionProperties
				this.ProjectionProperties.Add(sourceProjectionProperty1);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation sourceProjectionEventPropertyOperation2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation;
			if (sourceProjectionEventPropertyOperation2 != null)
			{
				// Create link for path ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperations
				this.ProjectionEventPropertyOperations.Add(sourceProjectionEventPropertyOperation2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty sourceProjectionProperty1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ProjectionProperty;
			if (sourceProjectionProperty1 != null)
			{
				// Delete link for path ProjectionDefinitionHasProjectionProperties.ProjectionProperties
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition)this, sourceProjectionProperty1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation sourceProjectionEventPropertyOperation2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation;
			if (sourceProjectionEventPropertyOperation2 != null)
			{
				// Delete link for path ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperations
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinition)this, sourceProjectionEventPropertyOperation2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass CommandDefinition
	/// Definition of a command that can raise one or more events for an aggregate root
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.ComponentModel.Design.HelpKeyword("Command")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("feed9883-9553-42cc-8b70-12dcd5032804")]
	public partial class CommandDefinition : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CommandDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfeed9883, 0x9553, 0x42cc, 0x8b, 0x70, 0x12, 0xdc, 0xd5, 0x03, 0x28, 0x04);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommandDefinition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommandDefinition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1f140a48, 0xd40e, 0x4801, 0xb6, 0x78, 0xe4, 0xc5, 0x07, 0xd9, 0xcb, 0x97);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Definition of a command that can be issued to the system
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("1f140a48-d40e-4801-b678-e4c507d9cb97")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandDefinition.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CommandDefinition, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandDefinition.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandDefinition.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x438132b6, 0xf7df, 0x4be8, 0x99, 0x06, 0xfb, 0x41, 0x38, 0x54, 0x3c, 0x05);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Business description of the command
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("438132b6-f7df-4be8-9906-fb4138543c05")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandDefinition.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandDefinition, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandDefinition.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandDefinition.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x4987db28, 0x98b1, 0x4522, 0x82, 0x39, 0x4e, 0x60, 0xe7, 0x78, 0xad, 0x30);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for the command
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4987db28-98b1-4522-8239-4e60e778ad30")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandDefinition.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandDefinition, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandDefinition.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandDefinition.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x70b7f601, 0x70ac, 0x4415, 0x8c, 0x6b, 0xae, 0x0c, 0xab, 0x68, 0xf9, 0xad);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandDefinition/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("70b7f601-70ac-4415-8c6b-ae0cab68f9ad")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandDefinition.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandDefinition, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandDefinition.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandDefinition.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateIdentifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinition
		/// </summary>
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId) as AggregateIdentifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region CommandParameters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CommandParameters.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CommandParameter> CommandParameters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CommandParameter>, CommandParameter>(global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinitionDomainRoleId);
			}
		}
		#endregion
		#region IdentityGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets IdentityGroup.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinition
		/// </summary>
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId) as IdentityGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.CommandParameter.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.CommandParameter sourceCommandParameter1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.CommandParameter;
			if (sourceCommandParameter1 != null)
			{
				// Create link for path CommandDefinitionHasParameters.CommandParameters
				this.CommandParameters.Add(sourceCommandParameter1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.CommandParameter sourceCommandParameter1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.CommandParameter;
			if (sourceCommandParameter1 != null)
			{
				// Delete link for path CommandDefinitionHasParameters.CommandParameters
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.CommandDefinition)this, sourceCommandParameter1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandDefinitionDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameterDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass EventProperty
	/// A property providing extra information about an event that has occured
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventProperty.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventProperty.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("1366ba0d-80c1-4315-a210-e8c478c524ff")]
	public partial class EventProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// EventProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1366ba0d, 0x80c1, 0x4315, 0xa2, 0x10, 0xe8, 0xc4, 0x78, 0xc5, 0x24, 0xff);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EventProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EventProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9dfb3392, 0xba6e, 0x4327, 0xbe, 0x83, 0x77, 0x3a, 0x5c, 0x95, 0xb0, 0x74);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The unique name of the property
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9dfb3392-ba6e-4327-be83-773a5c95b074")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EventProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x6816ac97, 0x5bb9, 0x4170, 0x94, 0x41, 0x3d, 0xf8, 0x99, 0x84, 0x30, 0x3e);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The business description of the event property
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6816ac97-5bb9-4170-9441-3df89984303e")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventProperty.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<EventProperty, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventProperty.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventProperty.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xfc33344d, 0x29a5, 0x4b7f, 0xb4, 0x42, 0x6a, 0xb0, 0x66, 0x67, 0xab, 0xc7);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private PropertyDataType dataTypePropertyStorage = PropertyDataType.Integer;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// The backing data type of this event property
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/DataType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/DataType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyDataType.Integer)]
		[DslModeling::DomainObjectId("fc33344d-29a5-4b7f-b442-6ab06667abc7")]
		public PropertyDataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventProperty.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<EventProperty, PropertyDataType>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventProperty.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventProperty.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyDataType GetValue(EventProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventProperty element, PropertyDataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyDataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xc95623ab, 0xe3e6, 0x42ce, 0x9e, 0x83, 0xe3, 0x4f, 0x0e, 0x17, 0xe5, 0x12);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for this event property
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c95623ab-e3e6-42ce-9e83-e34f0e17e512")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventProperty.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<EventProperty, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventProperty.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventProperty.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EventProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsEffectiveDate domain property code
		
		/// <summary>
		/// IsEffectiveDate domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEffectiveDateDomainPropertyId = new global::System.Guid(0xe8d0a4bf, 0x6b07, 0x4c21, 0x85, 0xef, 0xe5, 0xb1, 0x7e, 0x50, 0x5c, 0xa3);
		
		/// <summary>
		/// Storage for IsEffectiveDate
		/// </summary>
		private global::System.Boolean isEffectiveDatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsEffectiveDate domain property.
		/// Does this property provide the "effective date" the event occured on?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/IsEffectiveDate.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EventProperty/IsEffectiveDate.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e8d0a4bf-6b07-4c21-85ef-e5b17e505ca3")]
		public global::System.Boolean IsEffectiveDate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEffectiveDatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEffectiveDatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the EventProperty.IsEffectiveDate domain property.
		/// </summary>
		internal sealed partial class IsEffectiveDatePropertyHandler : DslModeling::DomainPropertyValueHandler<EventProperty, global::System.Boolean>
		{
			private IsEffectiveDatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the EventProperty.IsEffectiveDate domain property value handler.
			/// </summary>
			public static readonly IsEffectiveDatePropertyHandler Instance = new IsEffectiveDatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the EventProperty.IsEffectiveDate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEffectiveDateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EventProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isEffectiveDatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EventProperty element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEffectiveDatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region EventDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets EventDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventProperty
		/// </summary>
		public virtual EventDefinition EventDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventPropertyDomainRoleId) as EventDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass ProjectionProperty
	/// A property providing the data component of a projection
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("1b5f2aa3-d343-46a4-8dc0-7af37530b0db")]
	public partial class ProjectionProperty : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProjectionProperty domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1b5f2aa3, 0xd343, 0x46a4, 0x8d, 0xc0, 0x7a, 0xf3, 0x75, 0x30, 0xb0, 0xdb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProjectionProperty(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProjectionProperty(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2fed8a86, 0xa04c, 0x4809, 0x8e, 0xe6, 0xa9, 0xb7, 0xd2, 0x65, 0xd5, 0x1a);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for CQRSAzure.CQRSdsl.Dsl.ProjectionProperty.Name
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("2fed8a86-a04c-4809-8ee6-a9b7d265d51a")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionProperty.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionProperty, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionProperty.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionProperty.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x809018a6, 0x3eee, 0x4c10, 0x8a, 0xc2, 0x95, 0x40, 0xbd, 0x06, 0x24, 0x88);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The business description of this property of the projection
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("809018a6-3eee-4c10-8ac2-9540bd062488")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionProperty.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionProperty, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionProperty.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionProperty.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xe98d8c8d, 0x8e2c, 0x4173, 0x80, 0xe9, 0xfb, 0x3e, 0x94, 0x98, 0xca, 0x6d);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private PropertyDataType dataTypePropertyStorage = PropertyDataType.Integer;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// The data type backing this projection property definition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/DataType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/DataType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyDataType.Integer)]
		[DslModeling::DomainObjectId("e98d8c8d-8e2c-4173-80e9-fb3e9498ca6d")]
		public PropertyDataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionProperty.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionProperty, PropertyDataType>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionProperty.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionProperty.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyDataType GetValue(ProjectionProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionProperty element, PropertyDataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyDataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x24380e87, 0x145d, 0x4d69, 0xa5, 0x0e, 0xd1, 0x0f, 0x09, 0x5c, 0xd6, 0xb1);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for this projection property
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionProperty/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("24380e87-145d-4d69-a50e-d10f095cd6b1")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionProperty.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionProperty, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionProperty.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionProperty.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionProperty element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionProperty element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectionDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionProperty
		/// </summary>
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId) as ProjectionDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass CommandParameter
	/// A parameter passed along with a command definition
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("520af4e5-6118-4933-bd60-8c03c96d4f42")]
	public partial class CommandParameter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CommandParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x520af4e5, 0x6118, 0x4933, 0xbd, 0x60, 0x8c, 0x03, 0xc9, 0x6d, 0x4f, 0x42);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommandParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CommandParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x99b9c142, 0x89e5, 0x4243, 0xb7, 0xec, 0x5f, 0xf1, 0xbf, 0x1d, 0xd1, 0x19);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for CQRSAzure.CQRSdsl.Dsl.CommandParameter.Name
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("99b9c142-89e5-4243-b7ec-5ff1bf1dd119")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<CommandParameter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x398cfa6b, 0x91a3, 0x4f1a, 0x9e, 0x76, 0x25, 0x9c, 0xf4, 0xd4, 0x97, 0xac);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The business description of the command parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("398cfa6b-91a3-4f1a-9e76-259cf4d497ac")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandParameter.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandParameter, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandParameter.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandParameter.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParameterType domain property code
		
		/// <summary>
		/// ParameterType domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParameterTypeDomainPropertyId = new global::System.Guid(0x077c70e5, 0xe23b, 0x4df2, 0xb9, 0x18, 0x47, 0xf8, 0x72, 0x8b, 0x9a, 0x6c);
		
		/// <summary>
		/// Storage for ParameterType
		/// </summary>
		private PropertyDataType parameterTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ParameterType domain property.
		/// The backing data type for this parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/ParameterType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/ParameterType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("077c70e5-e23b-4df2-b918-47f8728b9a6c")]
		public PropertyDataType ParameterType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parameterTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParameterTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandParameter.ParameterType domain property.
		/// </summary>
		internal sealed partial class ParameterTypePropertyHandler : DslModeling::DomainPropertyValueHandler<CommandParameter, PropertyDataType>
		{
			private ParameterTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandParameter.ParameterType domain property value handler.
			/// </summary>
			public static readonly ParameterTypePropertyHandler Instance = new ParameterTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandParameter.ParameterType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParameterTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyDataType GetValue(CommandParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parameterTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandParameter element, PropertyDataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyDataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parameterTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xd32d04c8, 0x8bd8, 0x4a67, 0x84, 0xdf, 0x3c, 0xbe, 0xa1, 0x95, 0x2d, 0x89);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for the command input parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d32d04c8-8bd8-4a67-84df-3cbea1952d89")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandParameter.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandParameter, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandParameter.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandParameter.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(CommandParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAggregateKey domain property code
		
		/// <summary>
		/// IsAggregateKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAggregateKeyDomainPropertyId = new global::System.Guid(0xd1b40286, 0xc05e, 0x47e5, 0xba, 0x4b, 0x06, 0x7c, 0x3e, 0x9b, 0xcd, 0x47);
		
		/// <summary>
		/// Storage for IsAggregateKey
		/// </summary>
		private global::System.Boolean isAggregateKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAggregateKey domain property.
		/// Does this command parameter identify the aggregate that the command should apply
		/// to?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/IsAggregateKey.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/IsAggregateKey.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/IsAggregateKey.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d1b40286-c05e-47e5-ba4b-067c3e9bcd47")]
		public global::System.Boolean IsAggregateKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAggregateKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAggregateKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandParameter.IsAggregateKey domain property.
		/// </summary>
		internal sealed partial class IsAggregateKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<CommandParameter, global::System.Boolean>
		{
			private IsAggregateKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandParameter.IsAggregateKey domain property value handler.
			/// </summary>
			public static readonly IsAggregateKeyPropertyHandler Instance = new IsAggregateKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandParameter.IsAggregateKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAggregateKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CommandParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAggregateKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandParameter element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAggregateKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIdentityGroupName domain property code
		
		/// <summary>
		/// IsIdentityGroupName domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIdentityGroupNameDomainPropertyId = new global::System.Guid(0xc93c0d4e, 0x66a1, 0x4bd9, 0xb0, 0x08, 0x6c, 0x46, 0xd1, 0x36, 0xe4, 0xd4);
		
		/// <summary>
		/// Storage for IsIdentityGroupName
		/// </summary>
		private global::System.Boolean isIdentityGroupNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIdentityGroupName domain property.
		/// Does this command parameter identify the identity group that the command should
		/// apply to?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/IsIdentityGroupName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/IsIdentityGroupName.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CommandParameter/IsIdentityGroupName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c93c0d4e-66a1-4bd9-b008-6c46d136e4d4")]
		public global::System.Boolean IsIdentityGroupName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIdentityGroupNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIdentityGroupNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CommandParameter.IsIdentityGroupName domain property.
		/// </summary>
		internal sealed partial class IsIdentityGroupNamePropertyHandler : DslModeling::DomainPropertyValueHandler<CommandParameter, global::System.Boolean>
		{
			private IsIdentityGroupNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CommandParameter.IsIdentityGroupName domain property value handler.
			/// </summary>
			public static readonly IsIdentityGroupNamePropertyHandler Instance = new IsIdentityGroupNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CommandParameter.IsIdentityGroupName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIdentityGroupNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CommandParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIdentityGroupNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CommandParameter element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIdentityGroupNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CommandDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets CommandDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameter
		/// </summary>
		public virtual CommandDefinition CommandDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameterDomainRoleId) as CommandDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass QueryDefinition
	/// Definition of a query that can be executed against an aggregate identifier in
	/// this domain
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("4b891bb8-8eb6-41d0-8d6a-79125b91b74b")]
	public partial class QueryDefinition : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// QueryDefinition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4b891bb8, 0x8eb6, 0x41d0, 0x8d, 0x6a, 0x79, 0x12, 0x5b, 0x91, 0xb7, 0x4b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryDefinition(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryDefinition(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x54e04f71, 0x4233, 0x431d, 0x98, 0xc9, 0x64, 0xc3, 0x2a, 0x62, 0xe5, 0xa7);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for CQRSAzure.CQRSdsl.Dsl.QueryDefinition.Name
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("54e04f71-4233-431d-98c9-64c32a62e5a7")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinition.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinition, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinition.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinition.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xa7cfafbf, 0x27b3, 0x4aee, 0x9b, 0x48, 0x25, 0x8a, 0x37, 0x5f, 0x96, 0x01);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Business description of this query definition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a7cfafbf-27b3-4aee-9b48-258a375f9601")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinition.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinition, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinition.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinition.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MultiRowResults domain property code
		
		/// <summary>
		/// MultiRowResults domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiRowResultsDomainPropertyId = new global::System.Guid(0x97eab1fa, 0x0216, 0x473e, 0xa0, 0x01, 0x78, 0xca, 0x40, 0x70, 0x17, 0xdf);
		
		/// <summary>
		/// Storage for MultiRowResults
		/// </summary>
		private global::System.Boolean multiRowResultsPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of MultiRowResults domain property.
		/// Does the query return an array of results
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/MultiRowResults.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/MultiRowResults.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("97eab1fa-0216-473e-a001-78ca407017df")]
		public global::System.Boolean MultiRowResults
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiRowResultsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiRowResultsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinition.MultiRowResults domain property.
		/// </summary>
		internal sealed partial class MultiRowResultsPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinition, global::System.Boolean>
		{
			private MultiRowResultsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinition.MultiRowResults domain property value handler.
			/// </summary>
			public static readonly MultiRowResultsPropertyHandler Instance = new MultiRowResultsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinition.MultiRowResults domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiRowResultsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(QueryDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiRowResultsPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinition element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiRowResultsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xc5a44773, 0x5f9c, 0x4992, 0xa4, 0xbc, 0x1b, 0x97, 0x0e, 0xe0, 0xc0, 0x68);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional documentation for this query definition
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c5a44773-5f9c-4992-a4bc-1b970ee0c068")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinition.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinition, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinition.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinition.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x112231f5, 0x0c28, 0x4341, 0xb8, 0x8f, 0x9f, 0x13, 0x7b, 0xf2, 0x9a, 0xa3);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryDefinition/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("112231f5-0c28-4341-b88f-9f137bf29aa3")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryDefinition.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryDefinition, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryDefinition.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryDefinition.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryDefinition element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryDefinition element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateIdentifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinition
		/// </summary>
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId) as AggregateIdentifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region QueryInputParameters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of QueryInputParameters.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryInputParameter> QueryInputParameters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryInputParameter>, QueryInputParameter>(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId);
			}
		}
		#endregion
		#region QueryReturnParameters opposite domain role accessor
		
		/// <summary>
		/// Gets a list of QueryReturnParameters.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryReturnParameter> QueryReturnParameters
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryReturnParameter>, QueryReturnParameter>(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId);
			}
		}
		#endregion
		#region IdentityGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets IdentityGroup.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinition
		/// </summary>
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId) as IdentityGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region ProjectionDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinition
		/// </summary>
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId) as ProjectionDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter sourceQueryInputParameter1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter;
			if (sourceQueryInputParameter1 != null)
			{
				// Create link for path QueryDefinitionHasQueryInputParameters.QueryInputParameters
				this.QueryInputParameters.Add(sourceQueryInputParameter1);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter sourceQueryReturnParameter2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter;
			if (sourceQueryReturnParameter2 != null)
			{
				// Create link for path QueryDefinitionHasQueryReturnParameters.QueryReturnParameters
				this.QueryReturnParameters.Add(sourceQueryReturnParameter2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter sourceQueryInputParameter1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.QueryInputParameter;
			if (sourceQueryInputParameter1 != null)
			{
				// Delete link for path QueryDefinitionHasQueryInputParameters.QueryInputParameters
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition)this, sourceQueryInputParameter1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter sourceQueryReturnParameter2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter;
			if (sourceQueryReturnParameter2 != null)
			{
				// Delete link for path QueryDefinitionHasQueryReturnParameters.QueryReturnParameters
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.QueryDefinition)this, sourceQueryReturnParameter2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass QueryInputParameter
	/// A parameter to pass to a query
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9297dbdd-de1d-4bc3-ab44-53ec3003cafc")]
	public partial class QueryInputParameter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// QueryInputParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9297dbdd, 0xde1d, 0x4bc3, 0xab, 0x44, 0x53, 0xec, 0x30, 0x03, 0xca, 0xfc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryInputParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryInputParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8cd6127e, 0xf8d9, 0x4a21, 0xbe, 0x03, 0x9f, 0x01, 0x63, 0x28, 0x79, 0x64);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for CQRSAzure.CQRSdsl.Dsl.QueryInputParameter.Name
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8cd6127e-f8d9-4a21-be03-9f0163287964")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd340e32c, 0xfa4b, 0x446a, 0x9b, 0xce, 0xf6, 0x88, 0x90, 0xcb, 0x10, 0x16);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Business description of this query input parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d340e32c-fa4b-446a-9bce-f68890cb1016")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0x058b63a8, 0x2f79, 0x45c2, 0xb4, 0x10, 0x0b, 0x50, 0xb2, 0xdb, 0x40, 0x5c);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private PropertyDataType dataTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Backing data type of the input parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/DataType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/DataType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("058b63a8-2f79-45c2-b410-0b50b2db405c")]
		public PropertyDataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, PropertyDataType>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyDataType GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, PropertyDataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyDataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAggregateKey domain property code
		
		/// <summary>
		/// IsAggregateKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAggregateKeyDomainPropertyId = new global::System.Guid(0x371838f0, 0x7d84, 0x44f0, 0xa1, 0xb3, 0xcb, 0x8f, 0x2d, 0x2a, 0x49, 0x7a);
		
		/// <summary>
		/// Storage for IsAggregateKey
		/// </summary>
		private global::System.Boolean isAggregateKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAggregateKey domain property.
		/// Is this query parameter the unique key of the aggregate the query is to run
		/// against?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsAggregateKey.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsAggregateKey.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsAggregateKey.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("371838f0-7d84-44f0-a1b3-cb8f2d2a497a")]
		public global::System.Boolean IsAggregateKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAggregateKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAggregateKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.IsAggregateKey domain property.
		/// </summary>
		internal sealed partial class IsAggregateKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, global::System.Boolean>
		{
			private IsAggregateKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.IsAggregateKey domain property value handler.
			/// </summary>
			public static readonly IsAggregateKeyPropertyHandler Instance = new IsAggregateKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.IsAggregateKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAggregateKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAggregateKeyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAggregateKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x9356931b, 0xdf73, 0x42c5, 0xa7, 0x19, 0x86, 0xc4, 0xe1, 0xde, 0x2f, 0x72);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for the query input parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9356931b-df73-42c5-a719-86c4e1de2f72")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsEffectiveDate domain property code
		
		/// <summary>
		/// IsEffectiveDate domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsEffectiveDateDomainPropertyId = new global::System.Guid(0xfc68874a, 0xf57b, 0x40b7, 0x92, 0xf7, 0x32, 0x59, 0xfa, 0x34, 0x27, 0x97);
		
		/// <summary>
		/// Storage for IsEffectiveDate
		/// </summary>
		private global::System.Boolean isEffectiveDatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsEffectiveDate domain property.
		/// Is this parameter an "as-of" indicator to tell the query when to stop reading
		/// the underlying event stream?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsEffectiveDate.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsEffectiveDate.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fc68874a-f57b-40b7-92f7-3259fa342797")]
		public global::System.Boolean IsEffectiveDate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isEffectiveDatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsEffectiveDatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.IsEffectiveDate domain property.
		/// </summary>
		internal sealed partial class IsEffectiveDatePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, global::System.Boolean>
		{
			private IsEffectiveDatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.IsEffectiveDate domain property value handler.
			/// </summary>
			public static readonly IsEffectiveDatePropertyHandler Instance = new IsEffectiveDatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.IsEffectiveDate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsEffectiveDateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isEffectiveDatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isEffectiveDatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsIdentityGroupName domain property code
		
		/// <summary>
		/// IsIdentityGroupName domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIdentityGroupNameDomainPropertyId = new global::System.Guid(0x83753b78, 0x6642, 0x4e06, 0x8f, 0x77, 0x1c, 0xb1, 0x9d, 0x53, 0x6a, 0x85);
		
		/// <summary>
		/// Storage for IsIdentityGroupName
		/// </summary>
		private global::System.Boolean isIdentityGroupNamePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIdentityGroupName domain property.
		/// Is this query parameter the unique key of the identity group the query is to run
		/// against?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsIdentityGroupName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsIdentityGroupName.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryInputParameter/IsIdentityGroupName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("83753b78-6642-4e06-8f77-1cb19d536a85")]
		public global::System.Boolean IsIdentityGroupName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIdentityGroupNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIdentityGroupNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryInputParameter.IsIdentityGroupName domain property.
		/// </summary>
		internal sealed partial class IsIdentityGroupNamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryInputParameter, global::System.Boolean>
		{
			private IsIdentityGroupNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryInputParameter.IsIdentityGroupName domain property value handler.
			/// </summary>
			public static readonly IsIdentityGroupNamePropertyHandler Instance = new IsIdentityGroupNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryInputParameter.IsIdentityGroupName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIdentityGroupNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(QueryInputParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isIdentityGroupNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryInputParameter element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIdentityGroupNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region QueryDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets QueryDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameter
		/// </summary>
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId) as QueryDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass ProjectionEventPropertyOperation
	/// An operation to perform on a projection property when an event is handled by the
	/// projection
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5a0a5db7-8b56-49a4-afc4-51b42ad2e058")]
	public partial class ProjectionEventPropertyOperation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProjectionEventPropertyOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5a0a5db7, 0x8b56, 0x49a4, 0xaf, 0xc4, 0x51, 0xb4, 0x2a, 0xd2, 0xe0, 0x58);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProjectionEventPropertyOperation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProjectionEventPropertyOperation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EventName domain property code
		
		/// <summary>
		/// EventName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EventNameDomainPropertyId = new global::System.Guid(0xab9f4adb, 0x48b1, 0x4b79, 0x84, 0xe7, 0x90, 0x7c, 0x01, 0xd8, 0x66, 0x64);
		
		/// <summary>
		/// Storage for EventName
		/// </summary>
		private global::System.String eventNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EventName domain property.
		/// The name of the event that this property operation occurs in handling
		/// </summary>
		[System.ComponentModel.Editor(typeof(CQRSAzure.CQRSdsl.Dsl.CustomCode.UI.ProjectionPropertyOperationEventNameUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/EventName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/EventName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ab9f4adb-48b1-4b79-84e7-907c01d86664")]
		public global::System.String EventName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return eventNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EventNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionEventPropertyOperation.EventName domain property.
		/// </summary>
		internal sealed partial class EventNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionEventPropertyOperation, global::System.String>
		{
			private EventNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionEventPropertyOperation.EventName domain property value handler.
			/// </summary>
			public static readonly EventNamePropertyHandler Instance = new EventNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionEventPropertyOperation.EventName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EventNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionEventPropertyOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.eventNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionEventPropertyOperation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.eventNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceEventPropertyName domain property code
		
		/// <summary>
		/// SourceEventPropertyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceEventPropertyNameDomainPropertyId = new global::System.Guid(0xb5e68a29, 0x6f6f, 0x41e3, 0xb2, 0x34, 0x1e, 0xbd, 0xda, 0x87, 0x3d, 0xe5);
		
		/// <summary>
		/// Storage for SourceEventPropertyName
		/// </summary>
		private global::System.String sourceEventPropertyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceEventPropertyName domain property.
		/// The name of the property of the event (if any) used in the operation
		/// </summary>
		[System.ComponentModel.Editor(typeof(CQRSAzure.CQRSdsl.Dsl.CustomCode.UI.ProjectionPropertyOperationSourceFieldUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/SourceEventPropertyName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/SourceEventPropertyName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b5e68a29-6f6f-41e3-b234-1ebdda873de5")]
		public global::System.String SourceEventPropertyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceEventPropertyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceEventPropertyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionEventPropertyOperation.SourceEventPropertyName domain property.
		/// </summary>
		internal sealed partial class SourceEventPropertyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionEventPropertyOperation, global::System.String>
		{
			private SourceEventPropertyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionEventPropertyOperation.SourceEventPropertyName domain property value handler.
			/// </summary>
			public static readonly SourceEventPropertyNamePropertyHandler Instance = new SourceEventPropertyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionEventPropertyOperation.SourceEventPropertyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceEventPropertyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionEventPropertyOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceEventPropertyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionEventPropertyOperation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceEventPropertyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetPropertyName domain property code
		
		/// <summary>
		/// TargetPropertyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetPropertyNameDomainPropertyId = new global::System.Guid(0xa0e40c01, 0x4bce, 0x41c5, 0xa0, 0xc3, 0x5a, 0x31, 0xc2, 0x07, 0xee, 0x12);
		
		/// <summary>
		/// Storage for TargetPropertyName
		/// </summary>
		private global::System.String targetPropertyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetPropertyName domain property.
		/// The name of the projection property 
		/// </summary>
		[System.ComponentModel.Editor(typeof(CQRSAzure.CQRSdsl.Dsl.CustomCode.UI.ProjectionPropertyOperationTargetFieldUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/TargetPropertyName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/TargetPropertyName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a0e40c01-4bce-41c5-a0c3-5a31c207ee12")]
		public global::System.String TargetPropertyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetPropertyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetPropertyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionEventPropertyOperation.TargetPropertyName domain property.
		/// </summary>
		internal sealed partial class TargetPropertyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionEventPropertyOperation, global::System.String>
		{
			private TargetPropertyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionEventPropertyOperation.TargetPropertyName domain property value handler.
			/// </summary>
			public static readonly TargetPropertyNamePropertyHandler Instance = new TargetPropertyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionEventPropertyOperation.TargetPropertyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetPropertyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionEventPropertyOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetPropertyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionEventPropertyOperation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetPropertyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyOperationToPerform domain property code
		
		/// <summary>
		/// PropertyOperationToPerform domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyOperationToPerformDomainPropertyId = new global::System.Guid(0xa0993e7b, 0x4999, 0x4640, 0x88, 0x11, 0x4b, 0xfc, 0xb5, 0x0f, 0x2d, 0x7a);
		
		/// <summary>
		/// Storage for PropertyOperationToPerform
		/// </summary>
		private PropertyOperation propertyOperationToPerformPropertyStorage = PropertyOperation.SetToValue;
		
		/// <summary>
		/// Gets or sets the value of PropertyOperationToPerform domain property.
		/// What operation to perform to the target property of the projection
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/PropertyOperationToPerform.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/PropertyOperationToPerform.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyOperation.SetToValue)]
		[DslModeling::DomainObjectId("a0993e7b-4999-4640-8811-4bfcb50f2d7a")]
		public PropertyOperation PropertyOperationToPerform
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyOperationToPerformPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyOperationToPerformPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionEventPropertyOperation.PropertyOperationToPerform domain property.
		/// </summary>
		internal sealed partial class PropertyOperationToPerformPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionEventPropertyOperation, PropertyOperation>
		{
			private PropertyOperationToPerformPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionEventPropertyOperation.PropertyOperationToPerform domain property value handler.
			/// </summary>
			public static readonly PropertyOperationToPerformPropertyHandler Instance = new PropertyOperationToPerformPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionEventPropertyOperation.PropertyOperationToPerform domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyOperationToPerformDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyOperation GetValue(ProjectionEventPropertyOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyOperationToPerformPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionEventPropertyOperation element, PropertyOperation newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyOperation oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyOperationToPerformPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xf6d24ecc, 0x7603, 0x4b93, 0x9b, 0x1f, 0xc1, 0x63, 0x99, 0x35, 0x4f, 0x1e);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Optional comment to document the property operation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f6d24ecc-7603-4b93-9b1f-c16399354f1e")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionEventPropertyOperation.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionEventPropertyOperation, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionEventPropertyOperation.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionEventPropertyOperation.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionEventPropertyOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionEventPropertyOperation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x880b770e, 0xc1b1, 0x4d40, 0x91, 0x3f, 0x27, 0xda, 0x50, 0xf0, 0x0a, 0x38);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for this event property operation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ProjectionEventPropertyOperation/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("880b770e-c1b1-4d40-913f-27da50f00a38")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProjectionEventPropertyOperation.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<ProjectionEventPropertyOperation, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProjectionEventPropertyOperation.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProjectionEventPropertyOperation.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProjectionEventPropertyOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProjectionEventPropertyOperation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProjectionDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperation
		/// </summary>
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId) as ProjectionDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass QueryReturnParameter
	/// Description for CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("ad2fdb44-d3a1-4329-8a09-bf704e473e05")]
	public partial class QueryReturnParameter : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// QueryReturnParameter domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xad2fdb44, 0xd3a1, 0x4329, 0x8a, 0x09, 0xbf, 0x70, 0x4e, 0x47, 0x3e, 0x05);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryReturnParameter(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public QueryReturnParameter(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x54fb2a1b, 0x8b49, 0x4fa1, 0xa1, 0xea, 0xeb, 0x45, 0x04, 0x04, 0xd1, 0x59);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The name of the returned parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("54fb2a1b-8b49-4fa1-a1ea-eb450404d159")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryReturnParameter.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryReturnParameter, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryReturnParameter.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryReturnParameter.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryReturnParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryReturnParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xd252485c, 0xa64f, 0x45cd, 0x84, 0x0a, 0xac, 0x46, 0x72, 0x14, 0xa7, 0x61);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The business description of the returned parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d252485c-a64f-45cd-840a-ac467214a761")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryReturnParameter.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryReturnParameter, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryReturnParameter.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryReturnParameter.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryReturnParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryReturnParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xd224d8cd, 0x9b11, 0x46ea, 0x84, 0xf6, 0xe7, 0xe8, 0xa8, 0x1e, 0xdc, 0xb4);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private PropertyDataType dataTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// The base data type returned by the query
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/DataType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/DataType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d224d8cd-9b11-46ea-84f6-e7e8a81edcb4")]
		public PropertyDataType DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryReturnParameter.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<QueryReturnParameter, PropertyDataType>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryReturnParameter.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryReturnParameter.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyDataType GetValue(QueryReturnParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryReturnParameter element, PropertyDataType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyDataType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x29e81073, 0xc72c, 0x49af, 0x8c, 0xda, 0xab, 0x5d, 0xff, 0x9f, 0x9a, 0x8b);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for the query return parameter
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.QueryReturnParameter/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("29e81073-c72c-49af-8cda-ab5dff9f9a8b")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the QueryReturnParameter.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<QueryReturnParameter, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the QueryReturnParameter.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the QueryReturnParameter.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(QueryReturnParameter element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(QueryReturnParameter element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region QueryDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets QueryDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameter
		/// </summary>
		public virtual QueryDefinition QueryDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId) as QueryDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass IdentityGroup
	/// A collection of 0 or more aggregate identifiers that share a common attribute
	/// that denotes identity
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9fa1697d-48e7-4b70-afc0-8eb600d6fb6e")]
	public partial class IdentityGroup : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// IdentityGroup domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9fa1697d, 0x48e7, 0x4b70, 0xaf, 0xc0, 0x8e, 0xb6, 0x00, 0xd6, 0xfb, 0x6e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IdentityGroup(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public IdentityGroup(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsInstance domain property code
		
		/// <summary>
		/// IsInstance domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsInstanceDomainPropertyId = new global::System.Guid(0x61a22c40, 0x127d, 0x433c, 0x82, 0x17, 0x6a, 0x49, 0xb0, 0x6d, 0x4d, 0x82);
		
		/// <summary>
		/// Storage for IsInstance
		/// </summary>
		private global::System.Boolean isInstancePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsInstance domain property.
		/// Does this identity group identify one and only one aggregate identifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/IsInstance.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/IsInstance.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/IsInstance.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("61a22c40-127d-433c-8217-6a49b06d4d82")]
		public global::System.Boolean IsInstance
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isInstancePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsInstancePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.IsInstance domain property.
		/// </summary>
		internal sealed partial class IsInstancePropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.Boolean>
		{
			private IsInstancePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.IsInstance domain property value handler.
			/// </summary>
			public static readonly IsInstancePropertyHandler Instance = new IsInstancePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.IsInstance domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsInstanceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isInstancePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isInstancePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsGlobal domain property code
		
		/// <summary>
		/// IsGlobal domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsGlobalDomainPropertyId = new global::System.Guid(0x43bbddb4, 0x3366, 0x4755, 0x81, 0x71, 0xa2, 0x44, 0x68, 0xf4, 0xa6, 0x62);
		
		/// <summary>
		/// Storage for IsGlobal
		/// </summary>
		private global::System.Boolean isGlobalPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsGlobal domain property.
		/// Does this identity group include ALL known aggregate identifiers
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/IsGlobal.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/IsGlobal.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/IsGlobal.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("43bbddb4-3366-4755-8171-a24468f4a662")]
		public global::System.Boolean IsGlobal
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isGlobalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsGlobalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.IsGlobal domain property.
		/// </summary>
		internal sealed partial class IsGlobalPropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.Boolean>
		{
			private IsGlobalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.IsGlobal domain property value handler.
			/// </summary>
			public static readonly IsGlobalPropertyHandler Instance = new IsGlobalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.IsGlobal domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsGlobalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isGlobalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isGlobalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x5ec842fc, 0xa019, 0x4ee4, 0x93, 0x23, 0x9f, 0x92, 0x9a, 0x25, 0xdd, 0x68);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Unique name of the identity group
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("5ec842fc-a019-4ee4-9323-9f929a25dd68")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xfe769aae, 0xa147, 0x42f2, 0xa5, 0xb4, 0x80, 0xba, 0xe5, 0xfd, 0x0c, 0xe7);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The description of this identity group for documentation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fe769aae-a147-42f2-a5b4-80bae5fd0ce7")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0x558fa47e, 0x1e5c, 0x4aa3, 0x8b, 0x47, 0xb9, 0x42, 0xa9, 0xee, 0x0d, 0x38);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional documentation for the identity group
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("558fa47e-1e5c-4aa3-8b47-b942a9ee0d38")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x54acd334, 0x2c3e, 0x41da, 0x92, 0x29, 0x61, 0xf3, 0xda, 0x23, 0x5d, 0x3e);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("54acd334-2c3e-41da-9229-61f3da235d3e")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ParentName domain property code
		
		/// <summary>
		/// ParentName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParentNameDomainPropertyId = new global::System.Guid(0x552c895d, 0x1074, 0x48f8, 0x98, 0xab, 0x1c, 0x6e, 0x0d, 0xd2, 0x12, 0x47);
		
		/// <summary>
		/// Storage for ParentName
		/// </summary>
		private global::System.String parentNamePropertyStorage = "All";
		
		/// <summary>
		/// Gets or sets the value of ParentName domain property.
		/// The name of the group of which this group is a wholy contained subset
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/ParentName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/ParentName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("All")]
		[DslModeling::DomainObjectId("552c895d-1074-48f8-98ab-1c6e0dd21247")]
		public global::System.String ParentName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parentNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParentNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.ParentName domain property.
		/// </summary>
		internal sealed partial class ParentNamePropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.String>
		{
			private ParentNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.ParentName domain property value handler.
			/// </summary>
			public static readonly ParentNamePropertyHandler Instance = new ParentNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.ParentName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParentNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.parentNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parentNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CanSnapshot domain property code
		
		/// <summary>
		/// CanSnapshot domain property Id.
		/// </summary>
		public static readonly global::System.Guid CanSnapshotDomainPropertyId = new global::System.Guid(0x4e2a2722, 0xaac3, 0x4773, 0xac, 0xde, 0x41, 0xe0, 0x5f, 0x7e, 0x10, 0x52);
		
		/// <summary>
		/// Storage for CanSnapshot
		/// </summary>
		private global::System.Boolean canSnapshotPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of CanSnapshot domain property.
		/// Can a snapshot be taken of the members of this identity group?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/CanSnapshot.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroup/CanSnapshot.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("4e2a2722-aac3-4773-acde-41e05f7e1052")]
		public global::System.Boolean CanSnapshot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return canSnapshotPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CanSnapshotPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IdentityGroup.CanSnapshot domain property.
		/// </summary>
		internal sealed partial class CanSnapshotPropertyHandler : DslModeling::DomainPropertyValueHandler<IdentityGroup, global::System.Boolean>
		{
			private CanSnapshotPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IdentityGroup.CanSnapshot domain property value handler.
			/// </summary>
			public static readonly CanSnapshotPropertyHandler Instance = new CanSnapshotPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IdentityGroup.CanSnapshot domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CanSnapshotDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IdentityGroup element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.canSnapshotPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IdentityGroup element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.canSnapshotPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region QueryDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of QueryDefinitions.
		/// The identity group referenced by this query definition
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<QueryDefinition> QueryDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<QueryDefinition>, QueryDefinition>(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId);
			}
		}
		#endregion
		#region AggregateIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateIdentifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroup
		/// </summary>
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId) as AggregateIdentifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId, value);
			}
		}
		#endregion
		#region Classifier opposite domain role accessor
		/// <summary>
		/// Gets or sets Classifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroup
		/// </summary>
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId) as Classifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId, value);
			}
		}
		#endregion
		#region CommandDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of CommandDefinitions.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.IdentityGroup
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<CommandDefinition> CommandDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<CommandDefinition>, CommandDefinition>(global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass Classifier
	/// A specialised projection which classifies entities as being either in or out of
	/// a particular identity group
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d7d66aea-3f0b-451f-9730-da862a4d5368")]
	public partial class Classifier : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Classifier domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd7d66aea, 0x3f0b, 0x451f, 0x97, 0x30, 0xda, 0x86, 0x2a, 0x4d, 0x53, 0x68);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Classifier(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Classifier(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x2ca07bb0, 0x9e90, 0x44d4, 0x8a, 0xe9, 0x15, 0x09, 0xbe, 0xe8, 0xff, 0x9b);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// The unique name of the classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Name.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Name.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("2ca07bb0-9e90-44d4-8ae9-1509bee8ff9b")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Classifier.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Classifier, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Classifier.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Classifier.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Classifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Classifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x8d344989, 0xab9c, 0x48d7, 0x89, 0xff, 0xdc, 0x87, 0x56, 0xf0, 0x52, 0x64);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// The description of the aggregate identity classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Description.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("8d344989-ab9c-48d7-89ff-dc8756f05264")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Classifier.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<Classifier, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Classifier.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Classifier.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Classifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Classifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xb4d03fa1, 0xea49, 0x4455, 0x97, 0xfd, 0xb2, 0x4d, 0xbb, 0x1b, 0x60, 0xf2);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes for the aggregate identity classifier
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b4d03fa1-ea49-4455-97fd-b24dbb1b60f2")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Classifier.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<Classifier, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Classifier.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Classifier.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Classifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Classifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Category domain property code
		
		/// <summary>
		/// Category domain property Id.
		/// </summary>
		public static readonly global::System.Guid CategoryDomainPropertyId = new global::System.Guid(0x4030096f, 0x56f9, 0x41e1, 0xa1, 0xe4, 0x10, 0xe9, 0x88, 0xb1, 0x29, 0x19);
		
		/// <summary>
		/// Storage for Category
		/// </summary>
		private global::System.String categoryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Category domain property.
		/// A tag /category that can be applied to an entity
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Category.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier/Category.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("4030096f-56f9-41e1-a1e4-10e988b12919")]
		public global::System.String Category
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return categoryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CategoryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Classifier.Category domain property.
		/// </summary>
		internal sealed partial class CategoryPropertyHandler : DslModeling::DomainPropertyValueHandler<Classifier, global::System.String>
		{
			private CategoryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Classifier.Category domain property value handler.
			/// </summary>
			public static readonly CategoryPropertyHandler Instance = new CategoryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Classifier.Category domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CategoryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Classifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.categoryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Classifier element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.categoryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CanSnapshot domain property code
		
		/// <summary>
		/// CanSnapshot domain property Id.
		/// </summary>
		public static readonly global::System.Guid CanSnapshotDomainPropertyId = new global::System.Guid(0x312a49fa, 0x83c8, 0x4b98, 0xa8, 0x40, 0x7d, 0x8b, 0xd1, 0x83, 0x54, 0xea);
		
		/// <summary>
		/// Storage for CanSnapshot
		/// </summary>
		private global::System.Boolean canSnapshotPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of CanSnapshot domain property.
		/// Can a point-in-time snapshot be taken by this classifier?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier/CanSnapshot.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier/CanSnapshot.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("312a49fa-83c8-4b98-a840-7d8bd18354ea")]
		public global::System.Boolean CanSnapshot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return canSnapshotPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CanSnapshotPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Classifier.CanSnapshot domain property.
		/// </summary>
		internal sealed partial class CanSnapshotPropertyHandler : DslModeling::DomainPropertyValueHandler<Classifier, global::System.Boolean>
		{
			private CanSnapshotPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Classifier.CanSnapshot domain property value handler.
			/// </summary>
			public static readonly CanSnapshotPropertyHandler Instance = new CanSnapshotPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Classifier.CanSnapshot domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CanSnapshotDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Classifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.canSnapshotPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Classifier element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.canSnapshotPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DataSourceType domain property code
		
		/// <summary>
		/// DataSourceType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataSourceTypeDomainPropertyId = new global::System.Guid(0xbf2ce696, 0x5457, 0x43db, 0xa7, 0x94, 0x9a, 0xf0, 0xfe, 0x06, 0x9c, 0x4e);
		
		/// <summary>
		/// Storage for DataSourceType
		/// </summary>
		private ClassifierDataSourceType dataSourceTypePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DataSourceType domain property.
		/// Does the data for the classifier come directly from an event stream or from a
		/// projection?
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.Classifier/DataSourceType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.Classifier/DataSourceType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("bf2ce696-5457-43db-a794-9af0fe069c4e")]
		public ClassifierDataSourceType DataSourceType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataSourceTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataSourceTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Classifier.DataSourceType domain property.
		/// </summary>
		internal sealed partial class DataSourceTypePropertyHandler : DslModeling::DomainPropertyValueHandler<Classifier, ClassifierDataSourceType>
		{
			private DataSourceTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Classifier.DataSourceType domain property value handler.
			/// </summary>
			public static readonly DataSourceTypePropertyHandler Instance = new DataSourceTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Classifier.DataSourceType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataSourceTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed ClassifierDataSourceType GetValue(Classifier element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.dataSourceTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Classifier element, ClassifierDataSourceType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				ClassifierDataSourceType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataSourceTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region AggregateIdentifier opposite domain role accessor
		/// <summary>
		/// Gets or sets AggregateIdentifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.Classifier
		/// </summary>
		public virtual AggregateIdentifier AggregateIdentifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.ClassifierDomainRoleId) as AggregateIdentifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.ClassifierDomainRoleId, value);
			}
		}
		#endregion
		#region IdentityGroup opposite domain role accessor
		/// <summary>
		/// Gets or sets IdentityGroup.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.Classifier
		/// </summary>
		public virtual IdentityGroup IdentityGroup
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.ClassifierDomainRoleId) as IdentityGroup;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.IdentityGroupReferencesClassifier.ClassifierDomainRoleId, value);
			}
		}
		#endregion
		#region EventDefinitions opposite domain role accessor
		
		/// <summary>
		/// Gets a list of EventDefinitions.
		/// Description for CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.Classifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<EventDefinition> EventDefinitions
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<EventDefinition>, EventDefinition>(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHandlesEvents.ClassifierDomainRoleId);
			}
		}
		#endregion
		#region ClassifierEventEvaluations opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ClassifierEventEvaluations.
		/// Description for CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.Classifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClassifierEventEvaluation> ClassifierEventEvaluations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ClassifierEventEvaluation>, ClassifierEventEvaluation>(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierDomainRoleId);
			}
		}
		#endregion
		#region ProjectionDefinition opposite domain role accessor
		/// <summary>
		/// Gets or sets ProjectionDefinition.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ClassifierReferencesProjectionDefinition.Classifier
		/// </summary>
		public virtual ProjectionDefinition ProjectionDefinition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierReferencesProjectionDefinition.ClassifierDomainRoleId) as ProjectionDefinition;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierReferencesProjectionDefinition.ClassifierDomainRoleId, value);
			}
		}
		#endregion
		#region ClassifierProjectionPropertyEvaluations opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ClassifierProjectionPropertyEvaluations.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.Classifier
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClassifierProjectionPropertyEvaluation> ClassifierProjectionPropertyEvaluations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ClassifierProjectionPropertyEvaluation>, ClassifierProjectionPropertyEvaluation>(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation sourceClassifierEventEvaluation1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation;
			if (sourceClassifierEventEvaluation1 != null)
			{
				// Create link for path ClassifierHasEventEvaluations.ClassifierEventEvaluations
				this.ClassifierEventEvaluations.Add(sourceClassifierEventEvaluation1);

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation sourceClassifierProjectionPropertyEvaluation2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation;
			if (sourceClassifierProjectionPropertyEvaluation2 != null)
			{
				// Create link for path ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierProjectionPropertyEvaluations
				this.ClassifierProjectionPropertyEvaluations.Add(sourceClassifierProjectionPropertyEvaluation2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation sourceClassifierEventEvaluation1 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation;
			if (sourceClassifierEventEvaluation1 != null)
			{
				// Delete link for path ClassifierHasEventEvaluations.ClassifierEventEvaluations
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.Classifier)this, sourceClassifierEventEvaluation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId);
				}

				return;
			}
				
			global::CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation sourceClassifierProjectionPropertyEvaluation2 = sourceElement as global::CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation;
			if (sourceClassifierProjectionPropertyEvaluation2 != null)
			{
				// Delete link for path ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierProjectionPropertyEvaluations
				
				foreach (DslModeling::ElementLink link in global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.GetLinks((global::CQRSAzure.CQRSdsl.Dsl.Classifier)this, sourceClassifierProjectionPropertyEvaluation2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierDomainRoleId, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierProjectionPropertyEvaluationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass ClassifierEventEvaluation
	/// An evaluation to perform when an event is encountered to decide if an identity
	/// is or is not a member of an identity group
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e2e7196c-d1c1-48bf-9e7f-ead7b718bbb9")]
	public partial class ClassifierEventEvaluation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassifierEventEvaluation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe2e7196c, 0xd1c1, 0x48bf, 0x9e, 0x7f, 0xea, 0xd7, 0xb7, 0x18, 0xbb, 0xb9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassifierEventEvaluation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassifierEventEvaluation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region EventName domain property code
		
		/// <summary>
		/// EventName domain property Id.
		/// </summary>
		public static readonly global::System.Guid EventNameDomainPropertyId = new global::System.Guid(0xf946a237, 0xdd8b, 0x4291, 0x9b, 0xc4, 0xe8, 0xd5, 0x34, 0x3f, 0xc9, 0x55);
		
		/// <summary>
		/// Storage for EventName
		/// </summary>
		private global::System.String eventNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of EventName domain property.
		/// The name of the event the classifier is handling
		/// </summary>
		[System.ComponentModel.Editor(typeof(CQRSAzure.CQRSdsl.Dsl.CustomCode.UI.ClassifierEventEvaluationEventNameUITypeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/EventName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/EventName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f946a237-dd8b-4291-9bc4-e8d5343fc955")]
		public global::System.String EventName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return eventNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EventNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.EventName domain property.
		/// </summary>
		internal sealed partial class EventNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, global::System.String>
		{
			private EventNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.EventName domain property value handler.
			/// </summary>
			public static readonly EventNamePropertyHandler Instance = new EventNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.EventName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EventNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.eventNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.eventNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceEventPropertyName domain property code
		
		/// <summary>
		/// SourceEventPropertyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceEventPropertyNameDomainPropertyId = new global::System.Guid(0x22945350, 0x583c, 0x4a39, 0xa8, 0x69, 0xa4, 0x76, 0x74, 0x96, 0x76, 0x60);
		
		/// <summary>
		/// Storage for SourceEventPropertyName
		/// </summary>
		private global::System.String sourceEventPropertyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceEventPropertyName domain property.
		/// The property of the event that is to be evaluated
		/// </summary>
		[System.ComponentModel.Editor(typeof(CQRSAzure.CQRSdsl.Dsl.CustomCode.UI.ClassifierEventSourceEventPropertyNameUITypeEditor ), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/SourceEventPropertyName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/SourceEventPropertyName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("22945350-583c-4a39-a869-a47674967660")]
		public global::System.String SourceEventPropertyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceEventPropertyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceEventPropertyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.SourceEventPropertyName domain property.
		/// </summary>
		internal sealed partial class SourceEventPropertyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, global::System.String>
		{
			private SourceEventPropertyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.SourceEventPropertyName domain property value handler.
			/// </summary>
			public static readonly SourceEventPropertyNamePropertyHandler Instance = new SourceEventPropertyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.SourceEventPropertyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceEventPropertyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceEventPropertyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceEventPropertyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xeecfb060, 0x6a83, 0x48d1, 0xb1, 0x82, 0xc4, 0xca, 0x33, 0x97, 0x12, 0xbc);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes pertaining to this classifier event evaluation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Notes.Category", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("eecfb060-6a83-48d1-b182-c4ca339712bc")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0xb822fe64, 0x6c98, 0x480d, 0x9d, 0xd2, 0xe0, 0xf6, 0x86, 0xce, 0xc8, 0x68);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description of this classifier event evaluation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b822fe64-6c98-480d-9dd2-e0f686cec868")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyEvaluationToPerform domain property code
		
		/// <summary>
		/// PropertyEvaluationToPerform domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyEvaluationToPerformDomainPropertyId = new global::System.Guid(0x5e7d6453, 0xab52, 0x444f, 0x8f, 0x53, 0x88, 0x07, 0xf2, 0xd2, 0x73, 0x11);
		
		/// <summary>
		/// Storage for PropertyEvaluationToPerform
		/// </summary>
		private PropertyEvaluation propertyEvaluationToPerformPropertyStorage = PropertyEvaluation.Always;
		
		/// <summary>
		/// Gets or sets the value of PropertyEvaluationToPerform domain property.
		/// The evaluation to perform on the event property when the event is handled
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/PropertyEvaluationToPerform.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/PropertyEvaluationToPerform.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyEvaluation.Always)]
		[DslModeling::DomainObjectId("5e7d6453-ab52-444f-8f53-8807f2d27311")]
		public PropertyEvaluation PropertyEvaluationToPerform
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyEvaluationToPerformPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyEvaluationToPerformPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.PropertyEvaluationToPerform domain property.
		/// </summary>
		internal sealed partial class PropertyEvaluationToPerformPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, PropertyEvaluation>
		{
			private PropertyEvaluationToPerformPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.PropertyEvaluationToPerform domain property value handler.
			/// </summary>
			public static readonly PropertyEvaluationToPerformPropertyHandler Instance = new PropertyEvaluationToPerformPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.PropertyEvaluationToPerform domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyEvaluationToPerformDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyEvaluation GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyEvaluationToPerformPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, PropertyEvaluation newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyEvaluation oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyEvaluationToPerformPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OnTrue domain property code
		
		/// <summary>
		/// OnTrue domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnTrueDomainPropertyId = new global::System.Guid(0xcbf63e04, 0x7bcb, 0x4184, 0xa1, 0xed, 0x71, 0x31, 0xcc, 0x88, 0x94, 0x13);
		
		/// <summary>
		/// Storage for OnTrue
		/// </summary>
		private IdentityGroupClassification onTruePropertyStorage = IdentityGroupClassification.Include;
		
		/// <summary>
		/// Gets or sets the value of OnTrue domain property.
		/// What the property evaluating to true means to the identity group
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/OnTrue.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/OnTrue.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityGroupClassification.Include)]
		[DslModeling::DomainObjectId("cbf63e04-7bcb-4184-a1ed-7131cc889413")]
		public IdentityGroupClassification OnTrue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return onTruePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OnTruePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.OnTrue domain property.
		/// </summary>
		internal sealed partial class OnTruePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, IdentityGroupClassification>
		{
			private OnTruePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.OnTrue domain property value handler.
			/// </summary>
			public static readonly OnTruePropertyHandler Instance = new OnTruePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.OnTrue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OnTrueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityGroupClassification GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.onTruePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, IdentityGroupClassification newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityGroupClassification oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.onTruePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OnFalse domain property code
		
		/// <summary>
		/// OnFalse domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnFalseDomainPropertyId = new global::System.Guid(0x8c4a0eb9, 0xa64f, 0x48a0, 0xb4, 0xb4, 0x43, 0x3a, 0x92, 0xa4, 0xeb, 0x18);
		
		/// <summary>
		/// Storage for OnFalse
		/// </summary>
		private IdentityGroupClassification onFalsePropertyStorage = IdentityGroupClassification.Exclude;
		
		/// <summary>
		/// Gets or sets the value of OnFalse domain property.
		/// What happens to group membership if this property evaluates to false
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/OnFalse.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/OnFalse.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityGroupClassification.Exclude)]
		[DslModeling::DomainObjectId("8c4a0eb9-a64f-48a0-b4b4-433a92a4eb18")]
		public IdentityGroupClassification OnFalse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return onFalsePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OnFalsePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.OnFalse domain property.
		/// </summary>
		internal sealed partial class OnFalsePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, IdentityGroupClassification>
		{
			private OnFalsePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.OnFalse domain property value handler.
			/// </summary>
			public static readonly OnFalsePropertyHandler Instance = new OnFalsePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.OnFalse domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OnFalseDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityGroupClassification GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.onFalsePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, IdentityGroupClassification newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityGroupClassification oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.onFalsePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Target domain property code
		
		/// <summary>
		/// Target domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainPropertyId = new global::System.Guid(0x9aa691ae, 0x91db, 0x4703, 0xa3, 0xdb, 0x15, 0x19, 0x9b, 0x53, 0x66, 0xac);
		
		/// <summary>
		/// Storage for Target
		/// </summary>
		private global::System.String targetPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Target domain property.
		/// What the property value is being evaluated against
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Target.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/Target.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9aa691ae-91db-4703-a3db-15199b5366ac")]
		public global::System.String Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.Target domain property.
		/// </summary>
		internal sealed partial class TargetPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, global::System.String>
		{
			private TargetPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.Target domain property value handler.
			/// </summary>
			public static readonly TargetPropertyHandler Instance = new TargetPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.Target domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetType domain property code
		
		/// <summary>
		/// TargetType domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetTypeDomainPropertyId = new global::System.Guid(0x580bb78e, 0x2259, 0x430c, 0xbc, 0xf8, 0x69, 0x2a, 0xb2, 0x4d, 0x16, 0xd1);
		
		/// <summary>
		/// Storage for TargetType
		/// </summary>
		private EvaluationTargetType targetTypePropertyStorage = EvaluationTargetType.Constant;
		
		/// <summary>
		/// Gets or sets the value of TargetType domain property.
		/// What is represented by the evaluation target
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/TargetType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierEventEvaluation/TargetType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EvaluationTargetType.Constant)]
		[DslModeling::DomainObjectId("580bb78e-2259-430c-bcf8-692ab24d16d1")]
		public EvaluationTargetType TargetType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierEventEvaluation.TargetType domain property.
		/// </summary>
		internal sealed partial class TargetTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierEventEvaluation, EvaluationTargetType>
		{
			private TargetTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierEventEvaluation.TargetType domain property value handler.
			/// </summary>
			public static readonly TargetTypePropertyHandler Instance = new TargetTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierEventEvaluation.TargetType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EvaluationTargetType GetValue(ClassifierEventEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierEventEvaluation element, EvaluationTargetType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EvaluationTargetType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Classifier opposite domain role accessor
		/// <summary>
		/// Gets or sets Classifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluation
		/// </summary>
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId) as Classifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainClass ClassifierProjectionPropertyEvaluation
	/// Evaluation to perform on a property of a projection
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d26c9d9c-8a3d-4425-a7ca-7acebf4cd59b")]
	public partial class ClassifierProjectionPropertyEvaluation : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassifierProjectionPropertyEvaluation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd26c9d9c, 0x8a3d, 0x4425, 0xa7, 0xca, 0x7a, 0xce, 0xbf, 0x4c, 0xd5, 0x9b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassifierProjectionPropertyEvaluation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassifierProjectionPropertyEvaluation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region PropertyName domain property code
		
		/// <summary>
		/// PropertyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyNameDomainPropertyId = new global::System.Guid(0x88b64e0b, 0xdfc3, 0x4c8a, 0xb9, 0xe2, 0x20, 0x90, 0x39, 0xe1, 0x36, 0x1f);
		
		/// <summary>
		/// Storage for PropertyName
		/// </summary>
		private global::System.String propertyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of PropertyName domain property.
		/// The name of the projection property to test
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/PropertyName.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/PropertyName.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("88b64e0b-dfc3-4c8a-b9e2-209039e1361f")]
		public global::System.String PropertyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.PropertyName domain property.
		/// </summary>
		internal sealed partial class PropertyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, global::System.String>
		{
			private PropertyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.PropertyName domain property value handler.
			/// </summary>
			public static readonly PropertyNamePropertyHandler Instance = new PropertyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.PropertyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Notes domain property code
		
		/// <summary>
		/// Notes domain property Id.
		/// </summary>
		public static readonly global::System.Guid NotesDomainPropertyId = new global::System.Guid(0xa699b460, 0x4bba, 0x4483, 0xaa, 0x45, 0x64, 0x9a, 0x4f, 0x2e, 0x3f, 0x5e);
		
		/// <summary>
		/// Storage for Notes
		/// </summary>
		private global::System.String notesPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Notes domain property.
		/// Additional notes pertaining to this classifier projection property evaluation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/Notes.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/Notes.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a699b460-4bba-4483-aa45-649a4f2e3f5e")]
		public global::System.String Notes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return notesPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NotesPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.Notes domain property.
		/// </summary>
		internal sealed partial class NotesPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, global::System.String>
		{
			private NotesPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.Notes domain property value handler.
			/// </summary>
			public static readonly NotesPropertyHandler Instance = new NotesPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.Notes domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NotesDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.notesPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.notesPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x87508252, 0xbdb3, 0x4349, 0x83, 0x6e, 0xdb, 0x5a, 0x4a, 0xaa, 0xd9, 0x1f);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// Description of this classifier projection property evaluation
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/Description.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/Description.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("87508252-bdb3-4349-836e-db5a4aaad91f")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region PropertyEvaluationToPerform domain property code
		
		/// <summary>
		/// PropertyEvaluationToPerform domain property Id.
		/// </summary>
		public static readonly global::System.Guid PropertyEvaluationToPerformDomainPropertyId = new global::System.Guid(0xefce8e43, 0x3c74, 0x4e24, 0xae, 0xdd, 0x0b, 0x0e, 0x8f, 0x9c, 0xe1, 0x39);
		
		/// <summary>
		/// Storage for PropertyEvaluationToPerform
		/// </summary>
		private PropertyEvaluation propertyEvaluationToPerformPropertyStorage = PropertyEvaluation.Always;
		
		/// <summary>
		/// Gets or sets the value of PropertyEvaluationToPerform domain property.
		/// The evaluation to perform on the projection property
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/PropertyEvaluationToPerform.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/PropertyEvaluationToPerform.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(PropertyEvaluation.Always)]
		[DslModeling::DomainObjectId("efce8e43-3c74-4e24-aedd-0b0e8f9ce139")]
		public PropertyEvaluation PropertyEvaluationToPerform
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return propertyEvaluationToPerformPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PropertyEvaluationToPerformPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.PropertyEvaluationToPerform domain property.
		/// </summary>
		internal sealed partial class PropertyEvaluationToPerformPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, PropertyEvaluation>
		{
			private PropertyEvaluationToPerformPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.PropertyEvaluationToPerform domain property value handler.
			/// </summary>
			public static readonly PropertyEvaluationToPerformPropertyHandler Instance = new PropertyEvaluationToPerformPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.PropertyEvaluationToPerform domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PropertyEvaluationToPerformDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed PropertyEvaluation GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.propertyEvaluationToPerformPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, PropertyEvaluation newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				PropertyEvaluation oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.propertyEvaluationToPerformPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OnTrue domain property code
		
		/// <summary>
		/// OnTrue domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnTrueDomainPropertyId = new global::System.Guid(0x448ad410, 0xdbaf, 0x4523, 0xa0, 0x4f, 0x8c, 0x00, 0x46, 0xe9, 0x58, 0xc1);
		
		/// <summary>
		/// Storage for OnTrue
		/// </summary>
		private IdentityGroupClassification onTruePropertyStorage = IdentityGroupClassification.Include;
		
		/// <summary>
		/// Gets or sets the value of OnTrue domain property.
		/// What the property evaluating to true means to the identity group
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/OnTrue.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/OnTrue.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityGroupClassification.Include)]
		[DslModeling::DomainObjectId("448ad410-dbaf-4523-a04f-8c0046e958c1")]
		public IdentityGroupClassification OnTrue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return onTruePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OnTruePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.OnTrue domain property.
		/// </summary>
		internal sealed partial class OnTruePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, IdentityGroupClassification>
		{
			private OnTruePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.OnTrue domain property value handler.
			/// </summary>
			public static readonly OnTruePropertyHandler Instance = new OnTruePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.OnTrue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OnTrueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityGroupClassification GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.onTruePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, IdentityGroupClassification newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityGroupClassification oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.onTruePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region OnFalse domain property code
		
		/// <summary>
		/// OnFalse domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnFalseDomainPropertyId = new global::System.Guid(0xcbf5d77e, 0xd5f1, 0x4ede, 0x9f, 0x4e, 0x21, 0x3c, 0xa9, 0x86, 0xc0, 0x7c);
		
		/// <summary>
		/// Storage for OnFalse
		/// </summary>
		private IdentityGroupClassification onFalsePropertyStorage = IdentityGroupClassification.Exclude;
		
		/// <summary>
		/// Gets or sets the value of OnFalse domain property.
		/// What happens to group membership if this property evaluates to false
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/OnFalse.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/OnFalse.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityGroupClassification.Exclude)]
		[DslModeling::DomainObjectId("cbf5d77e-d5f1-4ede-9f4e-213ca986c07c")]
		public IdentityGroupClassification OnFalse
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return onFalsePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OnFalsePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.OnFalse domain property.
		/// </summary>
		internal sealed partial class OnFalsePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, IdentityGroupClassification>
		{
			private OnFalsePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.OnFalse domain property value handler.
			/// </summary>
			public static readonly OnFalsePropertyHandler Instance = new OnFalsePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.OnFalse domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OnFalseDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityGroupClassification GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.onFalsePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, IdentityGroupClassification newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityGroupClassification oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.onFalsePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Target domain property code
		
		/// <summary>
		/// Target domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainPropertyId = new global::System.Guid(0x11e7c87b, 0xd615, 0x4f67, 0xbd, 0x2f, 0xd6, 0x53, 0x29, 0xc3, 0xdf, 0xa3);
		
		/// <summary>
		/// Storage for Target
		/// </summary>
		private global::System.String targetPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Target domain property.
		/// What the property value is being evaluated against
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/Target.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/Target.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("11e7c87b-d615-4f67-bd2f-d65329c3dfa3")]
		public global::System.String Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.Target domain property.
		/// </summary>
		internal sealed partial class TargetPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, global::System.String>
		{
			private TargetPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.Target domain property value handler.
			/// </summary>
			public static readonly TargetPropertyHandler Instance = new TargetPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.Target domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetType domain property code
		
		/// <summary>
		/// TargetType domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetTypeDomainPropertyId = new global::System.Guid(0x89b5c07f, 0xfdd1, 0x49c9, 0xa4, 0x4f, 0xb5, 0x03, 0x9c, 0xab, 0xda, 0x21);
		
		/// <summary>
		/// Storage for TargetType
		/// </summary>
		private EvaluationTargetType targetTypePropertyStorage = EvaluationTargetType.Constant;
		
		/// <summary>
		/// Gets or sets the value of TargetType domain property.
		/// What is represented by the evaluation target
		/// </summary>
		[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/TargetType.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.ClassifierProjectionPropertyEvaluation/TargetType.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(EvaluationTargetType.Constant)]
		[DslModeling::DomainObjectId("89b5c07f-fdd1-49c9-a44f-b5039cabda21")]
		public EvaluationTargetType TargetType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassifierProjectionPropertyEvaluation.TargetType domain property.
		/// </summary>
		internal sealed partial class TargetTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ClassifierProjectionPropertyEvaluation, EvaluationTargetType>
		{
			private TargetTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassifierProjectionPropertyEvaluation.TargetType domain property value handler.
			/// </summary>
			public static readonly TargetTypePropertyHandler Instance = new TargetTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassifierProjectionPropertyEvaluation.TargetType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed EvaluationTargetType GetValue(ClassifierProjectionPropertyEvaluation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassifierProjectionPropertyEvaluation element, EvaluationTargetType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				EvaluationTargetType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Classifier opposite domain role accessor
		/// <summary>
		/// Gets or sets Classifier.
		/// Description for
		/// CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierProjectionPropertyEvaluation
		/// </summary>
		public virtual Classifier Classifier
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierProjectionPropertyEvaluationDomainRoleId) as Classifier;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasClassifierProjectionPropertyEvaluations.ClassifierProjectionPropertyEvaluationDomainRoleId, value);
			}
		}
		#endregion
	}
}
