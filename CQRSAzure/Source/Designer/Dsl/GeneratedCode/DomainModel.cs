//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainModel CQRSdslDomainModel
	/// Domain Specific Language for creating CQRS/ES domains
	/// </summary>
	[DslDesign::DisplayNameResource("CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel.DisplayName", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("2bad020f-9a7d-4ffa-8cc1-6050f57b0191")]
	public partial class CQRSdslDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// CQRSdslDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x2bad020f, 0x9a7d, 0x4ffa, 0x8c, 0xc1, 0x60, 0x50, 0xf5, 0x7b, 0x01, 0x91);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public CQRSdslDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(CQRSModel),
				typeof(AggregateIdentifier),
				typeof(EventDefinition),
				typeof(ProjectionDefinition),
				typeof(CommandDefinition),
				typeof(EventProperty),
				typeof(ProjectionProperty),
				typeof(CommandParameter),
				typeof(QueryDefinition),
				typeof(QueryInputParameter),
				typeof(ProjectionEventPropertyOperation),
				typeof(QueryReturnParameter),
				typeof(ModelSetting),
				typeof(IdentityGroup),
				typeof(Classifier),
				typeof(ClassifierEventEvaluation),
				typeof(CQRSModelHasAggregateIdentifiers),
				typeof(AggregateIdentifierHasEventDefinitions),
				typeof(AggregateIdentifierHasProjectionDefinitions),
				typeof(AggregateIdentifierIsChildOfTargetAggregateIdentifiers),
				typeof(AggregateIdentifierHasCommandDefinitions),
				typeof(EventDefinitionHasEventProperties),
				typeof(ProjectionDefinitionHasProjectionProperties),
				typeof(CommandDefinitionHasParameters),
				typeof(AggregateIdentifierHasQueryDefinitions),
				typeof(QueryDefinitionHasQueryInputParameters),
				typeof(ProjectionDefinitionHandlesEventDefinitions),
				typeof(ProjectionDefinitionHasEventPropertyOperations),
				typeof(QueryDefinitionHasQueryReturnParameters),
				typeof(CQRSModelHasModelSet),
				typeof(QueryDefinitionReferencesIdentityGroup),
				typeof(AggregateIdentifierHasIdentityGrouped),
				typeof(AggregateIdentifierHasClassifiers),
				typeof(IdentityGroupReferencesClassifier),
				typeof(ClassifierHandlesEvents),
				typeof(ClassifierHasEventEvaluations),
				typeof(CommandDefinitionReferencesIdentityGroup),
				typeof(QueryDefinitionReferencesProjectionDefinition),
				typeof(CQRSdslDiagram),
				typeof(AggregateParenthoodConnector),
				typeof(AggregateEventConnector),
				typeof(AggregateProjectionConnector),
				typeof(AggregateQueryDefinitionConnector),
				typeof(AggregateCommandDefinitionConnector),
				typeof(ProjectionEventConnector),
				typeof(AggregateIdentityGroupConnector),
				typeof(IdentityGroupClassifierConnector),
				typeof(ClassifierEventConnector),
				typeof(AggregateGeometryShape),
				typeof(IdentityGroupGeometryShape),
				typeof(QueryDefinitionShape),
				typeof(EventDefinitionCompartmentShape),
				typeof(ProjectionDefinitionCompartmentShape),
				typeof(CommandDefinitionCompartmentShape),
				typeof(ClassifierCompartmentShape),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.FixUpDiagram),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.DecoratorPropertyChanged),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.ConnectorRolePlayerChanged),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemAddRule),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemDeleteRule),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemRolePlayerChangeRule),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(CQRSModel), "Name", CQRSModel.NameDomainPropertyId, typeof(CQRSModel.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CQRSModel), "Notes", CQRSModel.NotesDomainPropertyId, typeof(CQRSModel.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(CQRSModel), "Description", CQRSModel.DescriptionDomainPropertyId, typeof(CQRSModel.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifier), "Name", AggregateIdentifier.NameDomainPropertyId, typeof(AggregateIdentifier.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifier), "Description", AggregateIdentifier.DescriptionDomainPropertyId, typeof(AggregateIdentifier.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifier), "KeyName", AggregateIdentifier.KeyNameDomainPropertyId, typeof(AggregateIdentifier.KeyNamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifier), "KeyDataType", AggregateIdentifier.KeyDataTypeDomainPropertyId, typeof(AggregateIdentifier.KeyDataTypePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifier), "Notes", AggregateIdentifier.NotesDomainPropertyId, typeof(AggregateIdentifier.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifier), "Category", AggregateIdentifier.CategoryDomainPropertyId, typeof(AggregateIdentifier.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinition), "Name", EventDefinition.NameDomainPropertyId, typeof(EventDefinition.NamePropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinition), "Description", EventDefinition.DescriptionDomainPropertyId, typeof(EventDefinition.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinition), "Notes", EventDefinition.NotesDomainPropertyId, typeof(EventDefinition.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinition), "Version", EventDefinition.VersionDomainPropertyId, typeof(EventDefinition.VersionPropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinition), "Category", EventDefinition.CategoryDomainPropertyId, typeof(EventDefinition.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinition), "Name", ProjectionDefinition.NameDomainPropertyId, typeof(ProjectionDefinition.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinition), "Description", ProjectionDefinition.DescriptionDomainPropertyId, typeof(ProjectionDefinition.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinition), "Notes", ProjectionDefinition.NotesDomainPropertyId, typeof(ProjectionDefinition.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinition), "Category", ProjectionDefinition.CategoryDomainPropertyId, typeof(ProjectionDefinition.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(CommandDefinition), "Name", CommandDefinition.NameDomainPropertyId, typeof(CommandDefinition.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CommandDefinition), "Description", CommandDefinition.DescriptionDomainPropertyId, typeof(CommandDefinition.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(CommandDefinition), "Notes", CommandDefinition.NotesDomainPropertyId, typeof(CommandDefinition.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(CommandDefinition), "Category", CommandDefinition.CategoryDomainPropertyId, typeof(CommandDefinition.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(EventProperty), "Name", EventProperty.NameDomainPropertyId, typeof(EventProperty.NamePropertyHandler)),
				new DomainMemberInfo(typeof(EventProperty), "Description", EventProperty.DescriptionDomainPropertyId, typeof(EventProperty.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(EventProperty), "DataType", EventProperty.DataTypeDomainPropertyId, typeof(EventProperty.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(EventProperty), "Notes", EventProperty.NotesDomainPropertyId, typeof(EventProperty.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionProperty), "Name", ProjectionProperty.NameDomainPropertyId, typeof(ProjectionProperty.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionProperty), "Description", ProjectionProperty.DescriptionDomainPropertyId, typeof(ProjectionProperty.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionProperty), "DataType", ProjectionProperty.DataTypeDomainPropertyId, typeof(ProjectionProperty.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionProperty), "Notes", ProjectionProperty.NotesDomainPropertyId, typeof(ProjectionProperty.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(CommandParameter), "Name", CommandParameter.NameDomainPropertyId, typeof(CommandParameter.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CommandParameter), "Description", CommandParameter.DescriptionDomainPropertyId, typeof(CommandParameter.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(CommandParameter), "ParameterType", CommandParameter.ParameterTypeDomainPropertyId, typeof(CommandParameter.ParameterTypePropertyHandler)),
				new DomainMemberInfo(typeof(CommandParameter), "Notes", CommandParameter.NotesDomainPropertyId, typeof(CommandParameter.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(CommandParameter), "IsAggregateKey", CommandParameter.IsAggregateKeyDomainPropertyId, typeof(CommandParameter.IsAggregateKeyPropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinition), "Name", QueryDefinition.NameDomainPropertyId, typeof(QueryDefinition.NamePropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinition), "Description", QueryDefinition.DescriptionDomainPropertyId, typeof(QueryDefinition.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinition), "MultiRowResults", QueryDefinition.MultiRowResultsDomainPropertyId, typeof(QueryDefinition.MultiRowResultsPropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinition), "Notes", QueryDefinition.NotesDomainPropertyId, typeof(QueryDefinition.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinition), "Category", QueryDefinition.CategoryDomainPropertyId, typeof(QueryDefinition.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(QueryInputParameter), "Name", QueryInputParameter.NameDomainPropertyId, typeof(QueryInputParameter.NamePropertyHandler)),
				new DomainMemberInfo(typeof(QueryInputParameter), "Description", QueryInputParameter.DescriptionDomainPropertyId, typeof(QueryInputParameter.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(QueryInputParameter), "DataType", QueryInputParameter.DataTypeDomainPropertyId, typeof(QueryInputParameter.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(QueryInputParameter), "IsAggregateKey", QueryInputParameter.IsAggregateKeyDomainPropertyId, typeof(QueryInputParameter.IsAggregateKeyPropertyHandler)),
				new DomainMemberInfo(typeof(QueryInputParameter), "Notes", QueryInputParameter.NotesDomainPropertyId, typeof(QueryInputParameter.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(QueryInputParameter), "IsEffectiveDate", QueryInputParameter.IsEffectiveDateDomainPropertyId, typeof(QueryInputParameter.IsEffectiveDatePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionEventPropertyOperation), "EventName", ProjectionEventPropertyOperation.EventNameDomainPropertyId, typeof(ProjectionEventPropertyOperation.EventNamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionEventPropertyOperation), "SourceEventPropertyName", ProjectionEventPropertyOperation.SourceEventPropertyNameDomainPropertyId, typeof(ProjectionEventPropertyOperation.SourceEventPropertyNamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionEventPropertyOperation), "TargetPropertyName", ProjectionEventPropertyOperation.TargetPropertyNameDomainPropertyId, typeof(ProjectionEventPropertyOperation.TargetPropertyNamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionEventPropertyOperation), "PropertyOperationToPerform", ProjectionEventPropertyOperation.PropertyOperationToPerformDomainPropertyId, typeof(ProjectionEventPropertyOperation.PropertyOperationToPerformPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionEventPropertyOperation), "Description", ProjectionEventPropertyOperation.DescriptionDomainPropertyId, typeof(ProjectionEventPropertyOperation.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionEventPropertyOperation), "Notes", ProjectionEventPropertyOperation.NotesDomainPropertyId, typeof(ProjectionEventPropertyOperation.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(QueryReturnParameter), "Name", QueryReturnParameter.NameDomainPropertyId, typeof(QueryReturnParameter.NamePropertyHandler)),
				new DomainMemberInfo(typeof(QueryReturnParameter), "Description", QueryReturnParameter.DescriptionDomainPropertyId, typeof(QueryReturnParameter.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(QueryReturnParameter), "DataType", QueryReturnParameter.DataTypeDomainPropertyId, typeof(QueryReturnParameter.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(QueryReturnParameter), "Notes", QueryReturnParameter.NotesDomainPropertyId, typeof(QueryReturnParameter.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(ModelSetting), "Name", ModelSetting.NameDomainPropertyId, typeof(ModelSetting.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ModelSetting), "Value", ModelSetting.ValueDomainPropertyId, typeof(ModelSetting.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroup), "IsInstance", IdentityGroup.IsInstanceDomainPropertyId, typeof(IdentityGroup.IsInstancePropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroup), "IsGlobal", IdentityGroup.IsGlobalDomainPropertyId, typeof(IdentityGroup.IsGlobalPropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroup), "Name", IdentityGroup.NameDomainPropertyId, typeof(IdentityGroup.NamePropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroup), "Description", IdentityGroup.DescriptionDomainPropertyId, typeof(IdentityGroup.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroup), "Notes", IdentityGroup.NotesDomainPropertyId, typeof(IdentityGroup.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroup), "Category", IdentityGroup.CategoryDomainPropertyId, typeof(IdentityGroup.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(Classifier), "Name", Classifier.NameDomainPropertyId, typeof(Classifier.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Classifier), "Description", Classifier.DescriptionDomainPropertyId, typeof(Classifier.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(Classifier), "Notes", Classifier.NotesDomainPropertyId, typeof(Classifier.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(Classifier), "Category", Classifier.CategoryDomainPropertyId, typeof(Classifier.CategoryPropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "EventName", ClassifierEventEvaluation.EventNameDomainPropertyId, typeof(ClassifierEventEvaluation.EventNamePropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "SourceEventPropertyName", ClassifierEventEvaluation.SourceEventPropertyNameDomainPropertyId, typeof(ClassifierEventEvaluation.SourceEventPropertyNamePropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "Notes", ClassifierEventEvaluation.NotesDomainPropertyId, typeof(ClassifierEventEvaluation.NotesPropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "Description", ClassifierEventEvaluation.DescriptionDomainPropertyId, typeof(ClassifierEventEvaluation.DescriptionPropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "PropertyEvaluationToPerform", ClassifierEventEvaluation.PropertyEvaluationToPerformDomainPropertyId, typeof(ClassifierEventEvaluation.PropertyEvaluationToPerformPropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "OnTrue", ClassifierEventEvaluation.OnTrueDomainPropertyId, typeof(ClassifierEventEvaluation.OnTruePropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "OnFalse", ClassifierEventEvaluation.OnFalseDomainPropertyId, typeof(ClassifierEventEvaluation.OnFalsePropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "Target", ClassifierEventEvaluation.TargetDomainPropertyId, typeof(ClassifierEventEvaluation.TargetPropertyHandler)),
				new DomainMemberInfo(typeof(ClassifierEventEvaluation), "TargetType", ClassifierEventEvaluation.TargetTypeDomainPropertyId, typeof(ClassifierEventEvaluation.TargetTypePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierHasEventDefinitions), "Name", AggregateIdentifierHasEventDefinitions.NameDomainPropertyId, typeof(AggregateIdentifierHasEventDefinitions.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierHasProjectionDefinitions), "Name", AggregateIdentifierHasProjectionDefinitions.NameDomainPropertyId, typeof(AggregateIdentifierHasProjectionDefinitions.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierIsChildOfTargetAggregateIdentifiers), "Name", AggregateIdentifierIsChildOfTargetAggregateIdentifiers.NameDomainPropertyId, typeof(AggregateIdentifierIsChildOfTargetAggregateIdentifiers.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierHasCommandDefinitions), "Name", AggregateIdentifierHasCommandDefinitions.NameDomainPropertyId, typeof(AggregateIdentifierHasCommandDefinitions.NamePropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinitionHasEventProperties), "CreatedVersion", EventDefinitionHasEventProperties.CreatedVersionDomainPropertyId, typeof(EventDefinitionHasEventProperties.CreatedVersionPropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinitionHasEventProperties), "DepreciatedVersion", EventDefinitionHasEventProperties.DepreciatedVersionDomainPropertyId, typeof(EventDefinitionHasEventProperties.DepreciatedVersionPropertyHandler)),
				new DomainMemberInfo(typeof(EventDefinitionHasEventProperties), "Name", EventDefinitionHasEventProperties.NameDomainPropertyId, typeof(EventDefinitionHasEventProperties.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinitionHasProjectionProperties), "Name", ProjectionDefinitionHasProjectionProperties.NameDomainPropertyId, typeof(ProjectionDefinitionHasProjectionProperties.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CommandDefinitionHasParameters), "Name", CommandDefinitionHasParameters.NameDomainPropertyId, typeof(CommandDefinitionHasParameters.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierHasQueryDefinitions), "Name", AggregateIdentifierHasQueryDefinitions.NameDomainPropertyId, typeof(AggregateIdentifierHasQueryDefinitions.NamePropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinitionHasQueryInputParameters), "Name", QueryDefinitionHasQueryInputParameters.NameDomainPropertyId, typeof(QueryDefinitionHasQueryInputParameters.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinitionHandlesEventDefinitions), "Name", ProjectionDefinitionHandlesEventDefinitions.NameDomainPropertyId, typeof(ProjectionDefinitionHandlesEventDefinitions.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ProjectionDefinitionHasEventPropertyOperations), "Name", ProjectionDefinitionHasEventPropertyOperations.NameDomainPropertyId, typeof(ProjectionDefinitionHasEventPropertyOperations.NamePropertyHandler)),
				new DomainMemberInfo(typeof(QueryDefinitionHasQueryReturnParameters), "Name", QueryDefinitionHasQueryReturnParameters.NameDomainPropertyId, typeof(QueryDefinitionHasQueryReturnParameters.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierHasIdentityGrouped), "Name", AggregateIdentifierHasIdentityGrouped.NameDomainPropertyId, typeof(AggregateIdentifierHasIdentityGrouped.NamePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateIdentifierHasClassifiers), "Name", AggregateIdentifierHasClassifiers.NameDomainPropertyId, typeof(AggregateIdentifierHasClassifiers.NamePropertyHandler)),
				new DomainMemberInfo(typeof(IdentityGroupReferencesClassifier), "Name", IdentityGroupReferencesClassifier.NameDomainPropertyId, typeof(IdentityGroupReferencesClassifier.NamePropertyHandler)),
				new DomainMemberInfo(typeof(CQRSdslDiagram), "OutputCodeLanguage", CQRSdslDiagram.OutputCodeLanguageDomainPropertyId, typeof(CQRSdslDiagram.OutputCodeLanguagePropertyHandler)),
				new DomainMemberInfo(typeof(CQRSdslDiagram), "CopyrightNotice", CQRSdslDiagram.CopyrightNoticeDomainPropertyId, typeof(CQRSdslDiagram.CopyrightNoticePropertyHandler)),
				new DomainMemberInfo(typeof(CQRSdslDiagram), "CompanyName", CQRSdslDiagram.CompanyNameDomainPropertyId, typeof(CQRSdslDiagram.CompanyNamePropertyHandler)),
				new DomainMemberInfo(typeof(CQRSdslDiagram), "SubfolderPerModel", CQRSdslDiagram.SubfolderPerModelDomainPropertyId, typeof(CQRSdslDiagram.SubfolderPerModelPropertyHandler)),
				new DomainMemberInfo(typeof(CQRSdslDiagram), "SubfolderPerAggregate", CQRSdslDiagram.SubfolderPerAggregateDomainPropertyId, typeof(CQRSdslDiagram.SubfolderPerAggregatePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateGeometryShape), "EventsVisible", AggregateGeometryShape.EventsVisibleDomainPropertyId, typeof(AggregateGeometryShape.EventsVisiblePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateGeometryShape), "ProjectionsVisible", AggregateGeometryShape.ProjectionsVisibleDomainPropertyId, typeof(AggregateGeometryShape.ProjectionsVisiblePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateGeometryShape), "QueriesVisible", AggregateGeometryShape.QueriesVisibleDomainPropertyId, typeof(AggregateGeometryShape.QueriesVisiblePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateGeometryShape), "CommandsVisible", AggregateGeometryShape.CommandsVisibleDomainPropertyId, typeof(AggregateGeometryShape.CommandsVisiblePropertyHandler)),
				new DomainMemberInfo(typeof(AggregateGeometryShape), "OutlineColor", AggregateGeometryShape.OutlineColorDomainPropertyId, typeof(AggregateGeometryShape.OutlineColorPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(CQRSModelHasAggregateIdentifiers), "CQRSModel", CQRSModelHasAggregateIdentifiers.CQRSModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(CQRSModelHasAggregateIdentifiers), "AggregateIdentifier", CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasEventDefinitions), "AggregateIdentifier", AggregateIdentifierHasEventDefinitions.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasEventDefinitions), "EventDefinition", AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasProjectionDefinitions), "AggregateIdentifier", AggregateIdentifierHasProjectionDefinitions.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasProjectionDefinitions), "ProjectionDefinition", AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierIsChildOfTargetAggregateIdentifiers), "SourceAggregateIdentifier", AggregateIdentifierIsChildOfTargetAggregateIdentifiers.SourceAggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierIsChildOfTargetAggregateIdentifiers), "TargetAggregateIdentifier", AggregateIdentifierIsChildOfTargetAggregateIdentifiers.TargetAggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasCommandDefinitions), "AggregateIdentifier", AggregateIdentifierHasCommandDefinitions.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasCommandDefinitions), "CommandDefinition", AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(EventDefinitionHasEventProperties), "EventDefinition", EventDefinitionHasEventProperties.EventDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(EventDefinitionHasEventProperties), "EventProperty", EventDefinitionHasEventProperties.EventPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProjectionDefinitionHasProjectionProperties), "ProjectionDefinition", ProjectionDefinitionHasProjectionProperties.ProjectionDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProjectionDefinitionHasProjectionProperties), "ProjectionProperty", ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommandDefinitionHasParameters), "CommandDefinition", CommandDefinitionHasParameters.CommandDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommandDefinitionHasParameters), "CommandParameter", CommandDefinitionHasParameters.CommandParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasQueryDefinitions), "AggregateIdentifier", AggregateIdentifierHasQueryDefinitions.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasQueryDefinitions), "QueryDefinition", AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionHasQueryInputParameters), "QueryDefinition", QueryDefinitionHasQueryInputParameters.QueryDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionHasQueryInputParameters), "QueryInputParameter", QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProjectionDefinitionHandlesEventDefinitions), "ProjectionDefinition", ProjectionDefinitionHandlesEventDefinitions.ProjectionDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProjectionDefinitionHandlesEventDefinitions), "EventDefinition", ProjectionDefinitionHandlesEventDefinitions.EventDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProjectionDefinitionHasEventPropertyOperations), "ProjectionDefinition", ProjectionDefinitionHasEventPropertyOperations.ProjectionDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ProjectionDefinitionHasEventPropertyOperations), "ProjectionEventPropertyOperation", ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionHasQueryReturnParameters), "QueryDefinition", QueryDefinitionHasQueryReturnParameters.QueryDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionHasQueryReturnParameters), "QueryReturnParameter", QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId),
				new DomainRolePlayerInfo(typeof(CQRSModelHasModelSet), "CQRSModel", CQRSModelHasModelSet.CQRSModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(CQRSModelHasModelSet), "ModelSetting", CQRSModelHasModelSet.ModelSettingDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionReferencesIdentityGroup), "QueryDefinition", QueryDefinitionReferencesIdentityGroup.QueryDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionReferencesIdentityGroup), "IdentityGroup", QueryDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasIdentityGrouped), "AggregateIdentifier", AggregateIdentifierHasIdentityGrouped.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasIdentityGrouped), "IdentityGroup", AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasClassifiers), "AggregateIdentifier", AggregateIdentifierHasClassifiers.AggregateIdentifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(AggregateIdentifierHasClassifiers), "Classifier", AggregateIdentifierHasClassifiers.ClassifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(IdentityGroupReferencesClassifier), "IdentityGroup", IdentityGroupReferencesClassifier.IdentityGroupDomainRoleId),
				new DomainRolePlayerInfo(typeof(IdentityGroupReferencesClassifier), "Classifier", IdentityGroupReferencesClassifier.ClassifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassifierHandlesEvents), "Classifier", ClassifierHandlesEvents.ClassifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassifierHandlesEvents), "EventDefinition", ClassifierHandlesEvents.EventDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassifierHasEventEvaluations), "Classifier", ClassifierHasEventEvaluations.ClassifierDomainRoleId),
				new DomainRolePlayerInfo(typeof(ClassifierHasEventEvaluations), "ClassifierEventEvaluation", ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommandDefinitionReferencesIdentityGroup), "CommandDefinition", CommandDefinitionReferencesIdentityGroup.CommandDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(CommandDefinitionReferencesIdentityGroup), "IdentityGroup", CommandDefinitionReferencesIdentityGroup.IdentityGroupDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionReferencesProjectionDefinition), "QueryDefinition", QueryDefinitionReferencesProjectionDefinition.QueryDefinitionDomainRoleId),
				new DomainRolePlayerInfo(typeof(QueryDefinitionReferencesProjectionDefinition), "ProjectionDefinition", QueryDefinitionReferencesProjectionDefinition.ProjectionDefinitionDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(33);
				createElementMap.Add(typeof(CQRSModel), 0);
				createElementMap.Add(typeof(AggregateIdentifier), 1);
				createElementMap.Add(typeof(EventDefinition), 2);
				createElementMap.Add(typeof(ProjectionDefinition), 3);
				createElementMap.Add(typeof(CommandDefinition), 4);
				createElementMap.Add(typeof(EventProperty), 5);
				createElementMap.Add(typeof(ProjectionProperty), 6);
				createElementMap.Add(typeof(CommandParameter), 7);
				createElementMap.Add(typeof(QueryDefinition), 8);
				createElementMap.Add(typeof(QueryInputParameter), 9);
				createElementMap.Add(typeof(ProjectionEventPropertyOperation), 10);
				createElementMap.Add(typeof(QueryReturnParameter), 11);
				createElementMap.Add(typeof(ModelSetting), 12);
				createElementMap.Add(typeof(IdentityGroup), 13);
				createElementMap.Add(typeof(Classifier), 14);
				createElementMap.Add(typeof(ClassifierEventEvaluation), 15);
				createElementMap.Add(typeof(CQRSdslDiagram), 16);
				createElementMap.Add(typeof(AggregateParenthoodConnector), 17);
				createElementMap.Add(typeof(AggregateEventConnector), 18);
				createElementMap.Add(typeof(AggregateProjectionConnector), 19);
				createElementMap.Add(typeof(AggregateQueryDefinitionConnector), 20);
				createElementMap.Add(typeof(AggregateCommandDefinitionConnector), 21);
				createElementMap.Add(typeof(ProjectionEventConnector), 22);
				createElementMap.Add(typeof(AggregateIdentityGroupConnector), 23);
				createElementMap.Add(typeof(IdentityGroupClassifierConnector), 24);
				createElementMap.Add(typeof(ClassifierEventConnector), 25);
				createElementMap.Add(typeof(AggregateGeometryShape), 26);
				createElementMap.Add(typeof(IdentityGroupGeometryShape), 27);
				createElementMap.Add(typeof(QueryDefinitionShape), 28);
				createElementMap.Add(typeof(EventDefinitionCompartmentShape), 29);
				createElementMap.Add(typeof(ProjectionDefinitionCompartmentShape), 30);
				createElementMap.Add(typeof(CommandDefinitionCompartmentShape), 31);
				createElementMap.Add(typeof(ClassifierCompartmentShape), 32);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				// A constructor was not generated for CQRSModel because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 0: return new CQRSModel(partition, propertyAssignments);
				case 1: return new AggregateIdentifier(partition, propertyAssignments);
				case 2: return new EventDefinition(partition, propertyAssignments);
				case 3: return new ProjectionDefinition(partition, propertyAssignments);
				case 4: return new CommandDefinition(partition, propertyAssignments);
				case 5: return new EventProperty(partition, propertyAssignments);
				case 6: return new ProjectionProperty(partition, propertyAssignments);
				case 7: return new CommandParameter(partition, propertyAssignments);
				case 8: return new QueryDefinition(partition, propertyAssignments);
				case 9: return new QueryInputParameter(partition, propertyAssignments);
				case 10: return new ProjectionEventPropertyOperation(partition, propertyAssignments);
				case 11: return new QueryReturnParameter(partition, propertyAssignments);
				case 12: return new ModelSetting(partition, propertyAssignments);
				case 13: return new IdentityGroup(partition, propertyAssignments);
				case 14: return new Classifier(partition, propertyAssignments);
				case 15: return new ClassifierEventEvaluation(partition, propertyAssignments);
				case 16: return new CQRSdslDiagram(partition, propertyAssignments);
				case 17: return new AggregateParenthoodConnector(partition, propertyAssignments);
				case 18: return new AggregateEventConnector(partition, propertyAssignments);
				case 19: return new AggregateProjectionConnector(partition, propertyAssignments);
				case 20: return new AggregateQueryDefinitionConnector(partition, propertyAssignments);
				case 21: return new AggregateCommandDefinitionConnector(partition, propertyAssignments);
				case 22: return new ProjectionEventConnector(partition, propertyAssignments);
				case 23: return new AggregateIdentityGroupConnector(partition, propertyAssignments);
				case 24: return new IdentityGroupClassifierConnector(partition, propertyAssignments);
				case 25: return new ClassifierEventConnector(partition, propertyAssignments);
				case 26: return new AggregateGeometryShape(partition, propertyAssignments);
				case 27: return new IdentityGroupGeometryShape(partition, propertyAssignments);
				case 28: return new QueryDefinitionShape(partition, propertyAssignments);
				case 29: return new EventDefinitionCompartmentShape(partition, propertyAssignments);
				case 30: return new ProjectionDefinitionCompartmentShape(partition, propertyAssignments);
				case 31: return new CommandDefinitionCompartmentShape(partition, propertyAssignments);
				case 32: return new ClassifierCompartmentShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(22);
				createElementLinkMap.Add(typeof(CQRSModelHasAggregateIdentifiers), 0);
				createElementLinkMap.Add(typeof(AggregateIdentifierHasEventDefinitions), 1);
				createElementLinkMap.Add(typeof(AggregateIdentifierHasProjectionDefinitions), 2);
				createElementLinkMap.Add(typeof(AggregateIdentifierIsChildOfTargetAggregateIdentifiers), 3);
				createElementLinkMap.Add(typeof(AggregateIdentifierHasCommandDefinitions), 4);
				createElementLinkMap.Add(typeof(EventDefinitionHasEventProperties), 5);
				createElementLinkMap.Add(typeof(ProjectionDefinitionHasProjectionProperties), 6);
				createElementLinkMap.Add(typeof(CommandDefinitionHasParameters), 7);
				createElementLinkMap.Add(typeof(AggregateIdentifierHasQueryDefinitions), 8);
				createElementLinkMap.Add(typeof(QueryDefinitionHasQueryInputParameters), 9);
				createElementLinkMap.Add(typeof(ProjectionDefinitionHandlesEventDefinitions), 10);
				createElementLinkMap.Add(typeof(ProjectionDefinitionHasEventPropertyOperations), 11);
				createElementLinkMap.Add(typeof(QueryDefinitionHasQueryReturnParameters), 12);
				createElementLinkMap.Add(typeof(CQRSModelHasModelSet), 13);
				createElementLinkMap.Add(typeof(QueryDefinitionReferencesIdentityGroup), 14);
				createElementLinkMap.Add(typeof(AggregateIdentifierHasIdentityGrouped), 15);
				createElementLinkMap.Add(typeof(AggregateIdentifierHasClassifiers), 16);
				createElementLinkMap.Add(typeof(IdentityGroupReferencesClassifier), 17);
				createElementLinkMap.Add(typeof(ClassifierHandlesEvents), 18);
				createElementLinkMap.Add(typeof(ClassifierHasEventEvaluations), 19);
				createElementLinkMap.Add(typeof(CommandDefinitionReferencesIdentityGroup), 20);
				createElementLinkMap.Add(typeof(QueryDefinitionReferencesProjectionDefinition), 21);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new CQRSModelHasAggregateIdentifiers(partition, roleAssignments, propertyAssignments);
				case 1: return new AggregateIdentifierHasEventDefinitions(partition, roleAssignments, propertyAssignments);
				case 2: return new AggregateIdentifierHasProjectionDefinitions(partition, roleAssignments, propertyAssignments);
				case 3: return new AggregateIdentifierIsChildOfTargetAggregateIdentifiers(partition, roleAssignments, propertyAssignments);
				case 4: return new AggregateIdentifierHasCommandDefinitions(partition, roleAssignments, propertyAssignments);
				case 5: return new EventDefinitionHasEventProperties(partition, roleAssignments, propertyAssignments);
				case 6: return new ProjectionDefinitionHasProjectionProperties(partition, roleAssignments, propertyAssignments);
				case 7: return new CommandDefinitionHasParameters(partition, roleAssignments, propertyAssignments);
				case 8: return new AggregateIdentifierHasQueryDefinitions(partition, roleAssignments, propertyAssignments);
				case 9: return new QueryDefinitionHasQueryInputParameters(partition, roleAssignments, propertyAssignments);
				case 10: return new ProjectionDefinitionHandlesEventDefinitions(partition, roleAssignments, propertyAssignments);
				case 11: return new ProjectionDefinitionHasEventPropertyOperations(partition, roleAssignments, propertyAssignments);
				case 12: return new QueryDefinitionHasQueryReturnParameters(partition, roleAssignments, propertyAssignments);
				case 13: return new CQRSModelHasModelSet(partition, roleAssignments, propertyAssignments);
				case 14: return new QueryDefinitionReferencesIdentityGroup(partition, roleAssignments, propertyAssignments);
				case 15: return new AggregateIdentifierHasIdentityGrouped(partition, roleAssignments, propertyAssignments);
				case 16: return new AggregateIdentifierHasClassifiers(partition, roleAssignments, propertyAssignments);
				case 17: return new IdentityGroupReferencesClassifier(partition, roleAssignments, propertyAssignments);
				case 18: return new ClassifierHandlesEvents(partition, roleAssignments, propertyAssignments);
				case 19: return new ClassifierHasEventEvaluations(partition, roleAssignments, propertyAssignments);
				case 20: return new CommandDefinitionReferencesIdentityGroup(partition, roleAssignments, propertyAssignments);
				case 21: return new QueryDefinitionReferencesProjectionDefinition(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CQRSdslDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (CQRSdslDomainModel.resourceManager == null)
				{
					CQRSdslDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(CQRSdslDomainModel).Assembly);
				}
				return CQRSdslDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return CQRSdslDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return CQRSdslDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (CQRSdslDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new CQRSdslCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					CQRSdslDomainModel.copyClosure = copyFilter;
				}
				return CQRSdslDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (CQRSdslDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new CQRSdslDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					CQRSdslDomainModel.removeClosure = removeFilter;
				}
				return CQRSdslDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::CQRSAzure.CQRSdsl.Dsl.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CQRSdslDeleteClosure : CQRSdslDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CQRSdslDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CQRSdslDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public CQRSdslDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasAggregateIdentifiers.AggregateIdentifierDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasEventDefinitions.EventDefinitionDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasProjectionDefinitions.ProjectionDefinitionDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasCommandDefinitions.CommandDefinitionDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.EventDefinitionHasEventProperties.EventPropertyDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasProjectionProperties.ProjectionPropertyDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.CommandDefinitionHasParameters.CommandParameterDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasQueryDefinitions.QueryDefinitionDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryInputParameters.QueryInputParameterDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.ProjectionDefinitionHasEventPropertyOperations.ProjectionEventPropertyOperationDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.QueryDefinitionHasQueryReturnParameters.QueryReturnParameterDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.CQRSModelHasModelSet.ModelSettingDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasIdentityGrouped.IdentityGroupDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.AggregateIdentifierHasClassifiers.ClassifierDomainRoleId, true);
			DomainRoles.Add(global::CQRSAzure.CQRSdsl.Dsl.ClassifierHasEventEvaluations.ClassifierEventEvaluationDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CQRSdslCopyClosure : CQRSdslCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CQRSdslCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CQRSdslCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CQRSdslCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: KeyDataType
	/// The distinct data types that can be used to provide the key for any given
	/// aggregate
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum KeyDataType
	{
		/// <summary>
		/// SystemGUID
		/// A system provided globally unique identifier
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.KeyDataType/SystemGUID.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		SystemGUID = 0,
		/// <summary>
		/// IncrementalNumber
		/// A system provided incremental record number
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.KeyDataType/IncrementalNumber.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IncrementalNumber = 1,
		/// <summary>
		/// DomainUniqueString
		/// A unique string provided by the domain
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.KeyDataType/DomainUniqueString.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		DomainUniqueString = 2,
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: PropertyDataType
	/// The subset of data types used for properties in this system
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PropertyDataType
	{
		/// <summary>
		/// Integer
		/// A whole number
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/Integer.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Integer = 0,
		/// <summary>
		/// Decimal
		/// A decimal number for currency / amounts
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/Decimal.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Decimal = 1,
		/// <summary>
		/// FloatingPointNumber
		/// A floating point number 
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/FloatingPointNumber.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		FloatingPointNumber = 2,
		/// <summary>
		/// Date
		/// A date and time
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/Date.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Date = 3,
		/// <summary>
		/// String
		/// A string of text
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/String.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		String = 4,
		/// <summary>
		/// Image
		/// A picture or image
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/Image.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Image = 5,
		/// <summary>
		/// Boolean
		/// A true or false value
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/Boolean.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Boolean = 6,
		/// <summary>
		/// GUID
		/// Globally unique identifier
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyDataType/GUID.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		GUID = 7,
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: PropertyOperation
	/// What is done to a property when the event is handled
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PropertyOperation
	{
		/// <summary>
		/// SetToValue
		/// Set the projection property value to the event named property
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/SetToValue.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		SetToValue = 0,
		/// <summary>
		/// IncrementCount
		/// Increment the property as a counter
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/IncrementCount.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IncrementCount = 1,
		/// <summary>
		/// DecrementCount
		/// Decrement the property as a counter
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/DecrementCount.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		DecrementCount = 2,
		/// <summary>
		/// IncrementByValue
		/// Increment the property by the value of an event's named property
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/IncrementByValue.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IncrementByValue = 3,
		/// <summary>
		/// DecrementByValue
		/// Decrement the property by the value of an event's named property
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/DecrementByValue.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		DecrementByValue = 4,
		/// <summary>
		/// SetFlag
		/// Set a flag status property
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/SetFlag.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		SetFlag = 5,
		/// <summary>
		/// UnsetFlag
		/// Unset a flag status property
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyOperation/UnsetFlag.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		UnsetFlag = 6,
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: TargetLanguage
	/// The language to generate the code in
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum TargetLanguage
	{
		/// <summary>
		/// CSharp
		/// C Sharp code output
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.TargetLanguage/CSharp.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		CSharp = 1,
		/// <summary>
		/// VBNet
		/// Output code in VB.Net
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.TargetLanguage/VBNet.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		VBNet = 2,
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: IdentityGroupClassification
	/// Does this include or exclude the entity from the identity group
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum IdentityGroupClassification
	{
		/// <summary>
		/// Exclude
		/// Exclude the identity from the group (default)
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupClassification/Exclude.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Exclude = 0,
		/// <summary>
		/// Include
		/// Include the identity in the group
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupClassification/Include.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Include = 1,
		/// <summary>
		/// Unchanged
		/// The membership (or not) is as it was before the event was handled
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.IdentityGroupClassification/Unchanged.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Unchanged = 2,
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: PropertyEvaluation
	/// An evaluation to perform on a source property of an event
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum PropertyEvaluation
	{
		/// <summary>
		/// IsEmpty
		/// The source property is empty/null
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/IsEmpty.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IsEmpty = 9,
		/// <summary>
		/// Equals
		/// The property equals the test value
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/Equals.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Equals = 1,
		/// <summary>
		/// IsLessThan
		/// Property is less than the value it is being compared to
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/IsLessThan.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IsLessThan = 2,
		/// <summary>
		/// IsLessThanOrEqualTo
		/// Property value is less than or equal to the comparison value
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/IsLessThanOrEqualTo.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IsLessThanOrEqualTo = 3,
		/// <summary>
		/// IsGreaterThan
		/// Property value is greater than the value it is being compared against
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/IsGreaterThan.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IsGreaterThan = 4,
		/// <summary>
		/// IsGreaterThanOrEqualTo
		/// The property value is greater than or equal to the value it is being compared
		/// against
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/IsGreaterThanOrEqualTo.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		IsGreaterThanOrEqualTo = 5,
		/// <summary>
		/// Contains
		/// The property value contains the test value
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/Contains.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Contains = 6,
		/// <summary>
		/// StartsWith
		/// The property value starts with the test value
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/StartsWith.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		StartsWith = 7,
		/// <summary>
		/// EndsWith
		/// The property value ends with the test value
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/EndsWith.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		EndsWith = 8,
		/// <summary>
		/// Always
		/// Always evaluates to TRUE
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/Always.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Always = 0,
		/// <summary>
		/// Custom
		/// A custom event evaluator
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.PropertyEvaluation/Custom.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Custom = 10,
	}
}
namespace CQRSAzure.CQRSdsl.Dsl
{
	/// <summary>
	/// DomainEnumeration: EvaluationTargetType
	/// What type of thing is the target of the property evaluation
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum EvaluationTargetType
	{
		/// <summary>
		/// Constant
		/// The target is a hard-coded constant
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EvaluationTargetType/Constant.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Constant = 0,
		/// <summary>
		/// Variable
		/// The target is a named variable in the classifier class
		/// </summary>
		[DslDesign::DescriptionResource("CQRSAzure.CQRSdsl.Dsl.EvaluationTargetType/Variable.Description", typeof(global::CQRSAzure.CQRSdsl.Dsl.CQRSdslDomainModel), "CQRSAzure.CQRSdsl.Dsl.GeneratedCode.DomainModelResx")]
		Variable = 1,
	}
}

