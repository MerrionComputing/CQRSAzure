//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using Accounts.Account.eventDefinition;

namespace Accounts.Account.projection
{

    /// <summary>
    /// The running balance of the account
    /// </summary>
    [CQRSAzure.EventSourcing.DomainNameAttribute("Accounts")]
    [CQRSAzure.EventSourcing.Category("Financial")]
    public partial class Running_Balance 
        : CQRSAzure.EventSourcing.ProjectionBase<Account, string>, 
        IRunning_Balance,
        CQRSAzure.EventSourcing.IProjection<Account ,string >  
    {
        
        #region Private members
        // TODO: Make this property read only
        private System.DateTime _Last_Transaction_Date;
        
        // TODO: Make this property read only
        private decimal _Balance;
        #endregion
        
        /// <summary>
        /// The date/time of the last balance affecting transaction
        /// </summary>
        public System.DateTime Last_Transaction_Date
        {
            get
            {
                return _Last_Transaction_Date;
            }
        }
        
        /// <summary>
        /// The account balance
        /// </summary>
        public decimal Balance
        {
            get
            {
                return _Balance;
            }
        }
        
        public override bool SupportsSnapshots
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Money was depositted in the account
        /// </summary>
        public void HandleEvent(Money_Deposited eventToHandle) 
        {
            // Set last trans date for deposit
            _Last_Transaction_Date = eventToHandle.Date_Applied;
            // Increase balance by deposit amount
            if (eventToHandle.Exchange_Rate > 0)
            {
                _Balance = (_Balance + (eventToHandle.Amount * eventToHandle.Exchange_Rate ));
            }
            else
            {
                // It is in the base currecny
                _Balance = (_Balance + eventToHandle.Amount);
            }
        }
        
        /// <summary>
        /// Money was taken from the account
        /// </summary>
        public void HandleEvent(Money_Withdrawn eventToHandle)
        {
            // Set thge last trans. date to the withdrawal date
            _Last_Transaction_Date = eventToHandle.Withdrawn_Date;
            // Decrease balance by withdrawal amount
            _Balance = (_Balance - eventToHandle.Amount);
        }
        
        /// <summary>
        /// Does the projection handle this event type
        /// </summary>
        /// <param name="eventType">
        /// The event type to check
        /// </param>
        /// <remarks>
        /// Event types handled
        /// Money Deposited - Money was depositted in the account
        /// Money Withdrawn - Money was taken from the account
        /// </remarks>
        public override bool HandlesEventType(Type eventType)
        {
            if (eventType == typeof (Money_Deposited) )
            {
                return true;
            }
            if (eventType == typeof(Money_Withdrawn ))
            {
                return true;
            }
            return false;
        }
        
        public override void HandleEvent<TEvent>(TEvent eventToHandle)
        
        {
            if ( eventToHandle.GetType() == typeof(Money_Deposited))
            {
                HandleEvent(eventToHandle as Money_Deposited );
            }
            if (eventToHandle.GetType() == typeof(Money_Withdrawn))
            {
                HandleEvent(eventToHandle as Money_Withdrawn); 
            }
        }
    }
}
