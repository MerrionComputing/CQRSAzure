//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.Serialization;

namespace Accounts.Account.eventDefinition
{



    /// <summary>
    /// Money was depositted in the account
    /// </summary>
    [Serializable()]
    [CQRSAzure.EventSourcing.DomainNameAttribute("Accounts")]
    [CQRSAzure.EventSourcing.Category("Financial")]
    public partial class Money_Deposited 
        : object, 
        IMoney_Deposited,
        CQRSAzure.EventSourcing.IEvent<Account >  
    {
        
        // Version number - always increment this if the event definition changes
        public const int EVENT_VERSION = 0;
        
        #region Private members
        // TODO: Make this property read only
        private decimal _Amount;
        
        // TODO: Make this property read only
        private System.DateTime _Date_Deposited;
        
        // TODO: Make this property read only
        private System.DateTime _Date_Applied;
        
        // TODO: Make this property read only
        private string _Exchange_Currency;
        
        // TODO: Make this property read only
        private decimal _Exchange_Rate;
        #endregion
        
        /// <summary>
        /// Empty constructor For serialisation
        /// This should be removed If serialisation Is Not needed
        /// </summary>
        public Money_Deposited()
        {
        }
        
        /// <summary>
        /// Create And populate a New instance Of this Class from the underlying Interface
        /// </summary>
        /// <remarks>
        /// This should be called When the Event Is created from an Event stream
        /// </remarks>
        public Money_Deposited(IMoney_Deposited Money_DepositedInit)
        {
            _Amount = Money_DepositedInit.Amount;
            _Date_Deposited = Money_DepositedInit.Date_Deposited;
            _Date_Applied = Money_DepositedInit.Date_Applied;
            _Exchange_Currency = Money_DepositedInit.Exchange_Currency;
            _Exchange_Rate = Money_DepositedInit.Exchange_Rate;
        }
        
        /// <summary>
        /// Create And populate a New instance Of this Class from the underlying properties
        /// </summary>
        /// <remarks>
        /// This should be called When the Event Is created from an Event stream
        /// </remarks>
        /// <param name="Amount">
        /// The amount deposited (in base currency)
        /// </param>
        /// <param name="Date Deposited">
        /// The date the deposit was made
        /// </param>
        /// <param name="Date Applied">
        /// The date applied to the account
        /// The deposit does not affect the balance until it is applied
        /// </param>
        /// <param name="Exchange Currency">
        /// Deposit currency code
        /// ISO (3 letter) currency code if the deposit was in a non-base currency
        /// </param>
        /// <param name="Exchange Rate">
        /// Exchange rate applied to the deposit
        /// This will be 1.0 if in base currency
        /// </param>
        public Money_Deposited(decimal Amount_In, System.DateTime Date_Deposited_In, System.DateTime Date_Applied_In, string Exchange_Currency_In, decimal Exchange_Rate_In)
        {
            _Amount = Amount_In;
            _Date_Deposited = Date_Deposited_In;
            _Date_Applied = Date_Applied_In;
            _Exchange_Currency = Exchange_Currency_In;
            _Exchange_Rate = Exchange_Rate_In;
        }
        
        /// <summary>
        /// Create And populate a New instance Of this Class from the serialized data
        /// </summary>
        /// <param name="info">
        /// The SerializationInfo passed In containing the values Of this Event
        /// </param>
        /// <param name="context">
        /// Additional StreamingContext On how the Event Is streamed
        /// </param>
        Money_Deposited(SerializationInfo info, StreamingContext context)
        {
            _Amount = info.GetDecimal("Amount");
            _Date_Deposited = info.GetDateTime("Date_Deposited");
            _Date_Applied = info.GetDateTime("Date_Applied");
            _Exchange_Currency = info.GetString("Exchange_Currency");
            _Exchange_Rate = info.GetDecimal("Exchange_Rate");
        }
        
        public uint Version
        {
            get
            {
                return EVENT_VERSION;
            }
        }
        
        /// <summary>
        /// The amount deposited (in base currency)
        /// </summary>
        public decimal Amount
        {
            get
            {
                return _Amount;
            }
        }
        
        /// <summary>
        /// The date the deposit was made
        /// </summary>
        public System.DateTime Date_Deposited
        {
            get
            {
                return _Date_Deposited;
            }
        }
        
        /// <summary>
        /// The date applied to the account
        /// </summary>
        /// <remarks>
        /// The deposit does not affect the balance until it is applied
        /// </remarks>
        public System.DateTime Date_Applied
        {
            get
            {
                return _Date_Applied;
            }
        }
        
        /// <summary>
        /// Deposit currency code
        /// </summary>
        /// <remarks>
        /// ISO (3 letter) currency code if the deposit was in a non-base currency
        /// </remarks>
        public string Exchange_Currency
        {
            get
            {
                return _Exchange_Currency;
            }
        }
        
        /// <summary>
        /// Exchange rate applied to the deposit
        /// </summary>
        /// <remarks>
        /// This will be 1.0 if in base currency
        /// </remarks>
        public decimal Exchange_Rate
        {
            get
            {
                return _Exchange_Rate;
            }
        }
        
        /// <summary>
        /// Factory method To create an instance Of this Event
        /// </summary>
        /// <param name="Amount">
        /// The amount deposited (in base currency)
        /// </param>
        /// <param name="Date Deposited">
        /// The date the deposit was made
        /// </param>
        /// <param name="Date Applied">
        /// The date applied to the account
        /// The deposit does not affect the balance until it is applied
        /// </param>
        /// <param name="Exchange Currency">
        /// Deposit currency code
        /// ISO (3 letter) currency code if the deposit was in a non-base currency
        /// </param>
        /// <param name="Exchange Rate">
        /// Exchange rate applied to the deposit
        /// This will be 1.0 if in base currency
        /// </param>
        static IMoney_Deposited Create(decimal Amount_In, System.DateTime Date_Deposited_In, System.DateTime Date_Applied_In, string Exchange_Currency_In, decimal Exchange_Rate_In)
        {
            return new Money_Deposited(Amount_In, Date_Deposited_In, Date_Applied_In, Exchange_Currency_In, Exchange_Rate_In);
        }
        
        /// <summary>
        /// Populates a SerializationInfo with the data needed to serialize this event instance
        /// </summary>
        /// <remarks>
        /// The version number is also to be saved
        /// </remarks>
        public void GetObjectData(SerializationInfo info, StreamingContext context)
        {
            info.AddValue("Amount", _Amount);
            info.AddValue("Date_Deposited", _Date_Deposited);
            info.AddValue("Date_Applied", _Date_Applied);
            info.AddValue("Exchange_Currency", _Exchange_Currency);
            info.AddValue("Exchange_Rate", _Exchange_Rate);
            info.AddValue("EVENT_VERSION", EVENT_VERSION);
        }
    }
}
